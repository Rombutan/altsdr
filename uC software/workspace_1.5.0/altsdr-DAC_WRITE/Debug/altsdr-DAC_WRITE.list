
altsdr-DAC_WRITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a6c  08003a6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08003a84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003a84  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afa4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b0  00000000  00000000  0002afe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d4c  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b73  00000000  00000000  000518dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5526  00000000  00000000  0005a44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  0013f9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a0c 	.word	0x08003a0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003a0c 	.word	0x08003a0c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b598      	push	{r3, r4, r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fb25 	bl	800134a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f846 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 f96a 	bl	8000fdc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d08:	f000 f91e 	bl	8000f48 <MX_LPUART1_UART_Init>
  MX_DAC2_Init();
 8000d0c:	f000 f8e2 	bl	8000ed4 <MX_DAC2_Init>
  MX_DAC1_Init();
 8000d10:	f000 f8a6 	bl	8000e60 <MX_DAC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  var = val*(4096)/3.3;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <main+0x88>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d84 <main+0x8c>
 8000d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d22:	ee17 0a90 	vmov	r0, s15
 8000d26:	f7ff fbdb 	bl	80004e0 <__aeabi_f2d>
 8000d2a:	a313      	add	r3, pc, #76	; (adr r3, 8000d78 <main+0x80>)
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f7ff fd58 	bl	80007e4 <__aeabi_ddiv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	f7ff fe3a 	bl	80009b4 <__aeabi_d2uiz>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <main+0x90>)
 8000d44:	601a      	str	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1,
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <main+0x90>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <main+0x94>)
 8000d50:	f000 fcbf 	bl	80016d2 <HAL_DAC_SetValue>
	  DAC_ALIGN_12B_R, var);
	  val += 0.5;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <main+0x88>)
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <main+0x88>)
 8000d64:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(2000);
 8000d68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d6c:	f000 fb5e 	bl	800142c <HAL_Delay>
	  var = val*(4096)/3.3;
 8000d70:	e7d0      	b.n	8000d14 <main+0x1c>
 8000d72:	bf00      	nop
 8000d74:	f3af 8000 	nop.w
 8000d78:	66666666 	.word	0x66666666
 8000d7c:	400a6666 	.word	0x400a6666
 8000d80:	20000000 	.word	0x20000000
 8000d84:	45800000 	.word	0x45800000
 8000d88:	200000e0 	.word	0x200000e0
 8000d8c:	2000002c 	.word	0x2000002c

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0a8      	sub	sp, #160	; 0xa0
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fe2c 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2254      	movs	r2, #84	; 0x54
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fe1e 	bl	80039fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f001 f819 	bl	8001df8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000de6:	2355      	movs	r3, #85	; 0x55
 8000de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f8ac 	bl	8001f60 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e0e:	f000 f955 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fbaf 	bl	8002590 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e38:	f000 f940 	bl	80010bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fdbe 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e52:	f000 f933 	bl	80010bc <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	37a0      	adds	r7, #160	; 0xa0
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2230      	movs	r2, #48	; 0x30
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fdc5 	bl	80039fc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_DAC1_Init+0x6c>)
 8000e74:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_DAC1_Init+0x70>)
 8000e76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_DAC1_Init+0x6c>)
 8000e7a:	f000 fc08 	bl	800168e <HAL_DAC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e84:	f000 f91a 	bl	80010bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_DAC1_Init+0x6c>)
 8000eb4:	f000 fc36 	bl	8001724 <HAL_DAC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ebe:	f000 f8fd 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000040 	.word	0x20000040
 8000ed0:	50000800 	.word	0x50000800

08000ed4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2230      	movs	r2, #48	; 0x30
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fd8b 	bl	80039fc <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_DAC2_Init+0x6c>)
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <MX_DAC2_Init+0x70>)
 8000eea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000eec:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_DAC2_Init+0x6c>)
 8000eee:	f000 fbce 	bl	800168e <HAL_DAC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000ef8:	f000 f8e0 	bl	80010bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000efc:	2302      	movs	r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_DAC2_Init+0x6c>)
 8000f28:	f000 fbfc 	bl	8001724 <HAL_DAC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000f32:	f000 f8c3 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000002c 	.word	0x2000002c
 8000f44:	50000c00 	.word	0x50000c00

08000f48 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <MX_LPUART1_UART_Init+0x90>)
 8000f50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f8c:	f001 ff68 	bl	8002e60 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f96:	f000 f891 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000f9e:	f002 fc24 	bl	80037ea <HAL_UARTEx_SetTxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fa8:	f000 f888 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000fb0:	f002 fc59 	bl	8003866 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000fba:	f000 f87f 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_LPUART1_UART_Init+0x8c>)
 8000fc0:	f002 fbda 	bl	8003778 <HAL_UARTEx_DisableFifoMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000fca:	f000 f877 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000054 	.word	0x20000054
 8000fd8:	40008000 	.word	0x40008000

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2120      	movs	r1, #32
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 fe91 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001074:	f000 fd02 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001078:	2320      	movs	r3, #32
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f000 fcf3 	bl	8001a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2028      	movs	r0, #40	; 0x28
 800109c:	f000 fac3 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a0:	2028      	movs	r0, #40	; 0x28
 80010a2:	f000 fada 	bl	800165a <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	10110000 	.word	0x10110000
 80010b8:	48000800 	.word	0x48000800

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <Error_Handler+0x6>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010fa:	f000 ff21 	bl	8001f40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <HAL_DAC_MspInit+0xcc>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d125      	bne.n	800117a <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800115e:	2310      	movs	r3, #16
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 fc82 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001178:	e029      	b.n	80011ce <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_DAC_MspInit+0xd4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d124      	bne.n	80011ce <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 800118a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_DAC_MspInit+0xd0>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f000 fc57 	bl	8001a7c <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50000800 	.word	0x50000800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	50000c00 	.word	0x50000c00

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x7c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d128      	bne.n	8001258 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_UART_MspInit+0x80>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x80>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001246:	230c      	movs	r3, #12
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f000 fc12 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40008000 	.word	0x40008000
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f89c 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f000 fd74 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <SystemInit+0x28>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <SystemInit+0x28>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SystemInit+0x28>)
 80012e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e6:	609a      	str	r2, [r3, #8]
#endif
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490e      	ldr	r1, [pc, #56]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0b      	ldr	r4, [pc, #44]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001322:	f7ff ffd3 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f002 fb45 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fce5 	bl	8000cf8 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   r0, =_estack
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800133c:	08003a74 	.word	0x08003a74
  ldr r2, =_sbss
 8001340:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001344:	200000e8 	.word	0x200000e8

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>

0800134a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f95b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f80e 	bl	800137c <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e001      	b.n	8001370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136c:	f7ff feaa 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001370:	79fb      	ldrb	r3, [r7, #7]

}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_InitTick+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d022      	beq.n	80013d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_InitTick+0x6c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_InitTick+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800139c:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f966 	bl	8001676 <HAL_SYSTICK_Config>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d809      	bhi.n	80013ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b6:	2200      	movs	r2, #0
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013be:	f000 f932 	bl	8001626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_InitTick+0x70>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e007      	b.n	80013da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e004      	b.n	80013da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000000c 	.word	0x2000000c
 80013e8:	20000004 	.word	0x20000004
 80013ec:	20000008 	.word	0x20000008

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x1c>)
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	200000e4 	.word	0x200000e4
 8001410:	2000000c 	.word	0x2000000c

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200000e4 	.word	0x200000e4

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d004      	beq.n	8001450 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_Delay+0x40>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001450:	bf00      	nop
 8001452:	f7ff ffdf 	bl	8001414 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	d8f7      	bhi.n	8001452 <HAL_Delay+0x26>
  {
  }
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000000c 	.word	0x2000000c

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff40 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff33 	bl	80014d4 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa4 	bl	80015cc <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e014      	b.n	80016ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fd2b 	bl	800110c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b087      	sub	sp, #28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	3308      	adds	r3, #8
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e004      	b.n	800170c <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	3314      	adds	r3, #20
 800170a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	461a      	mov	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	795b      	ldrb	r3, [r3, #5]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_DAC_ConfigChannel+0x1c>
 800173c:	2302      	movs	r3, #2
 800173e:	e194      	b.n	8001a6a <HAL_DAC_ConfigChannel+0x346>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2202      	movs	r2, #2
 800174a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d174      	bne.n	800183e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d137      	bne.n	80017ca <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800175a:	f7ff fe5b 	bl	8001414 <HAL_GetTick>
 800175e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001760:	e011      	b.n	8001786 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001762:	f7ff fe57 	bl	8001414 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d90a      	bls.n	8001786 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f043 0208 	orr.w	r2, r3, #8
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2203      	movs	r2, #3
 8001780:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e171      	b.n	8001a6a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e6      	bne.n	8001762 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fe49 	bl	800142c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
 80017a4:	e01e      	b.n	80017e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017a6:	f7ff fe35 	bl	8001414 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d90a      	bls.n	80017ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f043 0208 	orr.w	r2, r3, #8
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2203      	movs	r2, #3
 80017c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e14f      	b.n	8001a6a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dbe8      	blt.n	80017a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff fe29 	bl	800142c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	ea02 0103 	and.w	r1, r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	409a      	lsls	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	21ff      	movs	r1, #255	; 0xff
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	ea02 0103 	and.w	r1, r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d11d      	bne.n	8001882 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	221f      	movs	r2, #31
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185e:	4013      	ands	r3, r2
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001876:	4313      	orrs	r3, r2
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2207      	movs	r2, #7
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189a:	4013      	ands	r3, r2
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	e011      	b.n	80018d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	e008      	b.n	80018d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	e001      	b.n	80018d4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	4013      	ands	r3, r2
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_DAC_ConfigChannel+0x1e4>
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	e000      	b.n	800190a <HAL_DAC_ConfigChannel+0x1e6>
 8001908:	2300      	movs	r3, #0
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	4013      	ands	r3, r2
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	795b      	ldrb	r3, [r3, #5]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <HAL_DAC_ConfigChannel+0x210>
 800192e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001932:	e000      	b.n	8001936 <HAL_DAC_ConfigChannel+0x212>
 8001934:	2300      	movs	r3, #0
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d114      	bne.n	8001976 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800194c:	f000 ffbe 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8001950:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	4a47      	ldr	r2, [pc, #284]	; (8001a74 <HAL_DAC_ConfigChannel+0x350>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d904      	bls.n	8001964 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	e00d      	b.n	8001980 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	4a44      	ldr	r2, [pc, #272]	; (8001a78 <HAL_DAC_ConfigChannel+0x354>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d909      	bls.n	8001980 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e004      	b.n	8001980 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4313      	orrs	r3, r2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	4313      	orrs	r3, r2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	4013      	ands	r3, r2
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4313      	orrs	r3, r2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	22c0      	movs	r2, #192	; 0xc0
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	400a      	ands	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	ea02 0103 	and.w	r1, r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	09896800 	.word	0x09896800
 8001a78:	04c4b400 	.word	0x04c4b400

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a8a:	e15a      	b.n	8001d42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 814c 	beq.w	8001d3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_GPIO_Init+0x48>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab8:	2b11      	cmp	r3, #17
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0xea>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d123      	bne.n	8001bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0203 	and.w	r2, r3, #3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80a6 	beq.w	8001d3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf0:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf4:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c08:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c32:	d01f      	beq.n	8001c74 <HAL_GPIO_Init+0x1f8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d019      	beq.n	8001c70 <HAL_GPIO_Init+0x1f4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_Init+0x1f0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_GPIO_Init+0x2f4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_GPIO_Init+0x2f8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1e8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2fc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1e4>
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	e00a      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c60:	2306      	movs	r3, #6
 8001c62:	e008      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e006      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c74:	2300      	movs	r3, #0
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c86:	4937      	ldr	r1, [pc, #220]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce2:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f ae9d 	bne.w	8001a8c <HAL_GPIO_Init+0x10>
  }
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48001000 	.word	0x48001000
 8001d78:	48001400 	.word	0x48001400
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f806 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d141      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d131      	bne.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1a:	4a46      	ldr	r2, [pc, #280]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e2c:	4a41      	ldr	r2, [pc, #260]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e34:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a3f      	ldr	r2, [pc, #252]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9b      	lsrs	r3, r3, #18
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4a:	e002      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5e:	d102      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f2      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d158      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e057      	b.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7e:	4a2d      	ldr	r2, [pc, #180]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e88:	e04d      	b.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e90:	d141      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e92:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d131      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2232      	movs	r2, #50	; 0x32
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	0c9b      	lsrs	r3, r3, #18
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	e002      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d102      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f2      	bne.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d112      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e011      	b.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f14:	e007      	b.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40007000 	.word	0x40007000
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	431bde83 	.word	0x431bde83

08001f40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4e:	6093      	str	r3, [r2, #8]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40007000 	.word	0x40007000

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e308      	b.n	8002584 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d075      	beq.n	800206a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4ba3      	ldr	r3, [pc, #652]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4ba0      	ldr	r3, [pc, #640]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3e>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b99      	ldr	r3, [pc, #612]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <HAL_RCC_OscConfig+0x108>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2e3      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x74>
 8001fc6:	4b91      	ldr	r3, [pc, #580]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a90      	ldr	r2, [pc, #576]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8a      	ldr	r2, [pc, #552]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	4b84      	ldr	r3, [pc, #528]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a83      	ldr	r2, [pc, #524]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a80      	ldr	r2, [pc, #512]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f9fc 	bl	8001414 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff f9f8 	bl	8001414 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2a8      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xc0>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff f9e8 	bl	8001414 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff f9e4 	bl	8001414 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e294      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800205a:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0xe8>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d075      	beq.n	8002162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4b65      	ldr	r3, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d102      	bne.n	8002096 <HAL_RCC_OscConfig+0x136>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d002      	beq.n	800209c <HAL_RCC_OscConfig+0x13c>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d11f      	bne.n	80020dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800209c:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_OscConfig+0x154>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e267      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	4952      	ldr	r1, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020c8:	4b51      	ldr	r3, [pc, #324]	; (8002210 <HAL_RCC_OscConfig+0x2b0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f955 	bl	800137c <HAL_InitTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d043      	beq.n	8002160 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e253      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b49      	ldr	r3, [pc, #292]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f990 	bl	8001414 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff f98c 	bl	8001414 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e23c      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210a:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	4939      	ldr	r1, [pc, #228]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
 800212a:	e01a      	b.n	8002162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f96c 	bl	8001414 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff f968 	bl	8001414 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e218      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1e0>
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d03c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff f945 	bl	8001414 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7ff f941 	bl	8001414 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1f1      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ef      	beq.n	800218e <HAL_RCC_OscConfig+0x22e>
 80021ae:	e01b      	b.n	80021e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f928 	bl	8001414 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff f924 	bl	8001414 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1d4      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ef      	bne.n	80021c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80ab 	beq.w	800234c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x2b4>
 8002206:	2301      	movs	r3, #1
 8002208:	e005      	b.n	8002216 <HAL_RCC_OscConfig+0x2b6>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	20000008 	.word	0x20000008
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00d      	beq.n	8002236 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4baf      	ldr	r3, [pc, #700]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4aae      	ldr	r2, [pc, #696]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
 8002226:	4bac      	ldr	r3, [pc, #688]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002236:	4ba9      	ldr	r3, [pc, #676]	; (80024dc <HAL_RCC_OscConfig+0x57c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002242:	4ba6      	ldr	r3, [pc, #664]	; (80024dc <HAL_RCC_OscConfig+0x57c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4aa5      	ldr	r2, [pc, #660]	; (80024dc <HAL_RCC_OscConfig+0x57c>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7ff f8e1 	bl	8001414 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7ff f8dd 	bl	8001414 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e18d      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	4b9c      	ldr	r3, [pc, #624]	; (80024dc <HAL_RCC_OscConfig+0x57c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_RCC_OscConfig+0x32e>
 800227c:	4b96      	ldr	r3, [pc, #600]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228c:	e024      	b.n	80022d8 <HAL_RCC_OscConfig+0x378>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d110      	bne.n	80022b8 <HAL_RCC_OscConfig+0x358>
 8002296:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a6:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	4a8a      	ldr	r2, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x378>
 80022b8:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	4a86      	ldr	r2, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a82      	ldr	r2, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d016      	beq.n	800230e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7ff f898 	bl	8001414 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7ff f894 	bl	8001414 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e142      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ed      	beq.n	80022e8 <HAL_RCC_OscConfig+0x388>
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7ff f881 	bl	8001414 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff f87d 	bl	8001414 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e12b      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ed      	bne.n	8002316 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a64      	ldr	r2, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d03c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01c      	beq.n	800239a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002360:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff f850 	bl	8001414 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002378:	f7ff f84c 	bl	8001414 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0fc      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800238c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCC_OscConfig+0x418>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800239a:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a0:	4a4d      	ldr	r2, [pc, #308]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7ff f833 	bl	8001414 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b2:	f7ff f82f 	bl	8001414 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0df      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c4:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80023c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ef      	bne.n	80023b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80d3 	beq.w	8002582 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	f000 808d 	beq.w	8002504 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d15a      	bne.n	80024a8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff f809 	bl	8001414 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff f805 	bl	8001414 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0b5      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x580>)
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6a11      	ldr	r1, [r2, #32]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002434:	3a01      	subs	r2, #1
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	4311      	orrs	r1, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800243e:	0212      	lsls	r2, r2, #8
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002446:	0852      	lsrs	r2, r2, #1
 8002448:	3a01      	subs	r2, #1
 800244a:	0552      	lsls	r2, r2, #21
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0652      	lsls	r2, r2, #25
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800245e:	06d2      	lsls	r2, r2, #27
 8002460:	430a      	orrs	r2, r1
 8002462:	491d      	ldr	r1, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002464:	4313      	orrs	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe ffc8 	bl	8001414 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe ffc4 	bl	8001414 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e074      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x528>
 80024a6:	e06c      	b.n	8002582 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe ffa0 	bl	8001414 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d6:	e00e      	b.n	80024f6 <HAL_RCC_OscConfig+0x596>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe ff96 	bl	8001414 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e046      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_RCC_OscConfig+0x62c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x584>
 8002502:	e03e      	b.n	8002582 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e039      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x62c>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d12c      	bne.n	800257e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d123      	bne.n	800257e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d11b      	bne.n	800257e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d113      	bne.n	800257e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d109      	bne.n	800257e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e11e      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b91      	ldr	r3, [pc, #580]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	498c      	ldr	r1, [pc, #560]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b8a      	ldr	r3, [pc, #552]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e106      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d073      	beq.n	80026cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d129      	bne.n	8002640 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ec:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0f4      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025fc:	f000 f99e 	bl	800293c <RCC_GetSysClockFreqFromPLLSource>
 8002600:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4a7c      	ldr	r2, [pc, #496]	; (80027f8 <HAL_RCC_ClockConfig+0x268>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d93f      	bls.n	800268a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800260a:	4b7a      	ldr	r3, [pc, #488]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800261e:	2b00      	cmp	r3, #0
 8002620:	d033      	beq.n	800268a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d12f      	bne.n	800268a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800262a:	4b72      	ldr	r3, [pc, #456]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002632:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002638:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e024      	b.n	800268a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0c6      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0be      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002668:	f000 f8ce 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800266c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a61      	ldr	r2, [pc, #388]	; (80027f8 <HAL_RCC_ClockConfig+0x268>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d909      	bls.n	800268a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267e:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4957      	ldr	r1, [pc, #348]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe feba 	bl	8001414 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fe feb6 	bl	8001414 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e095      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4936      	ldr	r1, [pc, #216]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
 800271e:	e008      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	d105      	bne.n	8002732 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a32      	ldr	r2, [pc, #200]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800272c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002730:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d21d      	bcs.n	800277c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 020f 	bic.w	r2, r3, #15
 8002748:	4929      	ldr	r1, [pc, #164]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002750:	f7fe fe60 	bl	8001414 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe fe5c 	bl	8001414 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e03b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d1ed      	bne.n	8002758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4917      	ldr	r1, [pc, #92]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490f      	ldr	r1, [pc, #60]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ba:	f000 f825 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027be:	4601      	mov	r1, r0
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_RCC_ClockConfig+0x26c>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	fa21 f303 	lsr.w	r3, r1, r3
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x270>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fdcc 	bl	800137c <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	04c4b400 	.word	0x04c4b400
 80027fc:	08003a34 	.word	0x08003a34
 8002800:	20000004 	.word	0x20000004
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d102      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	e047      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d102      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e03e      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d136      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3301      	adds	r3, #1
 8002854:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002866:	68d2      	ldr	r2, [r2, #12]
 8002868:	0a12      	lsrs	r2, r2, #8
 800286a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
      break;
 8002874:	e00c      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	0a12      	lsrs	r2, r2, #8
 8002884:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
      break;
 800288e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0e5b      	lsrs	r3, r3, #25
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e001      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b0:	693b      	ldr	r3, [r7, #16]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	016e3600 	.word	0x016e3600

080028cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e8:	f7ff fff0 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028ec:	4601      	mov	r1, r0
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	08003a44 	.word	0x08003a44

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002914:	f7ff ffda 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	08003a44 	.word	0x08003a44

0800293c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d10c      	bne.n	800297a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800296a:	68d2      	ldr	r2, [r2, #12]
 800296c:	0a12      	lsrs	r2, r2, #8
 800296e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
    break;
 8002978:	e00c      	b.n	8002994 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	0a12      	lsrs	r2, r2, #8
 8002988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
    break;
 8002992:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0e5b      	lsrs	r3, r3, #25
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ae:	687b      	ldr	r3, [r7, #4]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40021000 	.word	0x40021000
 80029c0:	016e3600 	.word	0x016e3600
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8098 	beq.w	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a39      	ldr	r2, [pc, #228]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fcf9 	bl	8001414 <HAL_GetTick>
 8002a22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a24:	e009      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe fcf5 	bl	8001414 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d902      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	74fb      	strb	r3, [r7, #19]
        break;
 8002a38:	e005      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ef      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d159      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d019      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fcb5 	bl	8001414 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aac:	e00b      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fcb1 	bl	8001414 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d902      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac4:	e006      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ec      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10b      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002af0:	e008      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	74bb      	strb	r3, [r7, #18]
 8002af6:	e005      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b04:	7c7b      	ldrb	r3, [r7, #17]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4baf      	ldr	r3, [pc, #700]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4aae      	ldr	r2, [pc, #696]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b22:	4ba9      	ldr	r3, [pc, #676]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 0203 	bic.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	49a5      	ldr	r1, [pc, #660]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b44:	4ba0      	ldr	r3, [pc, #640]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 020c 	bic.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	499d      	ldr	r1, [pc, #628]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b66:	4b98      	ldr	r3, [pc, #608]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4994      	ldr	r1, [pc, #592]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	498c      	ldr	r1, [pc, #560]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002baa:	4b87      	ldr	r3, [pc, #540]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	4983      	ldr	r1, [pc, #524]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	497b      	ldr	r1, [pc, #492]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4972      	ldr	r1, [pc, #456]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	496a      	ldr	r1, [pc, #424]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	4961      	ldr	r1, [pc, #388]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c54:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	4959      	ldr	r1, [pc, #356]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4950      	ldr	r1, [pc, #320]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c98:	4b4b      	ldr	r3, [pc, #300]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4948      	ldr	r1, [pc, #288]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	493a      	ldr	r1, [pc, #232]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	492c      	ldr	r1, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4910      	ldr	r1, [pc, #64]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d96:	d105      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4902      	ldr	r1, [pc, #8]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dc6:	e001      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002dc8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	4917      	ldr	r1, [pc, #92]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e34:	4909      	ldr	r1, [pc, #36]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e44:	d105      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e50:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e042      	b.n	8002ef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fe f9ad 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	; 0x24
 8002e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f82c 	bl	8002f00 <UART_SetConfig>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e022      	b.n	8002ef8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 faf2 	bl	80034a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fb79 	bl	80035e8 <UART_CheckIdleState>
 8002ef6:	4603      	mov	r3, r0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002f04:	b088      	sub	sp, #32
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4bb1      	ldr	r3, [pc, #708]	; (80031fc <UART_SetConfig+0x2fc>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aa6      	ldr	r2, [pc, #664]	; (8003200 <UART_SetConfig+0x300>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	69f9      	ldr	r1, [r7, #28]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f023 010f 	bic.w	r1, r3, #15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a97      	ldr	r2, [pc, #604]	; (8003204 <UART_SetConfig+0x304>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d121      	bne.n	8002ff0 <UART_SetConfig+0xf0>
 8002fac:	4b96      	ldr	r3, [pc, #600]	; (8003208 <UART_SetConfig+0x308>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d816      	bhi.n	8002fe8 <UART_SetConfig+0xe8>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0xc0>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fdd 	.word	0x08002fdd
 8002fc8:	08002fd7 	.word	0x08002fd7
 8002fcc:	08002fe3 	.word	0x08002fe3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	76fb      	strb	r3, [r7, #27]
 8002fd4:	e0e8      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	76fb      	strb	r3, [r7, #27]
 8002fda:	e0e5      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	76fb      	strb	r3, [r7, #27]
 8002fe0:	e0e2      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	76fb      	strb	r3, [r7, #27]
 8002fe6:	e0df      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	76fb      	strb	r3, [r7, #27]
 8002fec:	bf00      	nop
 8002fee:	e0db      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a85      	ldr	r2, [pc, #532]	; (800320c <UART_SetConfig+0x30c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d134      	bne.n	8003064 <UART_SetConfig+0x164>
 8002ffa:	4b83      	ldr	r3, [pc, #524]	; (8003208 <UART_SetConfig+0x308>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d829      	bhi.n	800305c <UART_SetConfig+0x15c>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <UART_SetConfig+0x110>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003045 	.word	0x08003045
 8003014:	0800305d 	.word	0x0800305d
 8003018:	0800305d 	.word	0x0800305d
 800301c:	0800305d 	.word	0x0800305d
 8003020:	08003051 	.word	0x08003051
 8003024:	0800305d 	.word	0x0800305d
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800305d 	.word	0x0800305d
 8003030:	0800304b 	.word	0x0800304b
 8003034:	0800305d 	.word	0x0800305d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800305d 	.word	0x0800305d
 8003040:	08003057 	.word	0x08003057
 8003044:	2300      	movs	r3, #0
 8003046:	76fb      	strb	r3, [r7, #27]
 8003048:	e0ae      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800304a:	2302      	movs	r3, #2
 800304c:	76fb      	strb	r3, [r7, #27]
 800304e:	e0ab      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003050:	2304      	movs	r3, #4
 8003052:	76fb      	strb	r3, [r7, #27]
 8003054:	e0a8      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003056:	2308      	movs	r3, #8
 8003058:	76fb      	strb	r3, [r7, #27]
 800305a:	e0a5      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800305c:	2310      	movs	r3, #16
 800305e:	76fb      	strb	r3, [r7, #27]
 8003060:	bf00      	nop
 8003062:	e0a1      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a69      	ldr	r2, [pc, #420]	; (8003210 <UART_SetConfig+0x310>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d120      	bne.n	80030b0 <UART_SetConfig+0x1b0>
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <UART_SetConfig+0x308>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003078:	2b10      	cmp	r3, #16
 800307a:	d00f      	beq.n	800309c <UART_SetConfig+0x19c>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d802      	bhi.n	8003086 <UART_SetConfig+0x186>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0x190>
 8003084:	e010      	b.n	80030a8 <UART_SetConfig+0x1a8>
 8003086:	2b20      	cmp	r3, #32
 8003088:	d005      	beq.n	8003096 <UART_SetConfig+0x196>
 800308a:	2b30      	cmp	r3, #48	; 0x30
 800308c:	d009      	beq.n	80030a2 <UART_SetConfig+0x1a2>
 800308e:	e00b      	b.n	80030a8 <UART_SetConfig+0x1a8>
 8003090:	2300      	movs	r3, #0
 8003092:	76fb      	strb	r3, [r7, #27]
 8003094:	e088      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003096:	2302      	movs	r3, #2
 8003098:	76fb      	strb	r3, [r7, #27]
 800309a:	e085      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800309c:	2304      	movs	r3, #4
 800309e:	76fb      	strb	r3, [r7, #27]
 80030a0:	e082      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030a2:	2308      	movs	r3, #8
 80030a4:	76fb      	strb	r3, [r7, #27]
 80030a6:	e07f      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030a8:	2310      	movs	r3, #16
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	bf00      	nop
 80030ae:	e07b      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a57      	ldr	r2, [pc, #348]	; (8003214 <UART_SetConfig+0x314>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d120      	bne.n	80030fc <UART_SetConfig+0x1fc>
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <UART_SetConfig+0x308>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d00f      	beq.n	80030e8 <UART_SetConfig+0x1e8>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d802      	bhi.n	80030d2 <UART_SetConfig+0x1d2>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <UART_SetConfig+0x1dc>
 80030d0:	e010      	b.n	80030f4 <UART_SetConfig+0x1f4>
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d005      	beq.n	80030e2 <UART_SetConfig+0x1e2>
 80030d6:	2bc0      	cmp	r3, #192	; 0xc0
 80030d8:	d009      	beq.n	80030ee <UART_SetConfig+0x1ee>
 80030da:	e00b      	b.n	80030f4 <UART_SetConfig+0x1f4>
 80030dc:	2300      	movs	r3, #0
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e062      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030e2:	2302      	movs	r3, #2
 80030e4:	76fb      	strb	r3, [r7, #27]
 80030e6:	e05f      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030e8:	2304      	movs	r3, #4
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e05c      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030ee:	2308      	movs	r3, #8
 80030f0:	76fb      	strb	r3, [r7, #27]
 80030f2:	e059      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030f4:	2310      	movs	r3, #16
 80030f6:	76fb      	strb	r3, [r7, #27]
 80030f8:	bf00      	nop
 80030fa:	e055      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a45      	ldr	r2, [pc, #276]	; (8003218 <UART_SetConfig+0x318>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d124      	bne.n	8003150 <UART_SetConfig+0x250>
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <UART_SetConfig+0x308>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003114:	d012      	beq.n	800313c <UART_SetConfig+0x23c>
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d802      	bhi.n	8003122 <UART_SetConfig+0x222>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <UART_SetConfig+0x230>
 8003120:	e012      	b.n	8003148 <UART_SetConfig+0x248>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	d006      	beq.n	8003136 <UART_SetConfig+0x236>
 8003128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312c:	d009      	beq.n	8003142 <UART_SetConfig+0x242>
 800312e:	e00b      	b.n	8003148 <UART_SetConfig+0x248>
 8003130:	2300      	movs	r3, #0
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e038      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003136:	2302      	movs	r3, #2
 8003138:	76fb      	strb	r3, [r7, #27]
 800313a:	e035      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800313c:	2304      	movs	r3, #4
 800313e:	76fb      	strb	r3, [r7, #27]
 8003140:	e032      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003142:	2308      	movs	r3, #8
 8003144:	76fb      	strb	r3, [r7, #27]
 8003146:	e02f      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003148:	2310      	movs	r3, #16
 800314a:	76fb      	strb	r3, [r7, #27]
 800314c:	bf00      	nop
 800314e:	e02b      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <UART_SetConfig+0x300>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d124      	bne.n	80031a4 <UART_SetConfig+0x2a4>
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <UART_SetConfig+0x308>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d012      	beq.n	8003190 <UART_SetConfig+0x290>
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	d802      	bhi.n	8003176 <UART_SetConfig+0x276>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <UART_SetConfig+0x284>
 8003174:	e012      	b.n	800319c <UART_SetConfig+0x29c>
 8003176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317a:	d006      	beq.n	800318a <UART_SetConfig+0x28a>
 800317c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003180:	d009      	beq.n	8003196 <UART_SetConfig+0x296>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x29c>
 8003184:	2300      	movs	r3, #0
 8003186:	76fb      	strb	r3, [r7, #27]
 8003188:	e00e      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800318a:	2302      	movs	r3, #2
 800318c:	76fb      	strb	r3, [r7, #27]
 800318e:	e00b      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003190:	2304      	movs	r3, #4
 8003192:	76fb      	strb	r3, [r7, #27]
 8003194:	e008      	b.n	80031a8 <UART_SetConfig+0x2a8>
 8003196:	2308      	movs	r3, #8
 8003198:	76fb      	strb	r3, [r7, #27]
 800319a:	e005      	b.n	80031a8 <UART_SetConfig+0x2a8>
 800319c:	2310      	movs	r3, #16
 800319e:	76fb      	strb	r3, [r7, #27]
 80031a0:	bf00      	nop
 80031a2:	e001      	b.n	80031a8 <UART_SetConfig+0x2a8>
 80031a4:	2310      	movs	r3, #16
 80031a6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <UART_SetConfig+0x300>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	f040 80a1 	bne.w	80032f6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b4:	7efb      	ldrb	r3, [r7, #27]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d836      	bhi.n	8003228 <UART_SetConfig+0x328>
 80031ba:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <UART_SetConfig+0x2c0>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	08003229 	.word	0x08003229
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	08003229 	.word	0x08003229
 80031d0:	080031f3 	.word	0x080031f3
 80031d4:	08003229 	.word	0x08003229
 80031d8:	08003229 	.word	0x08003229
 80031dc:	08003229 	.word	0x08003229
 80031e0:	08003221 	.word	0x08003221
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7ff fb7e 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 80031e8:	6178      	str	r0, [r7, #20]
        break;
 80031ea:	e022      	b.n	8003232 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <UART_SetConfig+0x31c>)
 80031ee:	617b      	str	r3, [r7, #20]
        break;
 80031f0:	e01f      	b.n	8003232 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7ff fb09 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80031f6:	6178      	str	r0, [r7, #20]
        break;
 80031f8:	e01b      	b.n	8003232 <UART_SetConfig+0x332>
 80031fa:	bf00      	nop
 80031fc:	cfff69f3 	.word	0xcfff69f3
 8003200:	40008000 	.word	0x40008000
 8003204:	40013800 	.word	0x40013800
 8003208:	40021000 	.word	0x40021000
 800320c:	40004400 	.word	0x40004400
 8003210:	40004800 	.word	0x40004800
 8003214:	40004c00 	.word	0x40004c00
 8003218:	40005000 	.word	0x40005000
 800321c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003224:	617b      	str	r3, [r7, #20]
        break;
 8003226:	e004      	b.n	8003232 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	76bb      	strb	r3, [r7, #26]
        break;
 8003230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 811d 	beq.w	8003474 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	4a97      	ldr	r2, [pc, #604]	; (800349c <UART_SetConfig+0x59c>)
 8003240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003244:	461a      	mov	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	fbb3 f3f2 	udiv	r3, r3, r2
 800324c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d305      	bcc.n	800326a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d902      	bls.n	8003270 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	76bb      	strb	r3, [r7, #26]
 800326e:	e101      	b.n	8003474 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	4618      	mov	r0, r3
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	4a87      	ldr	r2, [pc, #540]	; (800349c <UART_SetConfig+0x59c>)
 800327e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f04f 0400 	mov.w	r4, #0
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	f7fd fbb2 	bl	80009f4 <__aeabi_uldivmod>
 8003290:	4603      	mov	r3, r0
 8003292:	460c      	mov	r4, r1
 8003294:	4619      	mov	r1, r3
 8003296:	4622      	mov	r2, r4
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	0214      	lsls	r4, r2, #8
 80032a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80032a6:	020b      	lsls	r3, r1, #8
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	4611      	mov	r1, r2
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	eb13 0b01 	adds.w	fp, r3, r1
 80032b8:	eb44 0c02 	adc.w	ip, r4, r2
 80032bc:	4658      	mov	r0, fp
 80032be:	4661      	mov	r1, ip
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	f7fd fb92 	bl	80009f4 <__aeabi_uldivmod>
 80032d0:	4603      	mov	r3, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032dc:	d308      	bcc.n	80032f0 <UART_SetConfig+0x3f0>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e4:	d204      	bcs.n	80032f0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e0c1      	b.n	8003474 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	76bb      	strb	r3, [r7, #26]
 80032f4:	e0be      	b.n	8003474 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fe:	d164      	bne.n	80033ca <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003300:	7efb      	ldrb	r3, [r7, #27]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d827      	bhi.n	8003356 <UART_SetConfig+0x456>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x40c>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff fad8 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003334:	6178      	str	r0, [r7, #20]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff faea 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 800333c:	6178      	str	r0, [r7, #20]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <UART_SetConfig+0x5a0>)
 8003342:	617b      	str	r3, [r7, #20]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7ff fa5f 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800334a:	6178      	str	r0, [r7, #20]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	617b      	str	r3, [r7, #20]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	76bb      	strb	r3, [r7, #26]
        break;
 800335e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8086 	beq.w	8003474 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	4a4b      	ldr	r2, [pc, #300]	; (800349c <UART_SetConfig+0x59c>)
 800336e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003372:	461a      	mov	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fbb3 f3f2 	udiv	r3, r3, r2
 800337a:	005a      	lsls	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	b29b      	uxth	r3, r3
 800338e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	d916      	bls.n	80033c4 <UART_SetConfig+0x4c4>
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d212      	bcs.n	80033c4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f023 030f 	bic.w	r3, r3, #15
 80033a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	89fb      	ldrh	r3, [r7, #14]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	89fa      	ldrh	r2, [r7, #14]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e057      	b.n	8003474 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	76bb      	strb	r3, [r7, #26]
 80033c8:	e054      	b.n	8003474 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ca:	7efb      	ldrb	r3, [r7, #27]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d828      	bhi.n	8003422 <UART_SetConfig+0x522>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0x4d8>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	08003405 	.word	0x08003405
 80033e0:	0800340d 	.word	0x0800340d
 80033e4:	08003423 	.word	0x08003423
 80033e8:	08003413 	.word	0x08003413
 80033ec:	08003423 	.word	0x08003423
 80033f0:	08003423 	.word	0x08003423
 80033f4:	08003423 	.word	0x08003423
 80033f8:	0800341b 	.word	0x0800341b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7ff fa72 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003400:	6178      	str	r0, [r7, #20]
        break;
 8003402:	e013      	b.n	800342c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7ff fa84 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8003408:	6178      	str	r0, [r7, #20]
        break;
 800340a:	e00f      	b.n	800342c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <UART_SetConfig+0x5a0>)
 800340e:	617b      	str	r3, [r7, #20]
        break;
 8003410:	e00c      	b.n	800342c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003412:	f7ff f9f9 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003416:	6178      	str	r0, [r7, #20]
        break;
 8003418:	e008      	b.n	800342c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	617b      	str	r3, [r7, #20]
        break;
 8003420:	e004      	b.n	800342c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	76bb      	strb	r3, [r7, #26]
        break;
 800342a:	bf00      	nop
    }

    if (pclk != 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <UART_SetConfig+0x59c>)
 8003438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343c:	461a      	mov	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fbb3 f2f2 	udiv	r2, r3, r2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	b29b      	uxth	r3, r3
 8003456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d908      	bls.n	8003470 <UART_SetConfig+0x570>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d204      	bcs.n	8003470 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003490:	7ebb      	ldrb	r3, [r7, #26]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800349c:	08003a4c 	.word	0x08003a4c
 80034a0:	00f42400 	.word	0x00f42400

080034a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01a      	beq.n	80035ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a2:	d10a      	bne.n	80035ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035f8:	f7fd ff0c 	bl	8001414 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d10e      	bne.n	800362a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f82c 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e022      	b.n	8003670 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d10e      	bne.n	8003656 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f816 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e00c      	b.n	8003670 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	e062      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003690:	d05e      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fd febf 	bl	8001414 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11d      	bne.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e045      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02e      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003700:	d126      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e00f      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	429a      	cmp	r2, r3
 800376c:	d08d      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_UARTEx_DisableFifoMode+0x16>
 800378a:	2302      	movs	r3, #2
 800378c:	e027      	b.n	80037de <HAL_UARTEx_DisableFifoMode+0x66>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037fe:	2302      	movs	r3, #2
 8003800:	e02d      	b.n	800385e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2224      	movs	r2, #36	; 0x24
 800380e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f850 	bl	80038e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800387a:	2302      	movs	r3, #2
 800387c:	e02d      	b.n	80038da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f812 	bl	80038e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80038ec:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <UARTEx_SetNbDataToProcess+0xc8>)
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038f6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80038fa:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <UARTEx_SetNbDataToProcess+0xcc>)
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003904:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003920:	e03d      	b.n	800399e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003922:	2308      	movs	r3, #8
 8003924:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003926:	2308      	movs	r3, #8
 8003928:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	0e5b      	lsrs	r3, r3, #25
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	0f5b      	lsrs	r3, r3, #29
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800394a:	7fbb      	ldrb	r3, [r7, #30]
 800394c:	7f3a      	ldrb	r2, [r7, #28]
 800394e:	f107 0120 	add.w	r1, r7, #32
 8003952:	440a      	add	r2, r1
 8003954:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800395c:	7f3a      	ldrb	r2, [r7, #28]
 800395e:	f107 0120 	add.w	r1, r7, #32
 8003962:	440a      	add	r2, r1
 8003964:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003968:	fb93 f3f2 	sdiv	r3, r3, r2
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	7f7a      	ldrb	r2, [r7, #29]
 8003978:	f107 0120 	add.w	r1, r7, #32
 800397c:	440a      	add	r2, r1
 800397e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003986:	7f7a      	ldrb	r2, [r7, #29]
 8003988:	f107 0120 	add.w	r1, r7, #32
 800398c:	440a      	add	r2, r1
 800398e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003992:	fb93 f3f2 	sdiv	r3, r3, r2
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800399e:	bf00      	nop
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	08003a24 	.word	0x08003a24
 80039b0:	08003a2c 	.word	0x08003a2c

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	4e0d      	ldr	r6, [pc, #52]	; (80039ec <__libc_init_array+0x38>)
 80039b8:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <__libc_init_array+0x3c>)
 80039ba:	1ba4      	subs	r4, r4, r6
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	2500      	movs	r5, #0
 80039c0:	42a5      	cmp	r5, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	4e0b      	ldr	r6, [pc, #44]	; (80039f4 <__libc_init_array+0x40>)
 80039c6:	4c0c      	ldr	r4, [pc, #48]	; (80039f8 <__libc_init_array+0x44>)
 80039c8:	f000 f820 	bl	8003a0c <_init>
 80039cc:	1ba4      	subs	r4, r4, r6
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	2500      	movs	r5, #0
 80039d2:	42a5      	cmp	r5, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039dc:	4798      	blx	r3
 80039de:	3501      	adds	r5, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039e6:	4798      	blx	r3
 80039e8:	3501      	adds	r5, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08003a6c 	.word	0x08003a6c
 80039f0:	08003a6c 	.word	0x08003a6c
 80039f4:	08003a6c 	.word	0x08003a6c
 80039f8:	08003a70 	.word	0x08003a70

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <_init>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr

08003a18 <_fini>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr
