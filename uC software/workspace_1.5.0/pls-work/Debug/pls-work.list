
pls-work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08003598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003598  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012121  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a9  00000000  00000000  0003215d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00034408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  000355b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025608  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df47  00000000  00000000  0005bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f49b7  00000000  00000000  00069b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  0015e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800355c 	.word	0x0800355c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800355c 	.word	0x0800355c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc1d 	bl	8000a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82c 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e0 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f9b4 	bl	8000594 <MX_DMA_Init>
  MX_DAC1_Init();
 800022c:	f000 f88e 	bl	800034c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000230:	f000 f97a 	bl	8000528 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000234:	f000 f92a 	bl	800048c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000238:	f000 f8e8 	bl	800040c <MX_I2C1_Init>
  /* Configure User push-button in Interrupt mode */
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);

  /*## Start Time Base triggers ############################################*/
  /* Enable TIM peripheral counter */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <main+0x58>)
 800023e:	f002 fe27 	bl	8002e90 <HAL_TIM_Base_Start>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <main+0x34>
  {
    /* Counter enable error */
    Error_Handler();
 8000248:	f000 fa5e 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 800024c:	4809      	ldr	r0, [pc, #36]	; (8000274 <main+0x5c>)
 800024e:	f002 fe1f 	bl	8002e90 <HAL_TIM_Base_Start>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <main+0x44>
  {
    /* Counter enable error */
    Error_Handler();
 8000258:	f000 fa56 	bl	8000708 <Error_Handler>
  }

  /*## Start DAC conversions ###############################################*/
  /* Start DAC wave generation */
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 800025c:	2100      	movs	r1, #0
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x60>)
 8000260:	f000 fdbf 	bl	8000de2 <HAL_DAC_Start>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <main+0x56>
  {
    /* DAC conversion start error */
    Error_Handler();
 800026a:	f000 fa4d 	bl	8000708 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x56>
 8000270:	20000168 	.word	0x20000168
 8000274:	2000011c 	.word	0x2000011c
 8000278:	2000005c 	.word	0x2000005c

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b0a8      	sub	sp, #160	; 0xa0
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000286:	2238      	movs	r2, #56	; 0x38
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 f95e 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2254      	movs	r2, #84	; 0x54
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 f950 	bl	800354c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ac:	2000      	movs	r0, #0
 80002ae:	f001 fd8f 	bl	8001dd0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	2302      	movs	r3, #2
 80002b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	2340      	movs	r3, #64	; 0x40
 80002be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002cc:	2304      	movs	r3, #4
 80002ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002d2:	2355      	movs	r3, #85	; 0x55
 80002d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fe22 	bl	8001f38 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 fa05 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2303      	movs	r3, #3
 8000304:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000316:	2104      	movs	r1, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f925 	bl	8002568 <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000324:	f000 f9f0 	bl	8000708 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000328:	2340      	movs	r3, #64	; 0x40
 800032a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fb08 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800033e:	f000 f9e3 	bl	8000708 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	37a0      	adds	r7, #160	; 0xa0
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800034c:	b5b0      	push	{r4, r5, r7, lr}
 800034e:	b08e      	sub	sp, #56	; 0x38
 8000350:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000352:	463b      	mov	r3, r7
 8000354:	2230      	movs	r2, #48	; 0x30
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f8f7 	bl	800354c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <MX_DAC1_Init+0xb4>)
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <MX_DAC1_Init+0xb8>)
 8000362:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000364:	4826      	ldr	r0, [pc, #152]	; (8000400 <MX_DAC1_Init+0xb4>)
 8000366:	f000 fd1a 	bl	8000d9e <HAL_DAC_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000370:	f000 f9ca 	bl	8000708 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000374:	2302      	movs	r3, #2
 8000376:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000384:	2312      	movs	r3, #18
 8000386:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_T6_TRGO;
 8000388:	231e      	movs	r3, #30
 800038a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000390:	2301      	movs	r3, #1
 8000392:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <MX_DAC1_Init+0xb4>)
 80003a0:	f000 fd72 	bl	8000e88 <HAL_DAC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80003aa:	f000 f9ad 	bl	8000708 <Error_Handler>
  }
  /** Configure Sawtooth wave generation on DAC OUT1
  */
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0) != HAL_OK)
 80003ae:	2300      	movs	r3, #0
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2300      	movs	r3, #0
 80003b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003b8:	2100      	movs	r1, #0
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <MX_DAC1_Init+0xb4>)
 80003bc:	f000 ff10 	bl	80011e0 <HAL_DACEx_SawtoothWaveGenerate>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80003c6:	f000 f99f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	4619      	mov	r1, r3
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <MX_DAC1_Init+0xb4>)
 80003d2:	f000 ff54 	bl	800127e <HAL_DACEx_SelfCalibrate>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_DAC1_Init+0x94>
  {
    Error_Handler();
 80003dc:	f000 f994 	bl	8000708 <Error_Handler>
  }
  /* Save DAC configuration to reconfigure it upon needs later */
  sDacConfig = sConfig;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_DAC1_Init+0xbc>)
 80003e2:	461d      	mov	r5, r3
 80003e4:	463c      	mov	r4, r7
 80003e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  /* USER CODE END DAC1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	3730      	adds	r7, #48	; 0x30
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bdb0      	pop	{r4, r5, r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000005c 	.word	0x2000005c
 8000404:	50000800 	.word	0x50000800
 8000408:	2000002c 	.word	0x2000002c

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C1_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C1_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C1_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <MX_I2C1_Init+0x74>)
 8000448:	f001 fb9c 	bl	8001b84 <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f959 	bl	8000708 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_I2C1_Init+0x74>)
 800045a:	f001 fc22 	bl	8001ca2 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f950 	bl	8000708 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_I2C1_Init+0x74>)
 800046c:	f001 fc64 	bl	8001d38 <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f947 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000070 	.word	0x20000070
 8000484:	40005400 	.word	0x40005400
 8000488:	30a0a7fb 	.word	0x30a0a7fb

0800048c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_TIM2_Init+0x98>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1049;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <MX_TIM2_Init+0x98>)
 80004b4:	f240 4219 	movw	r2, #1049	; 0x419
 80004b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_TIM2_Init+0x98>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_TIM2_Init+0x98>)
 80004c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_TIM2_Init+0x98>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_TIM2_Init+0x98>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_TIM2_Init+0x98>)
 80004d6:	f002 fc83 	bl	8002de0 <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004e0:	f000 f912 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <MX_TIM2_Init+0x98>)
 80004f2:	f002 fd3d 	bl	8002f70 <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004fc:	f000 f904 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_TIM2_Init+0x98>)
 800050e:	f002 ff63 	bl	80033d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000518:	f000 f8f6 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000168 	.word	0x20000168

08000528 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_TIM6_Init+0x64>)
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <MX_TIM6_Init+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_TIM6_Init+0x64>)
 8000540:	220a      	movs	r2, #10
 8000542:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_TIM6_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_TIM6_Init+0x64>)
 800054c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000550:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_TIM6_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <MX_TIM6_Init+0x64>)
 800055a:	f002 fc41 	bl	8002de0 <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000564:	f000 f8d0 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_TIM6_Init+0x64>)
 8000576:	f002 ff2f 	bl	80033d8 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000580:	f000 f8c2 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000011c 	.word	0x2000011c
 8000590:	40001000 	.word	0x40001000

08000594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_DMA_Init+0x50>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <MX_DMA_Init+0x50>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6493      	str	r3, [r2, #72]	; 0x48
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_DMA_Init+0x50>)
 80005a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_DMA_Init+0x50>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_DMA_Init+0x50>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6493      	str	r3, [r2, #72]	; 0x48
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x50>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200b      	movs	r0, #11
 80005d0:	f000 fbb1 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d4:	200b      	movs	r0, #11
 80005d6:	f000 fbc8 	bl	8000d6a <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a36      	ldr	r2, [pc, #216]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_GPIO_Init+0xf4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a30      	ldr	r2, [pc, #192]	; (80006dc <MX_GPIO_Init+0xf4>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_GPIO_Init+0xf4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <MX_GPIO_Init+0xf4>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_GPIO_Init+0xf4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f001 fa5d 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_GPIO_Init+0xf8>)
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4819      	ldr	r0, [pc, #100]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000680:	f001 f8ce 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000684:	230c      	movs	r3, #12
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000694:	230c      	movs	r3, #12
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f001 f8bd 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f001 f8ae 	bl	8001820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f000 fb34 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ce:	2028      	movs	r0, #40	; 0x28
 80006d0:	f000 fb4b 	bl	8000d6a <HAL_NVIC_EnableIRQ>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	10110000 	.word	0x10110000
 80006e4:	48000800 	.word	0x48000800

080006e8 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
  /* Change the wave */
  ubKeyPressed = SET;
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	20000028 	.word	0x20000028

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED2 is slowly blinking (1 sec. period) */
  while(1)
  {
//    BSP_LED_Toggle(LED2);
    HAL_Delay(1000);
 800070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000710:	f000 fa14 	bl	8000b3c <HAL_Delay>
 8000714:	e7fa      	b.n	800070c <Error_Handler+0x4>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x44>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6613      	str	r3, [r2, #96]	; 0x60
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6593      	str	r3, [r2, #88]	; 0x58
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800074e:	f001 fbe3 	bl	8001f18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2b      	ldr	r2, [pc, #172]	; (800082c <HAL_DAC_MspInit+0xcc>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d14f      	bne.n	8000822 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 8000788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <HAL_DAC_MspInit+0xd0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f001 f82a 	bl	8001820 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <HAL_DAC_MspInit+0xd8>)
 80007d0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007d4:	2206      	movs	r2, #6
 80007d6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007da:	2210      	movs	r2, #16
 80007dc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 80007fc:	2220      	movs	r2, #32
 80007fe:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 8000808:	f000 fe50 	bl	80014ac <HAL_DMA_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000812:	f7ff ff79 	bl	8000708 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HAL_DAC_MspInit+0xd4>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	50000800 	.word	0x50000800
 8000830:	40021000 	.word	0x40021000
 8000834:	200000bc 	.word	0x200000bc
 8000838:	40020008 	.word	0x40020008

0800083c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d145      	bne.n	80008ea <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a0:	2304      	movs	r3, #4
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 ffb7 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b6:	2312      	movs	r3, #18
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c2:	2304      	movs	r3, #4
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_I2C_MspInit+0xc0>)
 80008ce:	f000 ffa7 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40005400 	.word	0x40005400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d10c      	bne.n	800092c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800092a:	e010      	b.n	800094e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_TIM_Base_MspInit+0x60>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10b      	bne.n	800094e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_TIM_Base_MspInit+0x5c>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	40001000 	.word	0x40001000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f8a6 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <DMA1_Channel1_IRQHandler+0x10>)
 80009be:	f000 fe1d 	bl	80015fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000bc 	.word	0x200000bc

080009cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d4:	f001 f8be 	bl	8001b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SystemInit+0x28>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <SystemInit+0x28>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SystemInit+0x28>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	609a      	str	r2, [r3, #8]
#endif
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
 8000a0a:	4685      	mov	sp, r0
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x6>)
 8000a0e:	490e      	ldr	r1, [pc, #56]	; (8000a48 <LoopForever+0xa>)
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <LoopForever+0xe>)
 8000a12:	2300      	movs	r3, #0
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:
 8000a16:	58d4      	ldr	r4, [r2, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:
 8000a1c:	18c4      	adds	r4, r0, r3
 8000a1e:	428c      	cmp	r4, r1
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <LoopForever+0x12>)
 8000a24:	4c0b      	ldr	r4, [pc, #44]	; (8000a54 <LoopForever+0x16>)
 8000a26:	2300      	movs	r3, #0
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:
 8000a2e:	42a2      	cmp	r2, r4
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>
 8000a32:	f7ff ffd3 	bl	80009dc <SystemInit>
 8000a36:	f002 fd65 	bl	8003504 <__libc_init_array>
 8000a3a:	f7ff fbed 	bl	8000218 <main>

08000a3e <LoopForever>:
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
 8000a40:	20020000 	.word	0x20020000
 8000a44:	20000000 	.word	0x20000000
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	0800358c 	.word	0x0800358c
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	200001b8 	.word	0x200001b8

08000a58 <ADC1_2_IRQHandler>:
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>

08000a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f95b 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f80e 	bl	8000a8c <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7c:	f7ff fe4c 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]

}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_InitTick+0x68>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d022      	beq.n	8000ae6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_InitTick+0x6c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_InitTick+0x68>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f966 	bl	8000d86 <HAL_SYSTICK_Config>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d809      	bhi.n	8000ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ace:	f000 f932 	bl	8000d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_InitTick+0x70>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e004      	b.n	8000aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b10:	6013      	str	r3, [r2, #0]
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	200001b4 	.word	0x200001b4
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200001b4 	.word	0x200001b4

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b54:	d004      	beq.n	8000b60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b60:	bf00      	nop
 8000b62:	f7ff ffdf 	bl	8000b24 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d8f7      	bhi.n	8000b62 <HAL_Delay+0x26>
  {
  }
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff40 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff90 	bl	8000c74 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5f 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff33 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa4 	bl	8000cdc <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e014      	b.n	8000dda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	791b      	ldrb	r3, [r3, #4]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fccd 	bl	8000760 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_DAC_Start+0x16>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e043      	b.n	8000e80 <HAL_DAC_Start+0x9e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2202      	movs	r2, #2
 8000e02:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2201      	movs	r2, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff fe8d 	bl	8000b3c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10f      	bne.n	8000e48 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d11d      	bne.n	8000e72 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0201 	orr.w	r2, r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	e014      	b.n	8000e72 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2102      	movs	r1, #2
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d107      	bne.n	8000e72 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0202 	orr.w	r2, r2, #2
 8000e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_DAC_ConfigChannel+0x1c>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e194      	b.n	80011ce <HAL_DAC_ConfigChannel+0x346>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2202      	movs	r2, #2
 8000eae:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d174      	bne.n	8000fa2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d137      	bne.n	8000f2e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fe31 	bl	8000b24 <HAL_GetTick>
 8000ec2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ec4:	e011      	b.n	8000eea <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ec6:	f7ff fe2d 	bl	8000b24 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d90a      	bls.n	8000eea <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	f043 0208 	orr.w	r2, r3, #8
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e171      	b.n	80011ce <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e6      	bne.n	8000ec6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff fe1f 	bl	8000b3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
 8000f08:	e01e      	b.n	8000f48 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f0a:	f7ff fe0b 	bl	8000b24 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d90a      	bls.n	8000f2e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	f043 0208 	orr.w	r2, r3, #8
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2203      	movs	r2, #3
 8000f28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e14f      	b.n	80011ce <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dbe8      	blt.n	8000f0a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fdff 	bl	8000b3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f46:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	ea02 0103 	and.w	r1, r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	ea02 0103 	and.w	r1, r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d11d      	bne.n	8000fe6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	221f      	movs	r2, #31
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffe:	4013      	ands	r3, r2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	e011      	b.n	8001038 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	e008      	b.n	8001038 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	e001      	b.n	8001038 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	6a3a      	ldr	r2, [r7, #32]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	4013      	ands	r3, r2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	791b      	ldrb	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d102      	bne.n	800106c <HAL_DAC_ConfigChannel+0x1e4>
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	e000      	b.n	800106e <HAL_DAC_ConfigChannel+0x1e6>
 800106c:	2300      	movs	r3, #0
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001086:	4013      	ands	r3, r2
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	795b      	ldrb	r3, [r3, #5]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <HAL_DAC_ConfigChannel+0x210>
 8001092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001096:	e000      	b.n	800109a <HAL_DAC_ConfigChannel+0x212>
 8001098:	2300      	movs	r3, #0
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d114      	bne.n	80010da <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80010b0:	f001 fbf8 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80010b4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4a47      	ldr	r2, [pc, #284]	; (80011d8 <HAL_DAC_ConfigChannel+0x350>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d904      	bls.n	80010c8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
 80010c6:	e00d      	b.n	80010e4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HAL_DAC_ConfigChannel+0x354>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d909      	bls.n	80010e4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
 80010d8:	e004      	b.n	80010e4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	4313      	orrs	r3, r2
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f2:	4313      	orrs	r3, r2
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001136:	4013      	ands	r3, r2
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114e:	4313      	orrs	r3, r2
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001158:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	22c0      	movs	r2, #192	; 0xc0
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43da      	mvns	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	400a      	ands	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	ea02 0103 	and.w	r1, r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	09896800 	.word	0x09896800
 80011dc:	04c4b400 	.word	0x04c4b400

080011e0 <HAL_DACEx_SawtoothWaveGenerate>:
  * @note    Sawtooth reset and step triggers are configured by calling @ref HAL_DAC_ConfigChannel
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SawtoothWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Polarity,
                                                 uint32_t ResetData, uint32_t StepData)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_SAWTOOTH_POLARITY(Polarity));
  assert_param(IS_DAC_RESET_DATA(ResetData));
  assert_param(IS_DAC_STEP_DATA(StepData));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_DACEx_SawtoothWaveGenerate+0x1a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e03b      	b.n	8001272 <HAL_DACEx_SawtoothWaveGenerate+0x92>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2202      	movs	r2, #2
 8001204:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10f      	bne.n	800122c <HAL_DACEx_SawtoothWaveGenerate+0x4c>
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR1,
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	431a      	orrs	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	659a      	str	r2, [r3, #88]	; 0x58
 800122a:	e00e      	b.n	800124a <HAL_DACEx_SawtoothWaveGenerate+0x6a>
               | (ResetData << DAC_STR1_STRSTDATA1_Pos));
  }
  else
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR2,
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	431a      	orrs	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	65da      	str	r2, [r3, #92]	; 0x5c
               | Polarity
               | (ResetData << DAC_STR2_STRSTDATA2_Pos));
  }

  /* Enable the sawtooth wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1) << (Channel & 0x10UL), (uint32_t)(DAC_CR_WAVE1_1 | DAC_CR_WAVE1_0) << (Channel & 0x10UL));
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	22c0      	movs	r2, #192	; 0xc0
 8001252:	fa02 f103 	lsl.w	r1, r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b08a      	sub	sp, #40	; 0x28
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800129c:	e100      	b.n	80014a0 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d103      	bne.n	80012b0 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ae:	e0f7      	b.n	80014a0 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	795b      	ldrb	r3, [r3, #5]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_DACEx_SelfCalibrate+0x3e>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0f3      	b.n	80014a4 <HAL_DACEx_SelfCalibrate+0x226>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2107      	movs	r1, #7
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2201      	movs	r2, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fc21 	bl	8000b3c <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_DACEx_SelfCalibrate+0xac>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3308      	adds	r3, #8
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e002      	b.n	8001330 <HAL_DACEx_SelfCalibrate+0xb2>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3314      	adds	r3, #20
 800132e:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	461a      	mov	r2, r3
 8001334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001338:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6819      	ldr	r1, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 8001354:	2310      	movs	r3, #16
 8001356:	623b      	str	r3, [r7, #32]
    delta = 8U;
 8001358:	2308      	movs	r3, #8
 800135a:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800135c:	e037      	b.n	80013ce <HAL_DACEx_SelfCalibrate+0x150>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	211f      	movs	r1, #31
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	ea02 0103 	and.w	r1, r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	409a      	lsls	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fbd7 	bl	8000b3c <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d104      	bne.n	80013c0 <HAL_DACEx_SelfCalibrate+0x142>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 80013b6:	6a3a      	ldr	r2, [r7, #32]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	e003      	b.n	80013c8 <HAL_DACEx_SelfCalibrate+0x14a>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1c4      	bne.n	800135e <HAL_DACEx_SelfCalibrate+0xe0>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	211f      	movs	r1, #31
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	ea02 0103 	and.w	r1, r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	6a3a      	ldr	r2, [r7, #32]
 80013f4:	409a      	lsls	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fb9c 	bl	8000b3c <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d117      	bne.n	800144e <HAL_DACEx_SelfCalibrate+0x1d0>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	3301      	adds	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	211f      	movs	r1, #31
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	ea02 0103 	and.w	r1, r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	6a3a      	ldr	r2, [r7, #32]
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	6a3a      	ldr	r2, [r7, #32]
 8001470:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2201      	movs	r2, #1
 8001476:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2107      	movs	r1, #7
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	ea02 0103 	and.w	r1, r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	430a      	orrs	r2, r1
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	715a      	strb	r2, [r3, #5]
  }

  return status;
 80014a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e08d      	b.n	80015da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_DMA_Init+0x138>)
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d80f      	bhi.n	80014ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_DMA_Init+0x13c>)
 80014d2:	4413      	add	r3, r2
 80014d4:	4a45      	ldr	r2, [pc, #276]	; (80015ec <HAL_DMA_Init+0x140>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	009a      	lsls	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <HAL_DMA_Init+0x144>)
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
 80014e8:	e00e      	b.n	8001508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_DMA_Init+0x148>)
 80014f2:	4413      	add	r3, r2
 80014f4:	4a3d      	ldr	r2, [pc, #244]	; (80015ec <HAL_DMA_Init+0x140>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <HAL_DMA_Init+0x14c>)
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800151e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8fe 	bl	800175c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001568:	d102      	bne.n	8001570 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001584:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d010      	beq.n	80015b0 <HAL_DMA_Init+0x104>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d80c      	bhi.n	80015b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f91e 	bl	80017d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e008      	b.n	80015c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40020407 	.word	0x40020407
 80015e8:	bffdfff8 	.word	0xbffdfff8
 80015ec:	cccccccd 	.word	0xcccccccd
 80015f0:	40020000 	.word	0x40020000
 80015f4:	bffdfbf8 	.word	0xbffdfbf8
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2204      	movs	r2, #4
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d026      	beq.n	8001676 <HAL_DMA_IRQHandler+0x7a>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d021      	beq.n	8001676 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2104      	movs	r1, #4
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	d071      	beq.n	8001750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001674:	e06c      	b.n	8001750 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2202      	movs	r2, #2
 8001680:	409a      	lsls	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d02e      	beq.n	80016e8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d029      	beq.n	80016e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10b      	bne.n	80016ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 020a 	bic.w	r2, r2, #10
 80016b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 021f 	and.w	r2, r3, #31
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2102      	movs	r1, #2
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d038      	beq.n	8001750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016e6:	e033      	b.n	8001750 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2208      	movs	r2, #8
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d02a      	beq.n	8001752 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d025      	beq.n	8001752 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020e 	bic.w	r2, r2, #14
 8001714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 021f 	and.w	r2, r3, #31
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001750:	bf00      	nop
 8001752:	bf00      	nop
}
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800176c:	429a      	cmp	r2, r3
 800176e:	d802      	bhi.n	8001776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e001      	b.n	800177a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001778:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3b08      	subs	r3, #8
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	009a      	lsls	r2, r3, #2
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2201      	movs	r2, #1
 80017b0:	409a      	lsls	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40020407 	.word	0x40020407
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020820 	.word	0x40020820
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	40020880 	.word	0x40020880

080017d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017fa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2201      	movs	r2, #1
 8001806:	409a      	lsls	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	1000823f 	.word	0x1000823f
 800181c:	40020940 	.word	0x40020940

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182e:	e15a      	b.n	8001ae6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 814c 	beq.w	8001ae0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d00b      	beq.n	8001868 <HAL_GPIO_Init+0x48>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185c:	2b11      	cmp	r3, #17
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d130      	bne.n	80018ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 0201 	and.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0xea>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b12      	cmp	r3, #18
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80a6 	beq.w	8001ae0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	4a5a      	ldr	r2, [pc, #360]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6613      	str	r3, [r2, #96]	; 0x60
 80019a0:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d6:	d01f      	beq.n	8001a18 <HAL_GPIO_Init+0x1f8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d019      	beq.n	8001a14 <HAL_GPIO_Init+0x1f4>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x1f0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1ec>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_GPIO_Init+0x2f8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1e8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_GPIO_Init+0x2fc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1e4>
 8001a00:	2305      	movs	r3, #5
 8001a02:	e00a      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a04:	2306      	movs	r3, #6
 8001a06:	e008      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e006      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e004      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_GPIO_Init+0x1fa>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a2a:	4937      	ldr	r1, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5c:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f ae9d 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000c00 	.word	0x48000c00
 8001b18:	48001000 	.word	0x48001000
 8001b1c:	48001400 	.word	0x48001400
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fdb8 	bl	80006e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e081      	b.n	8001c9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fe46 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e006      	b.n	8001c0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d104      	bne.n	8001c1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	ea42 0103 	orr.w	r1, r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	021a      	lsls	r2, r3, #8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69d9      	ldr	r1, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d138      	bne.n	8001d2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e032      	b.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2224      	movs	r2, #36	; 0x24
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d139      	bne.n	8001dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e033      	b.n	8001dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d141      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d131      	bne.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dec:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df2:	4a46      	ldr	r2, [pc, #280]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfc:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e04:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2232      	movs	r2, #50	; 0x32
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e22:	e002      	b.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	d102      	bne.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3e:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4a:	d158      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e057      	b.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e60:	e04d      	b.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e68:	d141      	bne.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6a:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e76:	d131      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2232      	movs	r2, #50	; 0x32
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eae:	e002      	b.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d102      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f2      	bne.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d112      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e011      	b.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001eec:	e007      	b.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	20000000 	.word	0x20000000
 8001f14:	431bde83 	.word	0x431bde83

08001f18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f26:	6093      	str	r3, [r2, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40007000 	.word	0x40007000

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e308      	b.n	800255c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4ba3      	ldr	r3, [pc, #652]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3e>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_OscConfig+0x44>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d05b      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2e3      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x74>
 8001f9e:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a90      	ldr	r2, [pc, #576]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a87      	ldr	r2, [pc, #540]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fd98 	bl	8000b24 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fd94 	bl	8000b24 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2a8      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fd84 	bl	8000b24 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fd80 	bl	8000b24 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e294      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x136>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x13c>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11f      	bne.n	80020b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x154>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e267      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4952      	ldr	r1, [pc, #328]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCC_OscConfig+0x2b0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fcf1 	bl	8000a8c <HAL_InitTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d043      	beq.n	8002138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e253      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd2c 	bl	8000b24 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd28 	bl	8000b24 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e23c      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4939      	ldr	r1, [pc, #228]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e01a      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002104:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fd08 	bl	8000b24 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe fd04 	bl	8000b24 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e218      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1e0>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01c      	beq.n	8002188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fce1 	bl	8000b24 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002166:	f7fe fcdd 	bl	8000b24 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1f1      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ef      	beq.n	8002166 <HAL_RCC_OscConfig+0x22e>
 8002186:	e01b      	b.n	80021c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fcc4 	bl	8000b24 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fcc0 	bl	8000b24 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1d4      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ef      	bne.n	80021a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80ab 	beq.w	8002324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x2b4>
 80021de:	2301      	movs	r3, #1
 80021e0:	e005      	b.n	80021ee <HAL_RCC_OscConfig+0x2b6>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	20000004 	.word	0x20000004
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4baf      	ldr	r3, [pc, #700]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4aae      	ldr	r2, [pc, #696]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
 80021fe:	4bac      	ldr	r3, [pc, #688]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220e:	4ba9      	ldr	r3, [pc, #676]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221a:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4aa5      	ldr	r2, [pc, #660]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fc7d 	bl	8000b24 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fc79 	bl	8000b24 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e18d      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b9c      	ldr	r3, [pc, #624]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_RCC_OscConfig+0x32e>
 8002254:	4b96      	ldr	r3, [pc, #600]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	4a95      	ldr	r2, [pc, #596]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002264:	e024      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d110      	bne.n	8002290 <HAL_RCC_OscConfig+0x358>
 800226e:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228e:	e00f      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002290:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a86      	ldr	r2, [pc, #536]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a82      	ldr	r2, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fc34 	bl	8000b24 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fc30 	bl	8000b24 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e142      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ed      	beq.n	80022c0 <HAL_RCC_OscConfig+0x388>
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fc1d 	bl	8000b24 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fc19 	bl	8000b24 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e12b      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ed      	bne.n	80022ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d03c      	beq.n	80023aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01c      	beq.n	8002372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800233a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233e:	4a5c      	ldr	r2, [pc, #368]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fbec 	bl	8000b24 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002350:	f7fe fbe8 	bl	8000b24 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0fc      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCC_OscConfig+0x418>
 8002370:	e01b      	b.n	80023aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002372:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fbcf 	bl	8000b24 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238a:	f7fe fbcb 	bl	8000b24 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0df      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ef      	bne.n	800238a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80d3 	beq.w	800255a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	f000 808d 	beq.w	80024dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d15a      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fba5 	bl	8000b24 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fba1 	bl	8000b24 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0b5      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x580>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a11      	ldr	r1, [r2, #32]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800240c:	3a01      	subs	r2, #1
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002416:	0212      	lsls	r2, r2, #8
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800241e:	0852      	lsrs	r2, r2, #1
 8002420:	3a01      	subs	r2, #1
 8002422:	0552      	lsls	r2, r2, #21
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242a:	0852      	lsrs	r2, r2, #1
 800242c:	3a01      	subs	r2, #1
 800242e:	0652      	lsls	r2, r2, #25
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fb64 	bl	8000b24 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fb60 	bl	8000b24 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e074      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x528>
 800247e:	e06c      	b.n	800255a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800249e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fb3c 	bl	8000b24 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ae:	e00e      	b.n	80024ce <HAL_RCC_OscConfig+0x596>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fb32 	bl	8000b24 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e046      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_OscConfig+0x62c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x584>
 80024da:	e03e      	b.n	800255a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e039      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x62c>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d12c      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d123      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11b      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d113      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e11e      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b91      	ldr	r3, [pc, #580]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 020f 	bic.w	r2, r3, #15
 8002596:	498c      	ldr	r1, [pc, #560]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b8a      	ldr	r3, [pc, #552]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e106      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d073      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d129      	bne.n	8002618 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0f4      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025d4:	f000 f972 	bl	80028bc <RCC_GetSysClockFreqFromPLLSource>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_RCC_ClockConfig+0x268>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d93f      	bls.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d033      	beq.n	8002662 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12f      	bne.n	8002662 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	4a70      	ldr	r2, [pc, #448]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e024      	b.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c6      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0be      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002640:	f000 f8ce 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002644:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_RCC_ClockConfig+0x268>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d909      	bls.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002656:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4957      	ldr	r1, [pc, #348]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fa56 	bl	8000b24 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fa52 	bl	8000b24 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e095      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
 80026f6:	e008      	b.n	800270a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d105      	bne.n	800270a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002708:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d21d      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 020f 	bic.w	r2, r3, #15
 8002720:	4929      	ldr	r1, [pc, #164]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002728:	f7fe f9fc 	bl	8000b24 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe f9f8 	bl	8000b24 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e03b      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d1ed      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4917      	ldr	r1, [pc, #92]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490f      	ldr	r1, [pc, #60]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002792:	f000 f825 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_ClockConfig+0x26c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x270>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe f968 	bl	8000a8c <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	04c4b400 	.word	0x04c4b400
 80027d4:	08003574 	.word	0x08003574
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e047      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d102      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e03e      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d136      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d10c      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	68d2      	ldr	r2, [r2, #12]
 8002840:	0a12      	lsrs	r2, r2, #8
 8002842:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
      break;
 800284c:	e00c      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	0a12      	lsrs	r2, r2, #8
 800285c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0e5b      	lsrs	r3, r3, #25
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e001      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002888:	693b      	ldr	r3, [r7, #16]
}
 800288a:	4618      	mov	r0, r3
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	016e3600 	.word	0x016e3600

080028a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000

080028bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3301      	adds	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d10c      	bne.n	80028fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68d2      	ldr	r2, [r2, #12]
 80028ec:	0a12      	lsrs	r2, r2, #8
 80028ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
    break;
 80028f8:	e00c      	b.n	8002914 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002904:	68d2      	ldr	r2, [r2, #12]
 8002906:	0a12      	lsrs	r2, r2, #8
 8002908:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    break;
 8002912:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0e5b      	lsrs	r3, r3, #25
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40021000 	.word	0x40021000
 8002940:	016e3600 	.word	0x016e3600
 8002944:	00f42400 	.word	0x00f42400

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002950:	2300      	movs	r3, #0
 8002952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002954:	2300      	movs	r3, #0
 8002956:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8098 	beq.w	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
 8002982:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a39      	ldr	r2, [pc, #228]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299e:	f7fe f8c1 	bl	8000b24 <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a4:	e009      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe f8bd 	bl	8000b24 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d902      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	74fb      	strb	r3, [r7, #19]
        break;
 80029b8:	e005      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0ef      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d159      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01e      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d019      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a14:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe f87d 	bl	8000b24 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe f879 	bl	8000b24 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d902      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	74fb      	strb	r3, [r7, #19]
            break;
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ec      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a70:	e008      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	74bb      	strb	r3, [r7, #18]
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a84:	7c7b      	ldrb	r3, [r7, #17]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4baf      	ldr	r3, [pc, #700]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4aae      	ldr	r2, [pc, #696]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa2:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 0203 	bic.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	49a5      	ldr	r1, [pc, #660]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac4:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 020c 	bic.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	499d      	ldr	r1, [pc, #628]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae6:	4b98      	ldr	r3, [pc, #608]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4994      	ldr	r1, [pc, #592]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b08:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	498c      	ldr	r1, [pc, #560]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b2a:	4b87      	ldr	r3, [pc, #540]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	4983      	ldr	r1, [pc, #524]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b4c:	4b7e      	ldr	r3, [pc, #504]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	497b      	ldr	r1, [pc, #492]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4972      	ldr	r1, [pc, #456]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b90:	4b6d      	ldr	r3, [pc, #436]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	496a      	ldr	r1, [pc, #424]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	4961      	ldr	r1, [pc, #388]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4959      	ldr	r1, [pc, #356]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4950      	ldr	r1, [pc, #320]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4948      	ldr	r1, [pc, #288]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	493a      	ldr	r1, [pc, #232]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a34      	ldr	r2, [pc, #208]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	492c      	ldr	r1, [pc, #176]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	491e      	ldr	r1, [pc, #120]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4902      	ldr	r1, [pc, #8]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d48:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d54:	d105      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	4917      	ldr	r1, [pc, #92]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	4909      	ldr	r1, [pc, #36]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e049      	b.n	8002e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fd7a 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 f996 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04c      	b.n	8002f42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_TIM_Base_Start+0xc0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d01d      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_TIM_Base_Start+0xc4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <HAL_TIM_Base_Start+0xc8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_TIM_Base_Start+0xcc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_TIM_Base_Start+0xd0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_TIM_Base_Start+0xd4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_TIM_Base_Start+0xd8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d115      	bne.n	8002f2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_TIM_Base_Start+0xdc>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d015      	beq.n	8002f3e <HAL_TIM_Base_Start+0xae>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d011      	beq.n	8002f3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	e008      	b.n	8002f3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e000      	b.n	8002f40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40000c00 	.word	0x40000c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40015000 	.word	0x40015000
 8002f6c:	00010007 	.word	0x00010007

08002f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0d2      	b.n	800312e <HAL_TIM_ConfigClockSource+0x1be>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	f000 80a9 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x1aa>
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d81a      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x94>
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	f000 809a 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x198>
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	d809      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x7c>
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	f000 8095 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x198>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f000 8092 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x198>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 808f 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fea:	e097      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002fec:	2b50      	cmp	r3, #80	; 0x50
 8002fee:	d05b      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0x138>
 8002ff0:	2b50      	cmp	r3, #80	; 0x50
 8002ff2:	d802      	bhi.n	8002ffa <HAL_TIM_ConfigClockSource+0x8a>
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d077      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ff8:	e090      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8002ffa:	2b60      	cmp	r3, #96	; 0x60
 8002ffc:	d064      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0x158>
 8002ffe:	2b70      	cmp	r3, #112	; 0x70
 8003000:	d028      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003002:	e08b      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003004:	4a4c      	ldr	r2, [pc, #304]	; (8003138 <HAL_TIM_ConfigClockSource+0x1c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d07e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
 800300a:	4a4b      	ldr	r2, [pc, #300]	; (8003138 <HAL_TIM_ConfigClockSource+0x1c8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d810      	bhi.n	8003032 <HAL_TIM_ConfigClockSource+0xc2>
 8003010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003014:	d078      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301a:	d803      	bhi.n	8003024 <HAL_TIM_ConfigClockSource+0xb4>
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d02f      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8003022:	e07b      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003024:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003028:	d06e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
 800302a:	4a44      	ldr	r2, [pc, #272]	; (800313c <HAL_TIM_ConfigClockSource+0x1cc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d06b      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003030:	e074      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003032:	4a43      	ldr	r2, [pc, #268]	; (8003140 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d067      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
 8003038:	4a41      	ldr	r2, [pc, #260]	; (8003140 <HAL_TIM_ConfigClockSource+0x1d0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d803      	bhi.n	8003046 <HAL_TIM_ConfigClockSource+0xd6>
 800303e:	4a41      	ldr	r2, [pc, #260]	; (8003144 <HAL_TIM_ConfigClockSource+0x1d4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d061      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003044:	e06a      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003046:	4a40      	ldr	r2, [pc, #256]	; (8003148 <HAL_TIM_ConfigClockSource+0x1d8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d05d      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
 800304c:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_TIM_ConfigClockSource+0x1dc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d05a      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003052:	e063      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f000 f998 	bl	8003398 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003076:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]
      break;
 8003080:	e04c      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f000 f981 	bl	8003398 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a4:	609a      	str	r2, [r3, #8]
      break;
 80030a6:	e039      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f000 f8f3 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2150      	movs	r1, #80	; 0x50
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f94c 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030c6:	e029      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f912 	bl	80032fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2160      	movs	r1, #96	; 0x60
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f93c 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030e6:	e019      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f000 f8d3 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f92c 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8003106:	e009      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 f923 	bl	800335e <TIM_ITRx_SetConfig>
        break;
 8003118:	e000      	b.n	800311c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800311a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	00100030 	.word	0x00100030
 800313c:	00100020 	.word	0x00100020
 8003140:	00100050 	.word	0x00100050
 8003144:	00100040 	.word	0x00100040
 8003148:	00100060 	.word	0x00100060
 800314c:	00100070 	.word	0x00100070

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a46      	ldr	r2, [pc, #280]	; (800327c <TIM_Base_SetConfig+0x12c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d017      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d013      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <TIM_Base_SetConfig+0x130>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a42      	ldr	r2, [pc, #264]	; (8003284 <TIM_Base_SetConfig+0x134>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a41      	ldr	r2, [pc, #260]	; (8003288 <TIM_Base_SetConfig+0x138>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	; (800328c <TIM_Base_SetConfig+0x13c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x48>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3f      	ldr	r2, [pc, #252]	; (8003290 <TIM_Base_SetConfig+0x140>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a33      	ldr	r2, [pc, #204]	; (800327c <TIM_Base_SetConfig+0x12c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d023      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d01f      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <TIM_Base_SetConfig+0x130>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <TIM_Base_SetConfig+0x134>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <TIM_Base_SetConfig+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	; (800328c <TIM_Base_SetConfig+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <TIM_Base_SetConfig+0x144>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <TIM_Base_SetConfig+0x148>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <TIM_Base_SetConfig+0x14c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xaa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <TIM_Base_SetConfig+0x140>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <TIM_Base_SetConfig+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <TIM_Base_SetConfig+0x110>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <TIM_Base_SetConfig+0x13c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0x110>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <TIM_Base_SetConfig+0x144>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x110>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <TIM_Base_SetConfig+0x148>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x110>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a12      	ldr	r2, [pc, #72]	; (800329c <TIM_Base_SetConfig+0x14c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x110>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <TIM_Base_SetConfig+0x140>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40015000 	.word	0x40015000
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400
 800329c:	40014800 	.word	0x40014800

080032a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 030a 	bic.w	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0210 	bic.w	r2, r3, #16
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800333a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	f043 0307 	orr.w	r3, r3, #7
 8003384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e074      	b.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d01d      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40013400 	.word	0x40013400
 80034f0:	40015000 	.word	0x40015000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40000c00 	.word	0x40000c00
 8003500:	40014000 	.word	0x40014000

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4e0d      	ldr	r6, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1ba4      	subs	r4, r4, r6
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2500      	movs	r5, #0
 8003510:	42a5      	cmp	r5, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4e0b      	ldr	r6, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 f820 	bl	800355c <_init>
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2500      	movs	r5, #0
 8003522:	42a5      	cmp	r5, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	3501      	adds	r5, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003536:	4798      	blx	r3
 8003538:	3501      	adds	r5, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	08003584 	.word	0x08003584
 8003540:	08003584 	.word	0x08003584
 8003544:	08003584 	.word	0x08003584
 8003548:	08003588 	.word	0x08003588

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
