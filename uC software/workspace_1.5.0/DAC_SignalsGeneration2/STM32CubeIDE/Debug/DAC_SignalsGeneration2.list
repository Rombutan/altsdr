
DAC_SignalsGeneration2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003670  08003670  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003670  08003670  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003670  08003670  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000020  08003698  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003698  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c45f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000f572  00000000  00000000  0002c4af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002027  00000000  00000000  0003ba21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f00  00000000  00000000  0003da48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f7581  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000df8  00000000  00000000  00135ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00025809  00000000  00000000  00136cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c4d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb8  00000000  00000000  0015c54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003644 	.word	0x08003644

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08003644 	.word	0x08003644

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	; (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	; (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fc77 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f003 f9d1 	bl	80035ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f80f 	bl	800026c <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800025c:	08003678 	.word	0x08003678
  ldr r2, =_sbss
 8000260:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000264:	20000188 	.word	0x20000188

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 fc76 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f852 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f9aa 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800027c:	f000 f97e 	bl	800057c <MX_DMA_Init>
  MX_DAC1_Init();
 8000280:	f000 f898 	bl	80003b4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000284:	f000 f8f6 	bl	8000474 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000288:	f000 f942 	bl	8000510 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 fb6f 	bl	8000970 <BSP_LED_Init>
  /* Configure User push-button in Interrupt mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000292:	2101      	movs	r1, #1
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fbcd 	bl	8000a34 <BSP_PB_Init>
  
  /*## Start Time Base triggers ############################################*/
  /* Enable TIM peripheral counter */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 800029a:	481b      	ldr	r0, [pc, #108]	; (8000308 <main+0x9c>)
 800029c:	f002 fe44 	bl	8002f28 <HAL_TIM_Base_Start>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <main+0x3e>
  {
    /* Counter enable error */
    Error_Handler();
 80002a6:	f000 fa55 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 80002aa:	4818      	ldr	r0, [pc, #96]	; (800030c <main+0xa0>)
 80002ac:	f002 fe3c 	bl	8002f28 <HAL_TIM_Base_Start>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0x4e>
  {
    /* Counter enable error */
    Error_Handler();
 80002b6:	f000 fa4d 	bl	8000754 <Error_Handler>
  }
  
  /*## Start DAC conversions ###############################################*/
  /* Start DAC wave generation */
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4814      	ldr	r0, [pc, #80]	; (8000310 <main+0xa4>)
 80002be:	f000 fe12 	bl	8000ee6 <HAL_DAC_Start>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <main+0x60>
  {
    /* DAC conversion start error */
    Error_Handler();
 80002c8:	f000 fa44 	bl	8000754 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LED_On(LED2);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 fb85 	bl	80009dc <BSP_LED_On>
  while (1)
  {
    /* If the Key is pressed */
    if (ubKeyPressed != RESET)
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <main+0xa8>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0fa      	beq.n	80002d2 <main+0x66>
    {
      /* select waves forms according to the User push-button status */
      if (ubSelectedWavesForm == DAC_WAVE_SAWTOOTH) ubSelectedWavesForm = DAC_WAVE_SINE;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <main+0xac>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d103      	bne.n	80002ee <main+0x82>
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <main+0xac>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	e002      	b.n	80002f4 <main+0x88>
      else ubSelectedWavesForm = DAC_WAVE_SAWTOOTH;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <main+0xac>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
      
      DAC_ChangeWave(ubSelectedWavesForm);
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <main+0xac>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f980 	bl	8000600 <DAC_ChangeWave>

      ubKeyPressed = RESET;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <main+0xa8>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
    if (ubKeyPressed != RESET)
 8000306:	e7e4      	b.n	80002d2 <main+0x66>
 8000308:	20000130 	.word	0x20000130
 800030c:	200000e4 	.word	0x200000e4
 8000310:	20000070 	.word	0x20000070
 8000314:	2000003c 	.word	0x2000003c
 8000318:	2000003d 	.word	0x2000003d

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b094      	sub	sp, #80	; 0x50
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2238      	movs	r2, #56	; 0x38
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 f982 	bl	8003634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800033e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000342:	f001 ffdd 	bl	8002300 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2340      	movs	r3, #64	; 0x40
 8000352:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000358:	2302      	movs	r3, #2
 800035a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800035c:	2304      	movs	r3, #4
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000360:	234b      	movs	r3, #75	; 0x4b
 8000362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000364:	2302      	movs	r3, #2
 8000366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000368:	2302      	movs	r3, #2
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036c:	2302      	movs	r3, #2
 800036e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f002 f877 	bl	8002468 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000380:	f000 f9e8 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2303      	movs	r3, #3
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2104      	movs	r1, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fb7b 	bl	8002a98 <HAL_RCC_ClockConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003a8:	f000 f9d4 	bl	8000754 <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3750      	adds	r7, #80	; 0x50
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ba:	463b      	mov	r3, r7
 80003bc:	2230      	movs	r2, #48	; 0x30
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 f937 	bl	8003634 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_DAC1_Init+0xb4>)
 80003c8:	4a28      	ldr	r2, [pc, #160]	; (800046c <MX_DAC1_Init+0xb8>)
 80003ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003cc:	4826      	ldr	r0, [pc, #152]	; (8000468 <MX_DAC1_Init+0xb4>)
 80003ce:	f000 fd68 	bl	8000ea2 <HAL_DAC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003d8:	f000 f9bc 	bl	8000754 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003dc:	2302      	movs	r3, #2
 80003de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80003ec:	2312      	movs	r3, #18
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_T6_TRGO;
 80003f0:	231e      	movs	r3, #30
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	4818      	ldr	r0, [pc, #96]	; (8000468 <MX_DAC1_Init+0xb4>)
 8000408:	f000 ff14 	bl	8001234 <HAL_DAC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000412:	f000 f99f 	bl	8000754 <Error_Handler>
  }
  /** Configure Sawtooth wave generation on DAC OUT1
  */
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 8000416:	f240 4344 	movw	r3, #1092	; 0x444
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2300      	movs	r3, #0
 800041e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000422:	2100      	movs	r1, #0
 8000424:	4810      	ldr	r0, [pc, #64]	; (8000468 <MX_DAC1_Init+0xb4>)
 8000426:	f001 f8e7 	bl	80015f8 <HAL_DACEx_SawtoothWaveGenerate>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8000430:	f000 f990 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <MX_DAC1_Init+0xb4>)
 800043c:	f001 f949 	bl	80016d2 <HAL_DACEx_SelfCalibrate>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 8000446:	f000 f985 	bl	8000754 <Error_Handler>
  }
  /* Save DAC configuration to reconfigure it upon needs later */
  sDacConfig = sConfig;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_DAC1_Init+0xbc>)
 800044c:	461d      	mov	r5, r3
 800044e:	463c      	mov	r4, r7
 8000450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000458:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800045c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  /* USER CODE END DAC1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3730      	adds	r7, #48	; 0x30
 8000464:	46bd      	mov	sp, r7
 8000466:	bdb0      	pop	{r4, r5, r7, pc}
 8000468:	20000070 	.word	0x20000070
 800046c:	50000800 	.word	0x50000800
 8000470:	20000040 	.word	0x20000040

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_TIM2_Init+0x98>)
 8000494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <MX_TIM2_Init+0x98>)
 800049c:	2295      	movs	r2, #149	; 0x95
 800049e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_TIM2_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <MX_TIM2_Init+0x98>)
 80004a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_TIM2_Init+0x98>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_TIM2_Init+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_TIM2_Init+0x98>)
 80004bc:	f002 fcdc 	bl	8002e78 <HAL_TIM_Base_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004c6:	f000 f945 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_TIM2_Init+0x98>)
 80004d8:	f002 fdbe 	bl	8003058 <HAL_TIM_ConfigClockSource>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004e2:	f000 f937 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004e6:	2320      	movs	r3, #32
 80004e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_TIM2_Init+0x98>)
 80004f4:	f002 ffe4 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004fe:	f000 f929 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000130 	.word	0x20000130

08000510 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_TIM6_Init+0x64>)
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_TIM6_Init+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_TIM6_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_TIM6_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_TIM6_Init+0x64>)
 8000534:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000538:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_TIM6_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM6_Init+0x64>)
 8000542:	f002 fc99 	bl	8002e78 <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800054c:	f000 f902 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000550:	2320      	movs	r3, #32
 8000552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM6_Init+0x64>)
 800055e:	f002 ffaf 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000568:	f000 f8f4 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000e4 	.word	0x200000e4
 8000578:	40001000 	.word	0x40001000

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_DMA_Init+0x50>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <MX_DMA_Init+0x50>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6493      	str	r3, [r2, #72]	; 0x48
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_DMA_Init+0x50>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA_Init+0x50>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <MX_DMA_Init+0x50>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6493      	str	r3, [r2, #72]	; 0x48
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_DMA_Init+0x50>)
 80005a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200b      	movs	r0, #11
 80005b8:	f000 fc3f 	bl	8000e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005bc:	200b      	movs	r0, #11
 80005be:	f000 fc56 	bl	8000e6e <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_GPIO_Init+0x2c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MX_GPIO_Init+0x2c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_GPIO_Init+0x2c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <DAC_ChangeWave>:

/* USER CODE BEGIN 4 */

static void DAC_ChangeWave(t_wavetype wave)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  
  /* Suspend Time Base triggers */
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
 800060a:	4845      	ldr	r0, [pc, #276]	; (8000720 <DAC_ChangeWave+0x120>)
 800060c:	f002 fcfc 	bl	8003008 <HAL_TIM_Base_Stop>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <DAC_ChangeWave+0x1a>
  {
    /* Counter enable error */
    Error_Handler();
 8000616:	f000 f89d 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_Base_Stop(&htim6) != HAL_OK)
 800061a:	4842      	ldr	r0, [pc, #264]	; (8000724 <DAC_ChangeWave+0x124>)
 800061c:	f002 fcf4 	bl	8003008 <HAL_TIM_Base_Stop>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <DAC_ChangeWave+0x2a>
  {
    /* Counter enable error */
    Error_Handler();
 8000626:	f000 f895 	bl	8000754 <Error_Handler>
  }
  
  switch(wave)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <DAC_ChangeWave+0x36>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d00a      	beq.n	800064a <DAC_ChangeWave+0x4a>
 8000634:	e013      	b.n	800065e <DAC_ChangeWave+0x5e>
  {
    case DAC_WAVE_SAWTOOTH:
      if (HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	483b      	ldr	r0, [pc, #236]	; (8000728 <DAC_ChangeWave+0x128>)
 800063a:	f000 fd87 	bl	800114c <HAL_DAC_Stop_DMA>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00f      	beq.n	8000664 <DAC_ChangeWave+0x64>
      {
        /* DAC conversion start error */
        Error_Handler();
 8000644:	f000 f886 	bl	8000754 <Error_Handler>
      }
      break;
 8000648:	e00c      	b.n	8000664 <DAC_ChangeWave+0x64>
    case DAC_WAVE_SINE:
      if (HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4836      	ldr	r0, [pc, #216]	; (8000728 <DAC_ChangeWave+0x128>)
 800064e:	f000 fc9d 	bl	8000f8c <HAL_DAC_Stop>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <DAC_ChangeWave+0x68>
      {
        /* DAC conversion start error */
        Error_Handler();
 8000658:	f000 f87c 	bl	8000754 <Error_Handler>
      }
      break;
 800065c:	e004      	b.n	8000668 <DAC_ChangeWave+0x68>
    default:
      Error_Handler();
 800065e:	f000 f879 	bl	8000754 <Error_Handler>
      break;
 8000662:	e002      	b.n	800066a <DAC_ChangeWave+0x6a>
      break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <DAC_ChangeWave+0x6a>
      break;
 8000668:	bf00      	nop
  }

  /* Re-configure DAC */
  tmp = sDacConfig.DAC_Trigger;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <DAC_ChangeWave+0x12c>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	60fb      	str	r3, [r7, #12]
  sDacConfig.DAC_Trigger = sDacConfig.DAC_Trigger2;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <DAC_ChangeWave+0x12c>)
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	4a2d      	ldr	r2, [pc, #180]	; (800072c <DAC_ChangeWave+0x12c>)
 8000676:	60d3      	str	r3, [r2, #12]
  sDacConfig.DAC_Trigger2 = tmp;
 8000678:	4a2c      	ldr	r2, [pc, #176]	; (800072c <DAC_ChangeWave+0x12c>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6113      	str	r3, [r2, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sDacConfig, DAC_CHANNEL_1) != HAL_OK)
 800067e:	2200      	movs	r2, #0
 8000680:	492a      	ldr	r1, [pc, #168]	; (800072c <DAC_ChangeWave+0x12c>)
 8000682:	4829      	ldr	r0, [pc, #164]	; (8000728 <DAC_ChangeWave+0x128>)
 8000684:	f000 fdd6 	bl	8001234 <HAL_DAC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <DAC_ChangeWave+0x92>
  {
    Error_Handler();
 800068e:	f000 f861 	bl	8000754 <Error_Handler>
  }
  
  /* Generate new wave */
  switch(wave)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <DAC_ChangeWave+0x9e>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d019      	beq.n	80006d0 <DAC_ChangeWave+0xd0>
 800069c:	e026      	b.n	80006ec <DAC_ChangeWave+0xec>
  {
    case DAC_WAVE_SAWTOOTH:
      if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 800069e:	f240 4344 	movw	r3, #1092	; 0x444
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006aa:	2100      	movs	r1, #0
 80006ac:	481e      	ldr	r0, [pc, #120]	; (8000728 <DAC_ChangeWave+0x128>)
 80006ae:	f000 ffa3 	bl	80015f8 <HAL_DACEx_SawtoothWaveGenerate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <DAC_ChangeWave+0xbc>
      {
        Error_Handler();
 80006b8:	f000 f84c 	bl	8000754 <Error_Handler>
      }
      if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <DAC_ChangeWave+0x128>)
 80006c0:	f000 fc11 	bl	8000ee6 <HAL_DAC_Start>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d013      	beq.n	80006f2 <DAC_ChangeWave+0xf2>
      {
        /* DAC conversion start error */
        Error_Handler();
 80006ca:	f000 f843 	bl	8000754 <Error_Handler>
      }
      break;
 80006ce:	e010      	b.n	80006f2 <DAC_ChangeWave+0xf2>
    case DAC_WAVE_SINE:
      if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 80006d0:	2300      	movs	r3, #0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2302      	movs	r3, #2
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <DAC_ChangeWave+0x130>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <DAC_ChangeWave+0x128>)
 80006dc:	f000 fc74 	bl	8000fc8 <HAL_DAC_Start_DMA>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <DAC_ChangeWave+0xf6>
                            2,
                            DAC_ALIGN_12B_R
                           ) != HAL_OK)
      {
        /* DAC conversion start error */
        Error_Handler();
 80006e6:	f000 f835 	bl	8000754 <Error_Handler>
      }
      break;
 80006ea:	e004      	b.n	80006f6 <DAC_ChangeWave+0xf6>
    default:
      Error_Handler();
 80006ec:	f000 f832 	bl	8000754 <Error_Handler>
      break;
 80006f0:	e002      	b.n	80006f8 <DAC_ChangeWave+0xf8>
      break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <DAC_ChangeWave+0xf8>
      break;
 80006f6:	bf00      	nop
  }
  
  /* Resume Time Base triggers */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <DAC_ChangeWave+0x120>)
 80006fa:	f002 fc15 	bl	8002f28 <HAL_TIM_Base_Start>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <DAC_ChangeWave+0x108>
  {
    /* Counter enable error */
    Error_Handler();
 8000704:	f000 f826 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 8000708:	4806      	ldr	r0, [pc, #24]	; (8000724 <DAC_ChangeWave+0x124>)
 800070a:	f002 fc0d 	bl	8002f28 <HAL_TIM_Base_Start>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <DAC_ChangeWave+0x118>
  {
    /* Counter enable error */
    Error_Handler();
 8000714:	f000 f81e 	bl	8000754 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000130 	.word	0x20000130
 8000724:	200000e4 	.word	0x200000e4
 8000728:	20000070 	.word	0x20000070
 800072c:	20000040 	.word	0x20000040
 8000730:	20000000 	.word	0x20000000

08000734 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
  /* Change the wave */
  ubKeyPressed = SET;
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	2000003c 	.word	0x2000003c

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED2 is slowly blinking (1 sec. period) */
  while(1)
  {    
    BSP_LED_Toggle(LED2); 
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f955 	bl	8000a08 <BSP_LED_Toggle>
    HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f000 fa6d 	bl	8000c40 <HAL_Delay>
    BSP_LED_Toggle(LED2); 
 8000766:	e7f7      	b.n	8000758 <Error_Handler+0x4>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6613      	str	r3, [r2, #96]	; 0x60
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6593      	str	r3, [r2, #88]	; 0x58
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800079e:	f001 fe53 	bl	8002448 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <HAL_DAC_MspInit+0xcc>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d14f      	bne.n	8000872 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */
  
  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a24      	ldr	r2, [pc, #144]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_DAC_MspInit+0xd0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000802:	2310      	movs	r3, #16
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 fba6 	bl	8001f68 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <HAL_DAC_MspInit+0xd8>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000824:	2206      	movs	r2, #6
 8000826:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800082a:	2210      	movs	r2, #16
 800082c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000848:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800084c:	2220      	movs	r2, #32
 800084e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 8000858:	f001 f888 	bl	800196c <HAL_DMA_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000862:	f7ff ff77 	bl	8000754 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <HAL_DAC_MspInit+0xd4>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */
  
  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	50000800 	.word	0x50000800
 8000880:	40021000 	.word	0x40021000
 8000884:	20000084 	.word	0x20000084
 8000888:	40020008 	.word	0x40020008

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d10c      	bne.n	80008b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008b6:	e010      	b.n	80008da <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_TIM_Base_MspInit+0x60>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d10b      	bne.n	80008da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_TIM_Base_MspInit+0x5c>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40001000 	.word	0x40001000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f95e 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <DMA1_Channel1_IRQHandler+0x10>)
 8000952:	f001 f987 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000084 	.word	0x20000084

08000960 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 10 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8000964:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000968:	f001 fcb2 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <BSP_LED_Init+0x64>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <BSP_LED_Init+0x64>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <BSP_LED_Init+0x64>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000992:	2320      	movs	r3, #32
 8000994:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <BSP_LED_Init+0x68>)
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	f107 020c 	add.w	r2, r7, #12
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fad9 	bl	8001f68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <BSP_LED_Init+0x68>)
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	2120      	movs	r1, #32
 80009c0:	2200      	movs	r2, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fc52 	bl	800226c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	20000004 	.word	0x20000004

080009dc <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <BSP_LED_On+0x28>)
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	2120      	movs	r1, #32
 80009f0:	2201      	movs	r2, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fc3a 	bl	800226c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000004 	.word	0x20000004

08000a08 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <BSP_LED_Toggle+0x28>)
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fc3c 	bl	800229c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000004 	.word	0x20000004

08000a34 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <BSP_PB_Init+0xc0>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <BSP_PB_Init+0xc0>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <BSP_PB_Init+0xc0>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <BSP_PB_Init+0xc4>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fa70 	bl	8001f68 <HAL_GPIO_Init>
 8000a88:	e02f      	b.n	8000aea <BSP_PB_Init+0xb6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <BSP_PB_Init+0xc8>)
 8000a8c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <BSP_PB_Init+0xc4>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	f107 020c 	add.w	r2, r7, #12
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fa63 	bl	8001f68 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <BSP_PB_Init+0xcc>)
 8000aa8:	1898      	adds	r0, r3, r2
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <BSP_PB_Init+0xd0>)
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f001 fa43 	bl	8001f3e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <BSP_PB_Init+0xcc>)
 8000abe:	1898      	adds	r0, r3, r2
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <BSP_PB_Init+0xd4>)
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f001 fa1a 	bl	8001f04 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ad0:	2028      	movs	r0, #40	; 0x28
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <BSP_PB_Init+0xd8>)
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	f000 f9ac 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ae2:	2328      	movs	r3, #40	; 0x28
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f9c2 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	10110000 	.word	0x10110000
 8000b00:	2000017c 	.word	0x2000017c
 8000b04:	0800365c 	.word	0x0800365c
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000010 	.word	0x20000010

08000b10 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fff0 	bl	8000b10 <BSP_PB_Callback>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SystemInit+0x28>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <SystemInit+0x28>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SystemInit+0x28>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 f95a 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f80d 	bl	8000b90 <HAL_InitTick>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e001      	b.n	8000b86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b82:	f7ff fdf1 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b86:	79fb      	ldrb	r3, [r7, #7]

}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d022      	beq.n	8000bea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_InitTick+0x6c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_InitTick+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f966 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10f      	bne.n	8000be4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b0f      	cmp	r3, #15
 8000bc8:	d809      	bhi.n	8000bde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd2:	f000 f932 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0x70>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e004      	b.n	8000bee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e001      	b.n	8000bee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000001c 	.word	0x2000001c
 8000bfc:	20000014 	.word	0x20000014
 8000c00:	20000018 	.word	0x20000018

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_IncTick+0x1c>)
 8000c14:	6013      	str	r3, [r2, #0]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000184 	.word	0x20000184
 8000c24:	2000001c 	.word	0x2000001c

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000184 	.word	0x20000184

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c58:	d004      	beq.n	8000c64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_Delay+0x40>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c64:	bf00      	nop
 8000c66:	f7ff ffdf 	bl	8000c28 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d8f7      	bhi.n	8000c66 <HAL_Delay+0x26>
  {
  }
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000001c 	.word	0x2000001c

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff40 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff33 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa4 	bl	8000de0 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e014      	b.n	8000ede <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791b      	ldrb	r3, [r3, #4]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fc73 	bl	80007b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	795b      	ldrb	r3, [r3, #5]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_DAC_Start+0x16>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e043      	b.n	8000f84 <HAL_DAC_Start+0x9e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2202      	movs	r2, #2
 8000f06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2201      	movs	r2, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fe8d 	bl	8000c40 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10f      	bne.n	8000f4c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d11d      	bne.n	8000f76 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	e014      	b.n	8000f76 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d107      	bne.n	8000f76 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0202 	orr.w	r2, r2, #2
 8000f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fe44 	bl	8000c40 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	795b      	ldrb	r3, [r3, #5]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_DAC_Start_DMA+0x1e>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e0a1      	b.n	800112a <HAL_DAC_Start_DMA+0x162>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d12a      	bne.n	800104e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_DAC_Start_DMA+0x16c>)
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_DAC_Start_DMA+0x170>)
 8001006:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_DAC_Start_DMA+0x174>)
 800100e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800101e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d009      	beq.n	800103a <HAL_DAC_Start_DMA+0x72>
 8001026:	2b08      	cmp	r3, #8
 8001028:	d00c      	beq.n	8001044 <HAL_DAC_Start_DMA+0x7c>
 800102a:	2b00      	cmp	r3, #0
 800102c:	d000      	beq.n	8001030 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800102e:	e039      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3308      	adds	r3, #8
 8001036:	613b      	str	r3, [r7, #16]
        break;
 8001038:	e034      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	330c      	adds	r3, #12
 8001040:	613b      	str	r3, [r7, #16]
        break;
 8001042:	e02f      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3310      	adds	r3, #16
 800104a:	613b      	str	r3, [r7, #16]
        break;
 800104c:	e02a      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <HAL_DAC_Start_DMA+0x178>)
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a3a      	ldr	r2, [pc, #232]	; (8001144 <HAL_DAC_Start_DMA+0x17c>)
 800105c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4a39      	ldr	r2, [pc, #228]	; (8001148 <HAL_DAC_Start_DMA+0x180>)
 8001064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001074:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d009      	beq.n	8001090 <HAL_DAC_Start_DMA+0xc8>
 800107c:	2b08      	cmp	r3, #8
 800107e:	d00c      	beq.n	800109a <HAL_DAC_Start_DMA+0xd2>
 8001080:	2b00      	cmp	r3, #0
 8001082:	d000      	beq.n	8001086 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001084:	e00e      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3314      	adds	r3, #20
 800108c:	613b      	str	r3, [r7, #16]
        break;
 800108e:	e009      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3318      	adds	r3, #24
 8001096:	613b      	str	r3, [r7, #16]
        break;
 8001098:	e004      	b.n	80010a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	331c      	adds	r3, #28
 80010a0:	613b      	str	r3, [r7, #16]
        break;
 80010a2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d111      	bne.n	80010ce <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6898      	ldr	r0, [r3, #8]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	f000 fcfa 	bl	8001abc <HAL_DMA_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	75fb      	strb	r3, [r7, #23]
 80010cc:	e010      	b.n	80010f0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68d8      	ldr	r0, [r3, #12]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	f000 fce8 	bl	8001abc <HAL_DMA_Start_IT>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10f      	bne.n	800111c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2201      	movs	r2, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fd93 	bl	8000c40 <HAL_Delay>
 800111a:	e005      	b.n	8001128 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	f043 0204 	orr.w	r2, r3, #4
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001128:	7dfb      	ldrb	r3, [r7, #23]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800158d 	.word	0x0800158d
 8001138:	080015af 	.word	0x080015af
 800113c:	080015cb 	.word	0x080015cb
 8001140:	08001901 	.word	0x08001901
 8001144:	08001923 	.word	0x08001923
 8001148:	0800193f 	.word	0x0800193f

0800114c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	400a      	ands	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2201      	movs	r2, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff fd55 	bl	8000c40 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10f      	bne.n	80011bc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fd06 	bl	8001bb2 <HAL_DMA_Abort>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e00e      	b.n	80011da <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fcf6 	bl	8001bb2 <HAL_DMA_Abort>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2204      	movs	r2, #4
 80011e4:	711a      	strb	r2, [r3, #4]
 80011e6:	e002      	b.n	80011ee <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	795b      	ldrb	r3, [r3, #5]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_DAC_ConfigChannel+0x1c>
 800124c:	2302      	movs	r3, #2
 800124e:	e194      	b.n	800157a <HAL_DAC_ConfigChannel+0x346>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2202      	movs	r2, #2
 800125a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d174      	bne.n	800134e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d137      	bne.n	80012da <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800126a:	f7ff fcdd 	bl	8000c28 <HAL_GetTick>
 800126e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001270:	e011      	b.n	8001296 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001272:	f7ff fcd9 	bl	8000c28 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d90a      	bls.n	8001296 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f043 0208 	orr.w	r2, r3, #8
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2203      	movs	r2, #3
 8001290:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e171      	b.n	800157a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e6      	bne.n	8001272 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fccb 	bl	8000c40 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
 80012b4:	e01e      	b.n	80012f4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012b6:	f7ff fcb7 	bl	8000c28 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d90a      	bls.n	80012da <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f043 0208 	orr.w	r2, r3, #8
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2203      	movs	r2, #3
 80012d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e14f      	b.n	800157a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dbe8      	blt.n	80012b6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fcab 	bl	8000c40 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	ea02 0103 	and.w	r1, r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	21ff      	movs	r1, #255	; 0xff
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	ea02 0103 	and.w	r1, r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	409a      	lsls	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d11d      	bne.n	8001392 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	221f      	movs	r2, #31
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136e:	4013      	ands	r3, r2
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	4313      	orrs	r3, r2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	2207      	movs	r2, #7
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	4013      	ands	r3, r2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	e011      	b.n	80013e4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	e008      	b.n	80013e4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80013da:	2301      	movs	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	e001      	b.n	80013e4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6a3a      	ldr	r2, [r7, #32]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	4013      	ands	r3, r2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_DAC_ConfigChannel+0x1e4>
 8001412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001416:	e000      	b.n	800141a <HAL_DAC_ConfigChannel+0x1e6>
 8001418:	2300      	movs	r3, #0
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001432:	4013      	ands	r3, r2
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	795b      	ldrb	r3, [r3, #5]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_DAC_ConfigChannel+0x210>
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	e000      	b.n	8001446 <HAL_DAC_ConfigChannel+0x212>
 8001444:	2300      	movs	r3, #0
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d114      	bne.n	8001486 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800145c:	f001 fcba 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8001460:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_DAC_ConfigChannel+0x350>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d904      	bls.n	8001474 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e00d      	b.n	8001490 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4a44      	ldr	r2, [pc, #272]	; (8001588 <HAL_DAC_ConfigChannel+0x354>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d909      	bls.n	8001490 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	e004      	b.n	8001490 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	4313      	orrs	r3, r2
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	4313      	orrs	r3, r2
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	4013      	ands	r3, r2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	4313      	orrs	r3, r2
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	22c0      	movs	r2, #192	; 0xc0
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	ea02 0103 	and.w	r1, r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	09896800 	.word	0x09896800
 8001588:	04c4b400 	.word	0x04c4b400

0800158c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fe2c 	bl	80011f8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	711a      	strb	r2, [r3, #4]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fe25 	bl	800120c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fe1b 	bl	8001220 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	711a      	strb	r2, [r3, #4]
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DACEx_SawtoothWaveGenerate>:
  * @note    Sawtooth reset and step triggers are configured by calling @ref HAL_DAC_ConfigChannel
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SawtoothWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Polarity,
                                                 uint32_t ResetData, uint32_t StepData)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_SAWTOOTH_POLARITY(Polarity));
  assert_param(IS_DAC_RESET_DATA(ResetData));
  assert_param(IS_DAC_STEP_DATA(StepData));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	795b      	ldrb	r3, [r3, #5]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_DACEx_SawtoothWaveGenerate+0x1a>
 800160e:	2302      	movs	r3, #2
 8001610:	e03b      	b.n	800168a <HAL_DACEx_SawtoothWaveGenerate+0x92>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2202      	movs	r2, #2
 800161c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10f      	bne.n	8001644 <HAL_DACEx_SawtoothWaveGenerate+0x4c>
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR1,
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	659a      	str	r2, [r3, #88]	; 0x58
 8001642:	e00e      	b.n	8001662 <HAL_DACEx_SawtoothWaveGenerate+0x6a>
               | (ResetData << DAC_STR1_STRSTDATA1_Pos));
  }
  else
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR2,
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c
               | Polarity
               | (ResetData << DAC_STR2_STRSTDATA2_Pos));
  }

  /* Enable the sawtooth wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1) << (Channel & 0x10UL), (uint32_t)(DAC_CR_WAVE1_1 | DAC_CR_WAVE1_0) << (Channel & 0x10UL));
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	22c0      	movs	r2, #192	; 0xc0
 800166a:	fa02 f103 	lsl.w	r1, r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b08a      	sub	sp, #40	; 0x28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f0:	e100      	b.n	80018f4 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	791b      	ldrb	r3, [r3, #4]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d103      	bne.n	8001704 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001702:	e0f7      	b.n	80018f4 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	795b      	ldrb	r3, [r3, #5]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_DACEx_SelfCalibrate+0x3e>
 800170c:	2302      	movs	r3, #2
 800170e:	e0f3      	b.n	80018f8 <HAL_DACEx_SelfCalibrate+0x226>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2107      	movs	r1, #7
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2201      	movs	r2, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fa79 	bl	8000c40 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2207      	movs	r2, #7
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43da      	mvns	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	400a      	ands	r2, r1
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d103      	bne.n	800177e <HAL_DACEx_SelfCalibrate+0xac>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3308      	adds	r3, #8
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e002      	b.n	8001784 <HAL_DACEx_SelfCalibrate+0xb2>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3314      	adds	r3, #20
 8001782:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	461a      	mov	r2, r3
 8001788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178c:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 80017a8:	2310      	movs	r3, #16
 80017aa:	623b      	str	r3, [r7, #32]
    delta = 8U;
 80017ac:	2308      	movs	r3, #8
 80017ae:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80017b0:	e037      	b.n	8001822 <HAL_DACEx_SelfCalibrate+0x150>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	211f      	movs	r1, #31
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	ea02 0103 	and.w	r1, r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fa2f 	bl	8000c40 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	429a      	cmp	r2, r3
 8001808:	d104      	bne.n	8001814 <HAL_DACEx_SelfCalibrate+0x142>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800180a:	6a3a      	ldr	r2, [r7, #32]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	623b      	str	r3, [r7, #32]
 8001812:	e003      	b.n	800181c <HAL_DACEx_SelfCalibrate+0x14a>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8001814:	6a3a      	ldr	r2, [r7, #32]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1c4      	bne.n	80017b2 <HAL_DACEx_SelfCalibrate+0xe0>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	211f      	movs	r1, #31
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	ea02 0103 	and.w	r1, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	6a3a      	ldr	r2, [r7, #32]
 8001848:	409a      	lsls	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff f9f4 	bl	8000c40 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d117      	bne.n	80018a2 <HAL_DACEx_SelfCalibrate+0x1d0>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	211f      	movs	r1, #31
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	ea02 0103 	and.w	r1, r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	409a      	lsls	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	6a3a      	ldr	r2, [r7, #32]
 80018c4:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2201      	movs	r2, #1
 80018ca:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2107      	movs	r1, #7
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	ea02 0103 	and.w	r1, r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	715a      	strb	r2, [r3, #5]
  }

  return status;
 80018f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff fec1 	bl	8001696 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	711a      	strb	r2, [r3, #4]
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff feba 	bl	80016aa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f043 0204 	orr.w	r2, r3, #4
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff feb0 	bl	80016be <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	711a      	strb	r2, [r3, #4]
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e08d      	b.n	8001a9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_DMA_Init+0x138>)
 8001986:	429a      	cmp	r2, r3
 8001988:	d80f      	bhi.n	80019aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_DMA_Init+0x13c>)
 8001992:	4413      	add	r3, r2
 8001994:	4a45      	ldr	r2, [pc, #276]	; (8001aac <HAL_DMA_Init+0x140>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	009a      	lsls	r2, r3, #2
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_DMA_Init+0x144>)
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
 80019a8:	e00e      	b.n	80019c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_DMA_Init+0x148>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a3d      	ldr	r2, [pc, #244]	; (8001aac <HAL_DMA_Init+0x140>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_DMA_Init+0x14c>)
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fa10 	bl	8001e40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a28:	d102      	bne.n	8001a30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_DMA_Init+0x104>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d80c      	bhi.n	8001a70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa30 	bl	8001ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e008      	b.n	8001a82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020407 	.word	0x40020407
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	cccccccd 	.word	0xcccccccd
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	bffdfbf8 	.word	0xbffdfbf8
 8001ab8:	40020400 	.word	0x40020400

08001abc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Start_IT+0x20>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e066      	b.n	8001baa <HAL_DMA_Start_IT+0xee>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d155      	bne.n	8001b9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f954 	bl	8001dc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 020e 	orr.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00f      	b.n	8001b54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0204 	bic.w	r2, r2, #4
 8001b42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 020a 	orr.w	r2, r2, #10
 8001b52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e005      	b.n	8001ba8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d005      	beq.n	8001bd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e037      	b.n	8001c46 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 020e 	bic.w	r2, r2, #14
 8001be4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f003 021f 	and.w	r2, r3, #31
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c22:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c44:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2204      	movs	r2, #4
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d026      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d021      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d071      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cdc:	e06c      	b.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02e      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d029      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020a 	bic.w	r2, r2, #10
 8001d18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2102      	movs	r1, #2
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d038      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d4e:	e033      	b.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02a      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d025      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020e 	bic.w	r2, r2, #14
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f003 021f 	and.w	r2, r3, #31
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
}
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dd8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dea:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d108      	bne.n	8001e22 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e20:	e007      	b.n	8001e32 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	60da      	str	r2, [r3, #12]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d802      	bhi.n	8001e5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e001      	b.n	8001e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e5c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3b08      	subs	r3, #8
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40020407 	.word	0x40020407
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020820 	.word	0x40020820
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	40020880 	.word	0x40020880

08001ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2201      	movs	r2, #1
 8001eea:	409a      	lsls	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	1000823f 	.word	0x1000823f
 8001f00:	40020940 	.word	0x40020940

08001f04 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8001f2e:	bf00      	nop
  }

  return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e003      	b.n	8001f5a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f76:	e15a      	b.n	800222e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 814c 	beq.w	8002228 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d00b      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa4:	2b11      	cmp	r3, #17
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0xea>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b12      	cmp	r3, #18
 8002050:	d123      	bne.n	800209a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	6939      	ldr	r1, [r7, #16]
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a6 	beq.w	8002228 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020dc:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_GPIO_Init+0x2e4>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	4a5a      	ldr	r2, [pc, #360]	; (800224c <HAL_GPIO_Init+0x2e4>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6613      	str	r3, [r2, #96]	; 0x60
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_GPIO_Init+0x2e4>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800211e:	d01f      	beq.n	8002160 <HAL_GPIO_Init+0x1f8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d019      	beq.n	800215c <HAL_GPIO_Init+0x1f4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_GPIO_Init+0x2f0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_GPIO_Init+0x1f0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a4a      	ldr	r2, [pc, #296]	; (800225c <HAL_GPIO_Init+0x2f4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1ec>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a49      	ldr	r2, [pc, #292]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1e8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a48      	ldr	r2, [pc, #288]	; (8002264 <HAL_GPIO_Init+0x2fc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1e4>
 8002148:	2305      	movs	r3, #5
 800214a:	e00a      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 800214c:	2306      	movs	r3, #6
 800214e:	e008      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002150:	2304      	movs	r3, #4
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002154:	2303      	movs	r3, #3
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002160:	2300      	movs	r3, #0
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002172:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a4:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f ae9d 	bne.w	8001f78 <HAL_GPIO_Init+0x10>
  }
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48001000 	.word	0x48001000
 8002264:	48001400 	.word	0x48001400
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002288:	e002      	b.n	8002290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43d9      	mvns	r1, r3
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fa20 	bl	8000734 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d141      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d131      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002334:	4a41      	ldr	r2, [pc, #260]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2232      	movs	r2, #50	; 0x32
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	3301      	adds	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002352:	e002      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3b01      	subs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d102      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f2      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236e:	4b33      	ldr	r3, [pc, #204]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d158      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e057      	b.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002386:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002390:	e04d      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002398:	d141      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	d131      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ae:	4a23      	ldr	r2, [pc, #140]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2232      	movs	r2, #50	; 0x32
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023de:	e002      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d102      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f2      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d112      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e011      	b.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800241c:	e007      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40007000 	.word	0x40007000
 8002440:	20000014 	.word	0x20000014
 8002444:	431bde83 	.word	0x431bde83

08002448 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002456:	6093      	str	r3, [r2, #8]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40007000 	.word	0x40007000

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e308      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002486:	4ba3      	ldr	r3, [pc, #652]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002490:	4ba0      	ldr	r3, [pc, #640]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d102      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3e>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b99      	ldr	r3, [pc, #612]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e2e3      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a90      	ldr	r2, [pc, #576]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a87      	ldr	r2, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a83      	ldr	r2, [pc, #524]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fb82 	bl	8000c28 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fb7e 	bl	8000c28 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e2a8      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fb6e 	bl	8000c28 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fb6a 	bl	8000c28 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e294      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d075      	beq.n	800266a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002588:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d102      	bne.n	800259e <HAL_RCC_OscConfig+0x136>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_OscConfig+0x13c>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d11f      	bne.n	80025e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x154>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e267      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4952      	ldr	r1, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025d0:	4b51      	ldr	r3, [pc, #324]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fadb 	bl	8000b90 <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d043      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e253      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a48      	ldr	r2, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb16 	bl	8000c28 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fb12 	bl	8000c28 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e23c      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
 8002632:	e01a      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002634:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a36      	ldr	r2, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe faf2 	bl	8000c28 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7fe faee 	bl	8000c28 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e218      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1e0>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe facb 	bl	8000c28 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002696:	f7fe fac7 	bl	8000c28 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1f1      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ef      	beq.n	8002696 <HAL_RCC_OscConfig+0x22e>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe faae 	bl	8000c28 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe faaa 	bl	8000c28 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1d4      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ef      	bne.n	80026d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80ab 	beq.w	8002854 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x2b4>
 800270e:	2301      	movs	r3, #1
 8002710:	e005      	b.n	800271e <HAL_RCC_OscConfig+0x2b6>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	20000018 	.word	0x20000018
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4baf      	ldr	r3, [pc, #700]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4aae      	ldr	r2, [pc, #696]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4bac      	ldr	r3, [pc, #688]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4ba9      	ldr	r3, [pc, #676]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274a:	4ba6      	ldr	r3, [pc, #664]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4aa5      	ldr	r2, [pc, #660]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe fa67 	bl	8000c28 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe fa63 	bl	8000c28 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e18d      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	4b9c      	ldr	r3, [pc, #624]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_RCC_OscConfig+0x32e>
 8002784:	4b96      	ldr	r3, [pc, #600]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a95      	ldr	r2, [pc, #596]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002794:	e024      	b.n	80027e0 <HAL_RCC_OscConfig+0x378>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d110      	bne.n	80027c0 <HAL_RCC_OscConfig+0x358>
 800279e:	4b90      	ldr	r3, [pc, #576]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	4a8e      	ldr	r2, [pc, #568]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ae:	4b8c      	ldr	r3, [pc, #560]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027be:	e00f      	b.n	80027e0 <HAL_RCC_OscConfig+0x378>
 80027c0:	4b87      	ldr	r3, [pc, #540]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a86      	ldr	r2, [pc, #536]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d0:	4b83      	ldr	r3, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d016      	beq.n	8002816 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe fa1e 	bl	8000c28 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe fa1a 	bl	8000c28 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e142      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ed      	beq.n	80027f0 <HAL_RCC_OscConfig+0x388>
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe fa07 	bl	8000c28 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fa03 	bl	8000c28 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e12b      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ed      	bne.n	800281e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002842:	7ffb      	ldrb	r3, [r7, #31]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03c      	beq.n	80028da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002868:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800286a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800286e:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe f9d6 	bl	8000c28 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002880:	f7fe f9d2 	bl	8000c28 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0fc      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ef      	beq.n	8002880 <HAL_RCC_OscConfig+0x418>
 80028a0:	e01b      	b.n	80028da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a2:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a8:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe f9b9 	bl	8000c28 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ba:	f7fe f9b5 	bl	8000c28 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0df      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ef      	bne.n	80028ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80d3 	beq.w	8002a8a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	f000 808d 	beq.w	8002a0c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d15a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe f98f 	bl	8000c28 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe f98b 	bl	8000c28 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0b5      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_OscConfig+0x580>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6a11      	ldr	r1, [r2, #32]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293c:	3a01      	subs	r2, #1
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002946:	0212      	lsls	r2, r2, #8
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0552      	lsls	r2, r2, #21
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0652      	lsls	r2, r2, #25
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002966:	06d2      	lsls	r2, r2, #27
 8002968:	430a      	orrs	r2, r1
 800296a:	491d      	ldr	r1, [pc, #116]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe f94e 	bl	8000c28 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe f94a 	bl	8000c28 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e074      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x528>
 80029ae:	e06c      	b.n	8002a8a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe f926 	bl	8000c28 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	e00e      	b.n	80029fe <HAL_RCC_OscConfig+0x596>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe f91c 	bl	8000c28 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e046      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_OscConfig+0x62c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x584>
 8002a0a:	e03e      	b.n	8002a8a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e039      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCC_OscConfig+0x62c>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d12c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d123      	bne.n	8002a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d113      	bne.n	8002a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e11e      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d910      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 020f 	bic.w	r2, r3, #15
 8002ac6:	498c      	ldr	r1, [pc, #560]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b8a      	ldr	r3, [pc, #552]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e106      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d073      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d129      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af4:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0f4      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b04:	f000 f972 	bl	8002dec <RCC_GetSysClockFreqFromPLLSource>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_ClockConfig+0x268>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d93f      	bls.n	8002b92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d033      	beq.n	8002b92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12f      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	4a70      	ldr	r2, [pc, #448]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e024      	b.n	8002b92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0c6      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0be      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b70:	f000 f8ce 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4a61      	ldr	r2, [pc, #388]	; (8002d00 <HAL_RCC_ClockConfig+0x268>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d909      	bls.n	8002b92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4957      	ldr	r1, [pc, #348]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe f840 	bl	8000c28 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe f83c 	bl	8000c28 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e095      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b4e      	ldr	r3, [pc, #312]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a42      	ldr	r2, [pc, #264]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c04:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4936      	ldr	r1, [pc, #216]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d21d      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 020f 	bic.w	r2, r3, #15
 8002c50:	4929      	ldr	r1, [pc, #164]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c58:	f7fd ffe6 	bl	8000c28 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f7fd ffe2 	bl	8000c28 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e03b      	b.n	8002cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1ed      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4917      	ldr	r1, [pc, #92]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	490f      	ldr	r1, [pc, #60]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc2:	f000 f825 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_RCC_ClockConfig+0x264>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_RCC_ClockConfig+0x26c>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	fa21 f303 	lsr.w	r3, r1, r3
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x270>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd ff52 	bl	8000b90 <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	04c4b400 	.word	0x04c4b400
 8002d04:	08003660 	.word	0x08003660
 8002d08:	20000014 	.word	0x20000014
 8002d0c:	20000018 	.word	0x20000018

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e047      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e03e      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d136      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	0a12      	lsrs	r2, r2, #8
 8002d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	617b      	str	r3, [r7, #20]
      break;
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d88:	68d2      	ldr	r2, [r2, #12]
 8002d8a:	0a12      	lsrs	r2, r2, #8
 8002d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
      break;
 8002d96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0e5b      	lsrs	r3, r3, #25
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e001      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002db8:	693b      	ldr	r3, [r7, #16]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	016e3600 	.word	0x016e3600

08002dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000014 	.word	0x20000014

08002dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d10c      	bne.n	8002e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e1a:	68d2      	ldr	r2, [r2, #12]
 8002e1c:	0a12      	lsrs	r2, r2, #8
 8002e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
    break;
 8002e28:	e00c      	b.n	8002e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	0a12      	lsrs	r2, r2, #8
 8002e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]
    break;
 8002e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0e5b      	lsrs	r3, r3, #25
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e5e:	687b      	ldr	r3, [r7, #4]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	016e3600 	.word	0x016e3600
 8002e74:	00f42400 	.word	0x00f42400

08002e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e049      	b.n	8002f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fcf4 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 f9be 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e04c      	b.n	8002fda <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_TIM_Base_Start+0xc0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d01d      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_TIM_Base_Start+0xc4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_TIM_Base_Start+0xc8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_TIM_Base_Start+0xcc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <HAL_TIM_Base_Start+0xd0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_TIM_Base_Start+0xd4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_Base_Start+0x70>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_TIM_Base_Start+0xd8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d115      	bne.n	8002fc4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_Base_Start+0xdc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d015      	beq.n	8002fd6 <HAL_TIM_Base_Start+0xae>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d011      	beq.n	8002fd6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e008      	b.n	8002fd6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40013400 	.word	0x40013400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40015000 	.word	0x40015000
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	f241 1311 	movw	r3, #4369	; 0x1111
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10f      	bne.n	8003040 <HAL_TIM_Base_Stop+0x38>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	f244 4344 	movw	r3, #17476	; 0x4444
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_TIM_Base_Stop+0x38>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIM_ConfigClockSource+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e0d2      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x1be>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800308e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	f000 80a9 	beq.w	8003202 <HAL_TIM_ConfigClockSource+0x1aa>
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	d81a      	bhi.n	80030ec <HAL_TIM_ConfigClockSource+0x94>
 80030b6:	2b30      	cmp	r3, #48	; 0x30
 80030b8:	f000 809a 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d809      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x7c>
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	f000 8095 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f000 8092 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 808f 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030d2:	e097      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80030d4:	2b50      	cmp	r3, #80	; 0x50
 80030d6:	d05b      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0x138>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d802      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x8a>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d077      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030e0:	e090      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80030e2:	2b60      	cmp	r3, #96	; 0x60
 80030e4:	d064      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0x158>
 80030e6:	2b70      	cmp	r3, #112	; 0x70
 80030e8:	d028      	beq.n	800313c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80030ea:	e08b      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_TIM_ConfigClockSource+0x1c8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d07e      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 80030f2:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_TIM_ConfigClockSource+0x1c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d810      	bhi.n	800311a <HAL_TIM_ConfigClockSource+0xc2>
 80030f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fc:	d078      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003102:	d803      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0xb4>
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d02f      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800310a:	e07b      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800310c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003110:	d06e      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 8003112:	4a44      	ldr	r2, [pc, #272]	; (8003224 <HAL_TIM_ConfigClockSource+0x1cc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d06b      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003118:	e074      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800311a:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_TIM_ConfigClockSource+0x1d0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d067      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 8003120:	4a41      	ldr	r2, [pc, #260]	; (8003228 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d803      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0xd6>
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_TIM_ConfigClockSource+0x1d4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d061      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800312c:	e06a      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_TIM_ConfigClockSource+0x1d8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d05d      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
 8003134:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d05a      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800313a:	e063      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f000 f998 	bl	8003480 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800315e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
      break;
 8003168:	e04c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f000 f981 	bl	8003480 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318c:	609a      	str	r2, [r3, #8]
      break;
 800318e:	e039      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	461a      	mov	r2, r3
 800319e:	f000 f8f3 	bl	8003388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2150      	movs	r1, #80	; 0x50
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f94c 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 80031ae:	e029      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	461a      	mov	r2, r3
 80031be:	f000 f912 	bl	80033e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2160      	movs	r1, #96	; 0x60
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f93c 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 80031ce:	e019      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	461a      	mov	r2, r3
 80031de:	f000 f8d3 	bl	8003388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f92c 	bl	8003446 <TIM_ITRx_SetConfig>
      break;
 80031ee:	e009      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 f923 	bl	8003446 <TIM_ITRx_SetConfig>
        break;
 8003200:	e000      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8003202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00100030 	.word	0x00100030
 8003224:	00100020 	.word	0x00100020
 8003228:	00100050 	.word	0x00100050
 800322c:	00100040 	.word	0x00100040
 8003230:	00100060 	.word	0x00100060
 8003234:	00100070 	.word	0x00100070

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a46      	ldr	r2, [pc, #280]	; (8003364 <TIM_Base_SetConfig+0x12c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d017      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <TIM_Base_SetConfig+0x130>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a42      	ldr	r2, [pc, #264]	; (800336c <TIM_Base_SetConfig+0x134>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <TIM_Base_SetConfig+0x138>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <TIM_Base_SetConfig+0x13c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x48>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3f      	ldr	r2, [pc, #252]	; (8003378 <TIM_Base_SetConfig+0x140>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a33      	ldr	r2, [pc, #204]	; (8003364 <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d023      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d01f      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a30      	ldr	r2, [pc, #192]	; (8003368 <TIM_Base_SetConfig+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01b      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2f      	ldr	r2, [pc, #188]	; (800336c <TIM_Base_SetConfig+0x134>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2e      	ldr	r2, [pc, #184]	; (8003370 <TIM_Base_SetConfig+0x138>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <TIM_Base_SetConfig+0x13c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2d      	ldr	r2, [pc, #180]	; (800337c <TIM_Base_SetConfig+0x144>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <TIM_Base_SetConfig+0x148>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <TIM_Base_SetConfig+0x14c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0xaa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <TIM_Base_SetConfig+0x140>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <TIM_Base_SetConfig+0x12c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_Base_SetConfig+0x13c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <TIM_Base_SetConfig+0x144>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <TIM_Base_SetConfig+0x148>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <TIM_Base_SetConfig+0x14c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x110>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <TIM_Base_SetConfig+0x140>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40015000 	.word	0x40015000
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0201 	bic.w	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 030a 	bic.w	r3, r3, #10
 80033c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f023 0210 	bic.w	r2, r3, #16
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	031b      	lsls	r3, r3, #12
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	f043 0307 	orr.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e074      	b.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a33      	ldr	r2, [pc, #204]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800351c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d022      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d01d      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40015000 	.word	0x40015000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40014000 	.word	0x40014000

080035ec <__libc_init_array>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4e0d      	ldr	r6, [pc, #52]	; (8003624 <__libc_init_array+0x38>)
 80035f0:	4c0d      	ldr	r4, [pc, #52]	; (8003628 <__libc_init_array+0x3c>)
 80035f2:	1ba4      	subs	r4, r4, r6
 80035f4:	10a4      	asrs	r4, r4, #2
 80035f6:	2500      	movs	r5, #0
 80035f8:	42a5      	cmp	r5, r4
 80035fa:	d109      	bne.n	8003610 <__libc_init_array+0x24>
 80035fc:	4e0b      	ldr	r6, [pc, #44]	; (800362c <__libc_init_array+0x40>)
 80035fe:	4c0c      	ldr	r4, [pc, #48]	; (8003630 <__libc_init_array+0x44>)
 8003600:	f000 f820 	bl	8003644 <_init>
 8003604:	1ba4      	subs	r4, r4, r6
 8003606:	10a4      	asrs	r4, r4, #2
 8003608:	2500      	movs	r5, #0
 800360a:	42a5      	cmp	r5, r4
 800360c:	d105      	bne.n	800361a <__libc_init_array+0x2e>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003614:	4798      	blx	r3
 8003616:	3501      	adds	r5, #1
 8003618:	e7ee      	b.n	80035f8 <__libc_init_array+0xc>
 800361a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800361e:	4798      	blx	r3
 8003620:	3501      	adds	r5, #1
 8003622:	e7f2      	b.n	800360a <__libc_init_array+0x1e>
 8003624:	08003670 	.word	0x08003670
 8003628:	08003670 	.word	0x08003670
 800362c:	08003670 	.word	0x08003670
 8003630:	08003674 	.word	0x08003674

08003634 <memset>:
 8003634:	4402      	add	r2, r0
 8003636:	4603      	mov	r3, r0
 8003638:	4293      	cmp	r3, r2
 800363a:	d100      	bne.n	800363e <memset+0xa>
 800363c:	4770      	bx	lr
 800363e:	f803 1b01 	strb.w	r1, [r3], #1
 8003642:	e7f9      	b.n	8003638 <memset+0x4>

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
