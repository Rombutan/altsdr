
altsdr-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e8  080031e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003204  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003204  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af91  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001889  00000000  00000000  0002afcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d4c  00000000  00000000  0002db50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007eba  00000000  00000000  0005189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5345  00000000  00000000  00059756  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ea9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  0013eb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003190 	.word	0x08003190

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003190 	.word	0x08003190

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
static void MX_LPUART1_UART_Init(void);
static void MX_DAC1_Init(void);
static void MX_DAC2_Init(void);

int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	uint32_t DAC_OUT = 4000;
 800051e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000522:	603b      	str	r3, [r7, #0]
	uint8_t i = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	71fb      	strb	r3, [r7, #7]

  HAL_Init();
 8000528:	f000 faf9 	bl	8000b1e <HAL_Init>

  SystemClock_Config();
 800052c:	f000 f81a 	bl	8000564 <SystemClock_Config>

  MX_GPIO_Init();
 8000530:	f000 f93e 	bl	80007b0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000534:	f000 f8f2 	bl	800071c <MX_LPUART1_UART_Init>
  MX_DAC1_Init();
 8000538:	f000 f87c 	bl	8000634 <MX_DAC1_Init>
  MX_DAC2_Init();
 800053c:	f000 f8b4 	bl	80006a8 <MX_DAC2_Init>

  while (1)
  {
	i = i + 1;
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	3301      	adds	r3, #1
 8000544:	71fb      	strb	r3, [r7, #7]
  	DAC1->DHR12R1 = DAC_OUT;
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <main+0x48>)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	6093      	str	r3, [r2, #8]
  	if(i == 4)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b04      	cmp	r3, #4
 8000550:	d101      	bne.n	8000556 <main+0x3e>
  	{
          i = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
      }
  	HAL_Delay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fb52 	bl	8000c00 <HAL_Delay>
	i = i + 1;
 800055c:	e7f0      	b.n	8000540 <main+0x28>
 800055e:	bf00      	nop
 8000560:	50000800 	.word	0x50000800

08000564 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0a8      	sub	sp, #160	; 0xa0
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fe04 	bl	8003180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2254      	movs	r2, #84	; 0x54
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fdf6 	bl	8003180 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fff1 	bl	800157c <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	; 0x55
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 f884 	bl	80016e4 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e2:	f000 f955 	bl	8000890 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fb87 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800060c:	f000 f940 	bl	8000890 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000610:	2320      	movs	r3, #32
 8000612:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fd96 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f000 f933 	bl	8000890 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	37a0      	adds	r7, #160	; 0xa0
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_DAC1_Init>:

static void MX_DAC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2230      	movs	r2, #48	; 0x30
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fd9d 	bl	8003180 <memset>

  hdac1.Instance = DAC1;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_DAC1_Init+0x6c>)
 8000648:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <MX_DAC1_Init+0x70>)
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800064c:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_DAC1_Init+0x6c>)
 800064e:	f000 fc08 	bl	8000e62 <HAL_DAC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000658:	f000 f91a 	bl	8000890 <Error_Handler>
  }

  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800065c:	2302      	movs	r3, #2
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_DAC1_Init+0x6c>)
 8000688:	f000 fc0e 	bl	8000ea8 <HAL_DAC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000692:	f000 f8fd 	bl	8000890 <Error_Handler>
  }

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	50000800 	.word	0x50000800

080006a8 <MX_DAC2_Init>:

static void MX_DAC2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2230      	movs	r2, #48	; 0x30
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fd63 	bl	8003180 <memset>

  hdac2.Instance = DAC2;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_DAC2_Init+0x70>)
 80006be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006c2:	f000 fbce 	bl	8000e62 <HAL_DAC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80006cc:	f000 f8e0 	bl	8000890 <Error_Handler>
  }

  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80006d0:	2302      	movs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006fc:	f000 fbd4 	bl	8000ea8 <HAL_DAC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000706:	f000 f8c3 	bl	8000890 <Error_Handler>
  }

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000028 	.word	0x20000028
 8000718:	50000c00 	.word	0x50000c00

0800071c <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MX_LPUART1_UART_Init+0x90>)
 8000724:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	f001 ff40 	bl	80025e4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f891 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	f002 fbfc 	bl	8002f6e <HAL_UARTEx_SetTxFifoThreshold>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800077c:	f000 f888 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	f002 fc31 	bl	8002fea <HAL_UARTEx_SetRxFifoThreshold>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800078e:	f000 f87f 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f002 fbb2 	bl	8002efc <HAL_UARTEx_DisableFifoMode>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800079e:	f000 f877 	bl	8000890 <Error_Handler>
  }

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000050 	.word	0x20000050
 80007ac:	40008000 	.word	0x40008000

080007b0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_GPIO_Init+0xd4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 fe69 	bl	8001504 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_GPIO_Init+0xd8>)
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_GPIO_Init+0xdc>)
 8000848:	f000 fcda 	bl	8001200 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fccb 	bl	8001200 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2028      	movs	r0, #40	; 0x28
 8000870:	f000 fac3 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000874:	2028      	movs	r0, #40	; 0x28
 8000876:	f000 fada 	bl	8000e2e <HAL_NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	10110000 	.word	0x10110000
 800088c:	48000800 	.word	0x48000800

08000890 <Error_Handler>:

void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i

  __disable_irq();
  while (1)
 8000896:	e7fe      	b.n	8000896 <Error_Handler+0x6>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ce:	f000 fef9 	bl	80016c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <HAL_DAC_MspInit+0xcc>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d125      	bne.n	800094e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000932:	2310      	movs	r3, #16
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fc5a 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800094c:	e029      	b.n	80009a2 <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_DAC_MspInit+0xd4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d124      	bne.n	80009a2 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_DAC_MspInit+0xd0>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fc2f 	bl	8001200 <HAL_GPIO_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	50000800 	.word	0x50000800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000c00 	.word	0x50000c00

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x7c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d128      	bne.n	8000a2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0x80>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fbea 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40008000 	.word	0x40008000
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f89c 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a98:	f000 fd4c 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SystemInit+0x28>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SystemInit+0x28>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SystemInit+0x28>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0b      	ldr	r4, [pc, #44]	; (8000b18 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af6:	f7ff ffd3 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 fb1d 	bl	8003138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f7ff fd0b 	bl	8000518 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   r0, =_estack
 8000b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b10:	080031f8 	.word	0x080031f8
  ldr r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b18:	200000e0 	.word	0x200000e0

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>

08000b1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f95b 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f80e 	bl	8000b50 <HAL_InitTick>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	e001      	b.n	8000b44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b40:	f7ff feaa 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b44:	79fb      	ldrb	r3, [r7, #7]

}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_InitTick+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d022      	beq.n	8000baa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_InitTick+0x6c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_InitTick+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f966 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10f      	bne.n	8000ba4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	d809      	bhi.n	8000b9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b92:	f000 f932 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_InitTick+0x70>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e004      	b.n	8000bae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200000dc 	.word	0x200000dc
 8000be4:	20000008 	.word	0x20000008

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200000dc 	.word	0x200000dc

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c18:	d004      	beq.n	8000c24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c24:	bf00      	nop
 8000c26:	f7ff ffdf 	bl	8000be8 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d8f7      	bhi.n	8000c26 <HAL_Delay+0x26>
  {
  }
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff40 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff33 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa4 	bl	8000da0 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e014      	b.n	8000e9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fd2b 	bl	80008e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_DAC_ConfigChannel+0x1c>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e194      	b.n	80011ee <HAL_DAC_ConfigChannel+0x346>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d174      	bne.n	8000fc2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d137      	bne.n	8000f4e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fe83 	bl	8000be8 <HAL_GetTick>
 8000ee2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ee4:	e011      	b.n	8000f0a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ee6:	f7ff fe7f 	bl	8000be8 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d90a      	bls.n	8000f0a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f043 0208 	orr.w	r2, r3, #8
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2203      	movs	r2, #3
 8000f04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e171      	b.n	80011ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e6      	bne.n	8000ee6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fe71 	bl	8000c00 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
 8000f28:	e01e      	b.n	8000f68 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f2a:	f7ff fe5d 	bl	8000be8 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d90a      	bls.n	8000f4e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	f043 0208 	orr.w	r2, r3, #8
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2203      	movs	r2, #3
 8000f48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e14f      	b.n	80011ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dbe8      	blt.n	8000f2a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff fe51 	bl	8000c00 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	ea02 0103 	and.w	r1, r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	ea02 0103 	and.w	r1, r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d11d      	bne.n	8001006 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	221f      	movs	r2, #31
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2207      	movs	r2, #7
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101e:	4013      	ands	r3, r2
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	e011      	b.n	8001058 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001040:	2301      	movs	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	e008      	b.n	8001058 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800104e:	2301      	movs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e001      	b.n	8001058 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	4313      	orrs	r3, r2
 8001062:	6a3a      	ldr	r2, [r7, #32]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107a:	4013      	ands	r3, r2
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_DAC_ConfigChannel+0x1e4>
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	e000      	b.n	800108e <HAL_DAC_ConfigChannel+0x1e6>
 800108c:	2300      	movs	r3, #0
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a6:	4013      	ands	r3, r2
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_DAC_ConfigChannel+0x210>
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	e000      	b.n	80010ba <HAL_DAC_ConfigChannel+0x212>
 80010b8:	2300      	movs	r3, #0
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d114      	bne.n	80010fa <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80010d0:	f000 ffbe 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 80010d4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <HAL_DAC_ConfigChannel+0x350>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d904      	bls.n	80010e8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e00d      	b.n	8001104 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4a44      	ldr	r2, [pc, #272]	; (80011fc <HAL_DAC_ConfigChannel+0x354>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d909      	bls.n	8001104 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	e004      	b.n	8001104 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001100:	4313      	orrs	r3, r2
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	4313      	orrs	r3, r2
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	4013      	ands	r3, r2
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116e:	4313      	orrs	r3, r2
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001178:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	22c0      	movs	r2, #192	; 0xc0
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43da      	mvns	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	ea02 0103 	and.w	r1, r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	09896800 	.word	0x09896800
 80011fc:	04c4b400 	.word	0x04c4b400

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120e:	e15a      	b.n	80014c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 814c 	beq.w	80014c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00b      	beq.n	8001248 <HAL_GPIO_Init+0x48>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	2b11      	cmp	r3, #17
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0xea>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d123      	bne.n	8001332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	6939      	ldr	r1, [r7, #16]
 800132e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0203 	and.w	r2, r3, #3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80a6 	beq.w	80014c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_GPIO_Init+0x2e4>)
 8001376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001378:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_GPIO_Init+0x2e4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6613      	str	r3, [r2, #96]	; 0x60
 8001380:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <HAL_GPIO_Init+0x2e4>)
 8001382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138c:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b6:	d01f      	beq.n	80013f8 <HAL_GPIO_Init+0x1f8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_GPIO_Init+0x2ec>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d019      	beq.n	80013f4 <HAL_GPIO_Init+0x1f4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_GPIO_Init+0x2f0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_GPIO_Init+0x1f0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_GPIO_Init+0x2f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1ec>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <HAL_GPIO_Init+0x2f8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1e8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_GPIO_Init+0x2fc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013e0:	2305      	movs	r3, #5
 80013e2:	e00a      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013e4:	2306      	movs	r3, #6
 80013e6:	e008      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013ec:	2303      	movs	r3, #3
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013f8:	2300      	movs	r3, #0
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140a:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_GPIO_Init+0x300>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800143c:	4a30      	ldr	r2, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x300>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x300>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001466:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x300>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_GPIO_Init+0x300>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x300>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x300>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_GPIO_Init+0x300>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f ae9d 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001000 	.word	0x48001000
 80014fc:	48001400 	.word	0x48001400
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f806 	bl	8001564 <HAL_GPIO_EXTI_Callback>
  }
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d141      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d131      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159e:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b0:	4a41      	ldr	r2, [pc, #260]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2232      	movs	r2, #50	; 0x32
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a3f      	ldr	r2, [pc, #252]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9b      	lsrs	r3, r3, #18
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ce:	e002      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e2:	d102      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f2      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ea:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f6:	d158      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e057      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001602:	4a2d      	ldr	r2, [pc, #180]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800160c:	e04d      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001614:	d141      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001622:	d131      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162a:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165a:	e002      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d102      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001682:	d112      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e011      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001698:	e007      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40007000 	.word	0x40007000
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6093      	str	r3, [r2, #8]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e308      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d075      	beq.n	80017ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4ba3      	ldr	r3, [pc, #652]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x3e>
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x44>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d10b      	bne.n	8001740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	4b99      	ldr	r3, [pc, #612]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d05b      	beq.n	80017ec <HAL_RCC_OscConfig+0x108>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d157      	bne.n	80017ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e2e3      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x74>
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x98>
 8001762:	4b8b      	ldr	r3, [pc, #556]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a87      	ldr	r2, [pc, #540]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a83      	ldr	r2, [pc, #524]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a80      	ldr	r2, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fa24 	bl	8000be8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa20 	bl	8000be8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2a8      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xc0>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa10 	bl	8000be8 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fa0c 	bl	8000be8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e294      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017de:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0xe8>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d075      	beq.n	80018e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001804:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d102      	bne.n	800181a <HAL_RCC_OscConfig+0x136>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d002      	beq.n	8001820 <HAL_RCC_OscConfig+0x13c>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d11f      	bne.n	8001860 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x154>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e267      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	4952      	ldr	r1, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_RCC_OscConfig+0x2b0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f97d 	bl	8000b50 <HAL_InitTick>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d043      	beq.n	80018e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e253      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f9b8 	bl	8000be8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff f9b4 	bl	8000be8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e23c      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	061b      	lsls	r3, r3, #24
 80018a8:	4939      	ldr	r1, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e01a      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a36      	ldr	r2, [pc, #216]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff f994 	bl	8000be8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff f990 	bl	8000be8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e218      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1e0>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03c      	beq.n	800196c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01c      	beq.n	8001934 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff f96d 	bl	8000be8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff f969 	bl	8000be8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1f1      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ef      	beq.n	8001912 <HAL_RCC_OscConfig+0x22e>
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f950 	bl	8000be8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff f94c 	bl	8000be8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1d4      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ef      	bne.n	800194c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ab 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x2b4>
 800198a:	2301      	movs	r3, #1
 800198c:	e005      	b.n	800199a <HAL_RCC_OscConfig+0x2b6>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	20000004 	.word	0x20000004
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00d      	beq.n	80019ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4baf      	ldr	r3, [pc, #700]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4aae      	ldr	r2, [pc, #696]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
 80019aa:	4bac      	ldr	r3, [pc, #688]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ba:	4ba9      	ldr	r3, [pc, #676]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c6:	4ba6      	ldr	r3, [pc, #664]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4aa5      	ldr	r2, [pc, #660]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f909 	bl	8000be8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff f905 	bl	8000be8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e18d      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ec:	4b9c      	ldr	r3, [pc, #624]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x32e>
 8001a00:	4b96      	ldr	r3, [pc, #600]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	4a95      	ldr	r2, [pc, #596]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a10:	e024      	b.n	8001a5c <HAL_RCC_OscConfig+0x378>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d110      	bne.n	8001a3c <HAL_RCC_OscConfig+0x358>
 8001a1a:	4b90      	ldr	r3, [pc, #576]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2a:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_OscConfig+0x378>
 8001a3c:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a86      	ldr	r2, [pc, #536]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4c:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f8c0 	bl	8000be8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f8bc 	bl	8000be8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e142      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x388>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f8a9 	bl	8000be8 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f8a5 	bl	8000be8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e12b      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ed      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aea:	4a5c      	ldr	r2, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f878 	bl	8000be8 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afc:	f7ff f874 	bl	8000be8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0fc      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0e:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ef      	beq.n	8001afc <HAL_RCC_OscConfig+0x418>
 8001b1c:	e01b      	b.n	8001b56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f85b 	bl	8000be8 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b36:	f7ff f857 	bl	8000be8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0df      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80d3 	beq.w	8001d06 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	f000 808d 	beq.w	8001c88 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d15a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f831 	bl	8000be8 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff f82d 	bl	8000be8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0b5      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x580>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6a11      	ldr	r1, [r2, #32]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb8:	3a01      	subs	r2, #1
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bc2:	0212      	lsls	r2, r2, #8
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bca:	0852      	lsrs	r2, r2, #1
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	0552      	lsls	r2, r2, #21
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd6:	0852      	lsrs	r2, r2, #1
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	0652      	lsls	r2, r2, #25
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001be2:	06d2      	lsls	r2, r2, #27
 8001be4:	430a      	orrs	r2, r1
 8001be6:	491d      	ldr	r1, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe fff0 	bl	8000be8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe ffec 	bl	8000be8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e074      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x528>
 8001c2a:	e06c      	b.n	8001d06 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7fe ffc8 	bl	8000be8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	e00e      	b.n	8001c7a <HAL_RCC_OscConfig+0x596>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe ffbe 	bl	8000be8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e046      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_RCC_OscConfig+0x62c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x584>
 8001c86:	e03e      	b.n	8001d06 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e039      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_OscConfig+0x62c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d12c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d123      	bne.n	8001d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d11b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d113      	bne.n	8001d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e11e      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b91      	ldr	r3, [pc, #580]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	498c      	ldr	r1, [pc, #560]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e106      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d073      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d129      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d70:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0f4      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d80:	f000 f99e 	bl	80020c0 <RCC_GetSysClockFreqFromPLLSource>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4a7c      	ldr	r2, [pc, #496]	; (8001f7c <HAL_RCC_ClockConfig+0x268>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d93f      	bls.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d8e:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d033      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12f      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db6:	4a70      	ldr	r2, [pc, #448]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e024      	b.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0c6      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0be      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dec:	f000 f8ce 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4a61      	ldr	r2, [pc, #388]	; (8001f7c <HAL_RCC_ClockConfig+0x268>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d909      	bls.n	8001e0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e02:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4957      	ldr	r1, [pc, #348]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e20:	f7fe fee2 	bl	8000be8 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe fede 	bl	8000be8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e095      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d023      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a42      	ldr	r2, [pc, #264]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e80:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e88:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b80      	cmp	r3, #128	; 0x80
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d21d      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 020f 	bic.w	r2, r3, #15
 8001ecc:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ed4:	f7fe fe88 	bl	8000be8 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe fe84 	bl	8000be8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e03b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1ed      	bne.n	8001edc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4917      	ldr	r1, [pc, #92]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490f      	ldr	r1, [pc, #60]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f3e:	f000 f825 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_RCC_ClockConfig+0x26c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	fa21 f303 	lsr.w	r3, r1, r3
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x270>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fdf4 	bl	8000b50 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	04c4b400 	.word	0x04c4b400
 8001f80:	080031b8 	.word	0x080031b8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e047      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e03e      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d136      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fea:	68d2      	ldr	r2, [r2, #12]
 8001fec:	0a12      	lsrs	r2, r2, #8
 8001fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e00c      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	0a12      	lsrs	r2, r2, #8
 8002008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
      break;
 8002012:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0e5b      	lsrs	r3, r3, #25
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e001      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002034:	693b      	ldr	r3, [r7, #16]
}
 8002036:	4618      	mov	r0, r3
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	00f42400 	.word	0x00f42400
 800204c:	016e3600 	.word	0x016e3600

08002050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4601      	mov	r1, r0
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	080031c8 	.word	0x080031c8

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002098:	f7ff ffda 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800209c:	4601      	mov	r1, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	080031c8 	.word	0x080031c8

080020c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d10c      	bne.n	80020fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	0a12      	lsrs	r2, r2, #8
 80020f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
    break;
 80020fc:	e00c      	b.n	8002118 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	0a12      	lsrs	r2, r2, #8
 800210c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    break;
 8002116:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0e5b      	lsrs	r3, r3, #25
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002132:	687b      	ldr	r3, [r7, #4]
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	016e3600 	.word	0x016e3600
 8002148:	00f42400 	.word	0x00f42400

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002154:	2300      	movs	r3, #0
 8002156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002158:	2300      	movs	r3, #0
 800215a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8098 	beq.w	800229a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	4a3f      	ldr	r2, [pc, #252]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a39      	ldr	r2, [pc, #228]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a2:	f7fe fd21 	bl	8000be8 <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a8:	e009      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe fd1d 	bl	8000be8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d902      	bls.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	74fb      	strb	r3, [r7, #19]
        break;
 80021bc:	e005      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ef      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d159      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01e      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d019      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a1b      	ldr	r2, [pc, #108]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fcdd 	bl	8000be8 <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002230:	e00b      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fcd9 	bl	8000be8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d902      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	74fb      	strb	r3, [r7, #19]
            break;
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ec      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002274:	e008      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
 800227a:	e005      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002288:	7c7b      	ldrb	r3, [r7, #17]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4baf      	ldr	r3, [pc, #700]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	4aae      	ldr	r2, [pc, #696]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a6:	4ba9      	ldr	r3, [pc, #676]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f023 0203 	bic.w	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	49a5      	ldr	r1, [pc, #660]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c8:	4ba0      	ldr	r3, [pc, #640]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 020c 	bic.w	r2, r3, #12
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	499d      	ldr	r1, [pc, #628]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ea:	4b98      	ldr	r3, [pc, #608]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4994      	ldr	r1, [pc, #592]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800230c:	4b8f      	ldr	r3, [pc, #572]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	498c      	ldr	r1, [pc, #560]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800232e:	4b87      	ldr	r3, [pc, #540]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4983      	ldr	r1, [pc, #524]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002350:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	497b      	ldr	r1, [pc, #492]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4972      	ldr	r1, [pc, #456]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	496a      	ldr	r1, [pc, #424]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	4961      	ldr	r1, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4959      	ldr	r1, [pc, #356]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	4950      	ldr	r1, [pc, #320]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4948      	ldr	r1, [pc, #288]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002446:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	493a      	ldr	r1, [pc, #232]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a34      	ldr	r2, [pc, #208]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800247a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	492c      	ldr	r1, [pc, #176]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	491e      	ldr	r1, [pc, #120]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4910      	ldr	r1, [pc, #64]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4902      	ldr	r1, [pc, #8]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800254a:	e001      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800254c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002558:	d105      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d015      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	4917      	ldr	r1, [pc, #92]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002590:	d105      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80025ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	4909      	ldr	r1, [pc, #36]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c8:	d105      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80025d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe f9d5 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f82c 	bl	8002684 <UART_SetConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 faf2 	bl	8002c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb79 	bl	8002d6c <UART_CheckIdleState>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4bb1      	ldr	r3, [pc, #708]	; (8002980 <UART_SetConfig+0x2fc>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	69f9      	ldr	r1, [r7, #28]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4aa6      	ldr	r2, [pc, #664]	; (8002984 <UART_SetConfig+0x300>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002702:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	69f9      	ldr	r1, [r7, #28]
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f023 010f 	bic.w	r1, r3, #15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a97      	ldr	r2, [pc, #604]	; (8002988 <UART_SetConfig+0x304>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d121      	bne.n	8002774 <UART_SetConfig+0xf0>
 8002730:	4b96      	ldr	r3, [pc, #600]	; (800298c <UART_SetConfig+0x308>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d816      	bhi.n	800276c <UART_SetConfig+0xe8>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <UART_SetConfig+0xc0>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	0800275b 	.word	0x0800275b
 8002750:	08002767 	.word	0x08002767
 8002754:	2301      	movs	r3, #1
 8002756:	76fb      	strb	r3, [r7, #27]
 8002758:	e0e8      	b.n	800292c <UART_SetConfig+0x2a8>
 800275a:	2302      	movs	r3, #2
 800275c:	76fb      	strb	r3, [r7, #27]
 800275e:	e0e5      	b.n	800292c <UART_SetConfig+0x2a8>
 8002760:	2304      	movs	r3, #4
 8002762:	76fb      	strb	r3, [r7, #27]
 8002764:	e0e2      	b.n	800292c <UART_SetConfig+0x2a8>
 8002766:	2308      	movs	r3, #8
 8002768:	76fb      	strb	r3, [r7, #27]
 800276a:	e0df      	b.n	800292c <UART_SetConfig+0x2a8>
 800276c:	2310      	movs	r3, #16
 800276e:	76fb      	strb	r3, [r7, #27]
 8002770:	bf00      	nop
 8002772:	e0db      	b.n	800292c <UART_SetConfig+0x2a8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a85      	ldr	r2, [pc, #532]	; (8002990 <UART_SetConfig+0x30c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d134      	bne.n	80027e8 <UART_SetConfig+0x164>
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <UART_SetConfig+0x308>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d829      	bhi.n	80027e0 <UART_SetConfig+0x15c>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <UART_SetConfig+0x110>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027c9 	.word	0x080027c9
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027e1 	.word	0x080027e1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027d5 	.word	0x080027d5
 80027a8:	080027e1 	.word	0x080027e1
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	080027e1 	.word	0x080027e1
 80027b4:	080027cf 	.word	0x080027cf
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	080027db 	.word	0x080027db
 80027c8:	2300      	movs	r3, #0
 80027ca:	76fb      	strb	r3, [r7, #27]
 80027cc:	e0ae      	b.n	800292c <UART_SetConfig+0x2a8>
 80027ce:	2302      	movs	r3, #2
 80027d0:	76fb      	strb	r3, [r7, #27]
 80027d2:	e0ab      	b.n	800292c <UART_SetConfig+0x2a8>
 80027d4:	2304      	movs	r3, #4
 80027d6:	76fb      	strb	r3, [r7, #27]
 80027d8:	e0a8      	b.n	800292c <UART_SetConfig+0x2a8>
 80027da:	2308      	movs	r3, #8
 80027dc:	76fb      	strb	r3, [r7, #27]
 80027de:	e0a5      	b.n	800292c <UART_SetConfig+0x2a8>
 80027e0:	2310      	movs	r3, #16
 80027e2:	76fb      	strb	r3, [r7, #27]
 80027e4:	bf00      	nop
 80027e6:	e0a1      	b.n	800292c <UART_SetConfig+0x2a8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a69      	ldr	r2, [pc, #420]	; (8002994 <UART_SetConfig+0x310>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d120      	bne.n	8002834 <UART_SetConfig+0x1b0>
 80027f2:	4b66      	ldr	r3, [pc, #408]	; (800298c <UART_SetConfig+0x308>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d00f      	beq.n	8002820 <UART_SetConfig+0x19c>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d802      	bhi.n	800280a <UART_SetConfig+0x186>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <UART_SetConfig+0x190>
 8002808:	e010      	b.n	800282c <UART_SetConfig+0x1a8>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d005      	beq.n	800281a <UART_SetConfig+0x196>
 800280e:	2b30      	cmp	r3, #48	; 0x30
 8002810:	d009      	beq.n	8002826 <UART_SetConfig+0x1a2>
 8002812:	e00b      	b.n	800282c <UART_SetConfig+0x1a8>
 8002814:	2300      	movs	r3, #0
 8002816:	76fb      	strb	r3, [r7, #27]
 8002818:	e088      	b.n	800292c <UART_SetConfig+0x2a8>
 800281a:	2302      	movs	r3, #2
 800281c:	76fb      	strb	r3, [r7, #27]
 800281e:	e085      	b.n	800292c <UART_SetConfig+0x2a8>
 8002820:	2304      	movs	r3, #4
 8002822:	76fb      	strb	r3, [r7, #27]
 8002824:	e082      	b.n	800292c <UART_SetConfig+0x2a8>
 8002826:	2308      	movs	r3, #8
 8002828:	76fb      	strb	r3, [r7, #27]
 800282a:	e07f      	b.n	800292c <UART_SetConfig+0x2a8>
 800282c:	2310      	movs	r3, #16
 800282e:	76fb      	strb	r3, [r7, #27]
 8002830:	bf00      	nop
 8002832:	e07b      	b.n	800292c <UART_SetConfig+0x2a8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a57      	ldr	r2, [pc, #348]	; (8002998 <UART_SetConfig+0x314>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d120      	bne.n	8002880 <UART_SetConfig+0x1fc>
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <UART_SetConfig+0x308>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d00f      	beq.n	800286c <UART_SetConfig+0x1e8>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d802      	bhi.n	8002856 <UART_SetConfig+0x1d2>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <UART_SetConfig+0x1dc>
 8002854:	e010      	b.n	8002878 <UART_SetConfig+0x1f4>
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d005      	beq.n	8002866 <UART_SetConfig+0x1e2>
 800285a:	2bc0      	cmp	r3, #192	; 0xc0
 800285c:	d009      	beq.n	8002872 <UART_SetConfig+0x1ee>
 800285e:	e00b      	b.n	8002878 <UART_SetConfig+0x1f4>
 8002860:	2300      	movs	r3, #0
 8002862:	76fb      	strb	r3, [r7, #27]
 8002864:	e062      	b.n	800292c <UART_SetConfig+0x2a8>
 8002866:	2302      	movs	r3, #2
 8002868:	76fb      	strb	r3, [r7, #27]
 800286a:	e05f      	b.n	800292c <UART_SetConfig+0x2a8>
 800286c:	2304      	movs	r3, #4
 800286e:	76fb      	strb	r3, [r7, #27]
 8002870:	e05c      	b.n	800292c <UART_SetConfig+0x2a8>
 8002872:	2308      	movs	r3, #8
 8002874:	76fb      	strb	r3, [r7, #27]
 8002876:	e059      	b.n	800292c <UART_SetConfig+0x2a8>
 8002878:	2310      	movs	r3, #16
 800287a:	76fb      	strb	r3, [r7, #27]
 800287c:	bf00      	nop
 800287e:	e055      	b.n	800292c <UART_SetConfig+0x2a8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a45      	ldr	r2, [pc, #276]	; (800299c <UART_SetConfig+0x318>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d124      	bne.n	80028d4 <UART_SetConfig+0x250>
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <UART_SetConfig+0x308>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002898:	d012      	beq.n	80028c0 <UART_SetConfig+0x23c>
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d802      	bhi.n	80028a6 <UART_SetConfig+0x222>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <UART_SetConfig+0x230>
 80028a4:	e012      	b.n	80028cc <UART_SetConfig+0x248>
 80028a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028aa:	d006      	beq.n	80028ba <UART_SetConfig+0x236>
 80028ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b0:	d009      	beq.n	80028c6 <UART_SetConfig+0x242>
 80028b2:	e00b      	b.n	80028cc <UART_SetConfig+0x248>
 80028b4:	2300      	movs	r3, #0
 80028b6:	76fb      	strb	r3, [r7, #27]
 80028b8:	e038      	b.n	800292c <UART_SetConfig+0x2a8>
 80028ba:	2302      	movs	r3, #2
 80028bc:	76fb      	strb	r3, [r7, #27]
 80028be:	e035      	b.n	800292c <UART_SetConfig+0x2a8>
 80028c0:	2304      	movs	r3, #4
 80028c2:	76fb      	strb	r3, [r7, #27]
 80028c4:	e032      	b.n	800292c <UART_SetConfig+0x2a8>
 80028c6:	2308      	movs	r3, #8
 80028c8:	76fb      	strb	r3, [r7, #27]
 80028ca:	e02f      	b.n	800292c <UART_SetConfig+0x2a8>
 80028cc:	2310      	movs	r3, #16
 80028ce:	76fb      	strb	r3, [r7, #27]
 80028d0:	bf00      	nop
 80028d2:	e02b      	b.n	800292c <UART_SetConfig+0x2a8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <UART_SetConfig+0x300>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d124      	bne.n	8002928 <UART_SetConfig+0x2a4>
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <UART_SetConfig+0x308>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d012      	beq.n	8002914 <UART_SetConfig+0x290>
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d802      	bhi.n	80028fa <UART_SetConfig+0x276>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <UART_SetConfig+0x284>
 80028f8:	e012      	b.n	8002920 <UART_SetConfig+0x29c>
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d006      	beq.n	800290e <UART_SetConfig+0x28a>
 8002900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002904:	d009      	beq.n	800291a <UART_SetConfig+0x296>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x29c>
 8002908:	2300      	movs	r3, #0
 800290a:	76fb      	strb	r3, [r7, #27]
 800290c:	e00e      	b.n	800292c <UART_SetConfig+0x2a8>
 800290e:	2302      	movs	r3, #2
 8002910:	76fb      	strb	r3, [r7, #27]
 8002912:	e00b      	b.n	800292c <UART_SetConfig+0x2a8>
 8002914:	2304      	movs	r3, #4
 8002916:	76fb      	strb	r3, [r7, #27]
 8002918:	e008      	b.n	800292c <UART_SetConfig+0x2a8>
 800291a:	2308      	movs	r3, #8
 800291c:	76fb      	strb	r3, [r7, #27]
 800291e:	e005      	b.n	800292c <UART_SetConfig+0x2a8>
 8002920:	2310      	movs	r3, #16
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	bf00      	nop
 8002926:	e001      	b.n	800292c <UART_SetConfig+0x2a8>
 8002928:	2310      	movs	r3, #16
 800292a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <UART_SetConfig+0x300>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f040 80a1 	bne.w	8002a7a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002938:	7efb      	ldrb	r3, [r7, #27]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d836      	bhi.n	80029ac <UART_SetConfig+0x328>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0x2c0>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002969 	.word	0x08002969
 8002948:	080029ad 	.word	0x080029ad
 800294c:	08002971 	.word	0x08002971
 8002950:	080029ad 	.word	0x080029ad
 8002954:	08002977 	.word	0x08002977
 8002958:	080029ad 	.word	0x080029ad
 800295c:	080029ad 	.word	0x080029ad
 8002960:	080029ad 	.word	0x080029ad
 8002964:	080029a5 	.word	0x080029a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff fb7e 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 800296c:	6178      	str	r0, [r7, #20]
        break;
 800296e:	e022      	b.n	80029b6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <UART_SetConfig+0x31c>)
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	e01f      	b.n	80029b6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002976:	f7ff fb09 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 800297a:	6178      	str	r0, [r7, #20]
        break;
 800297c:	e01b      	b.n	80029b6 <UART_SetConfig+0x332>
 800297e:	bf00      	nop
 8002980:	cfff69f3 	.word	0xcfff69f3
 8002984:	40008000 	.word	0x40008000
 8002988:	40013800 	.word	0x40013800
 800298c:	40021000 	.word	0x40021000
 8002990:	40004400 	.word	0x40004400
 8002994:	40004800 	.word	0x40004800
 8002998:	40004c00 	.word	0x40004c00
 800299c:	40005000 	.word	0x40005000
 80029a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a8:	617b      	str	r3, [r7, #20]
        break;
 80029aa:	e004      	b.n	80029b6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	76bb      	strb	r3, [r7, #26]
        break;
 80029b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 811d 	beq.w	8002bf8 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	4a97      	ldr	r2, [pc, #604]	; (8002c20 <UART_SetConfig+0x59c>)
 80029c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029c8:	461a      	mov	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d305      	bcc.n	80029ee <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d902      	bls.n	80029f4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	76bb      	strb	r3, [r7, #26]
 80029f2:	e101      	b.n	8002bf8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	4a87      	ldr	r2, [pc, #540]	; (8002c20 <UART_SetConfig+0x59c>)
 8002a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f04f 0400 	mov.w	r4, #0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	f7fd fc02 	bl	8000218 <__aeabi_uldivmod>
 8002a14:	4603      	mov	r3, r0
 8002a16:	460c      	mov	r4, r1
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	0214      	lsls	r4, r2, #8
 8002a26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a2a:	020b      	lsls	r3, r1, #8
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6852      	ldr	r2, [r2, #4]
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	4611      	mov	r1, r2
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	eb13 0b01 	adds.w	fp, r3, r1
 8002a3c:	eb44 0c02 	adc.w	ip, r4, r2
 8002a40:	4658      	mov	r0, fp
 8002a42:	4661      	mov	r1, ip
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbe2 	bl	8000218 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a60:	d308      	bcc.n	8002a74 <UART_SetConfig+0x3f0>
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a68:	d204      	bcs.n	8002a74 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	e0c1      	b.n	8002bf8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	76bb      	strb	r3, [r7, #26]
 8002a78:	e0be      	b.n	8002bf8 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a82:	d164      	bne.n	8002b4e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8002a84:	7efb      	ldrb	r3, [r7, #27]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d827      	bhi.n	8002ada <UART_SetConfig+0x456>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <UART_SetConfig+0x40c>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ab5 	.word	0x08002ab5
 8002a94:	08002abd 	.word	0x08002abd
 8002a98:	08002ac5 	.word	0x08002ac5
 8002a9c:	08002adb 	.word	0x08002adb
 8002aa0:	08002acb 	.word	0x08002acb
 8002aa4:	08002adb 	.word	0x08002adb
 8002aa8:	08002adb 	.word	0x08002adb
 8002aac:	08002adb 	.word	0x08002adb
 8002ab0:	08002ad3 	.word	0x08002ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f7ff fad8 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	6178      	str	r0, [r7, #20]
        break;
 8002aba:	e013      	b.n	8002ae4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002abc:	f7ff faea 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8002ac0:	6178      	str	r0, [r7, #20]
        break;
 8002ac2:	e00f      	b.n	8002ae4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac4:	4b57      	ldr	r3, [pc, #348]	; (8002c24 <UART_SetConfig+0x5a0>)
 8002ac6:	617b      	str	r3, [r7, #20]
        break;
 8002ac8:	e00c      	b.n	8002ae4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aca:	f7ff fa5f 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8002ace:	6178      	str	r0, [r7, #20]
        break;
 8002ad0:	e008      	b.n	8002ae4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad6:	617b      	str	r3, [r7, #20]
        break;
 8002ad8:	e004      	b.n	8002ae4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	76bb      	strb	r3, [r7, #26]
        break;
 8002ae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8086 	beq.w	8002bf8 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <UART_SetConfig+0x59c>)
 8002af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af6:	461a      	mov	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002afe:	005a      	lsls	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	d916      	bls.n	8002b48 <UART_SetConfig+0x4c4>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d212      	bcs.n	8002b48 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f023 030f 	bic.w	r3, r3, #15
 8002b2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	89fa      	ldrh	r2, [r7, #14]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	e057      	b.n	8002bf8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	76bb      	strb	r3, [r7, #26]
 8002b4c:	e054      	b.n	8002bf8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b4e:	7efb      	ldrb	r3, [r7, #27]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d828      	bhi.n	8002ba6 <UART_SetConfig+0x522>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <UART_SetConfig+0x4d8>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	08002b91 	.word	0x08002b91
 8002b68:	08002ba7 	.word	0x08002ba7
 8002b6c:	08002b97 	.word	0x08002b97
 8002b70:	08002ba7 	.word	0x08002ba7
 8002b74:	08002ba7 	.word	0x08002ba7
 8002b78:	08002ba7 	.word	0x08002ba7
 8002b7c:	08002b9f 	.word	0x08002b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b80:	f7ff fa72 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002b84:	6178      	str	r0, [r7, #20]
        break;
 8002b86:	e013      	b.n	8002bb0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b88:	f7ff fa84 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8002b8c:	6178      	str	r0, [r7, #20]
        break;
 8002b8e:	e00f      	b.n	8002bb0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <UART_SetConfig+0x5a0>)
 8002b92:	617b      	str	r3, [r7, #20]
        break;
 8002b94:	e00c      	b.n	8002bb0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b96:	f7ff f9f9 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8002b9a:	6178      	str	r0, [r7, #20]
        break;
 8002b9c:	e008      	b.n	8002bb0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba2:	617b      	str	r3, [r7, #20]
        break;
 8002ba4:	e004      	b.n	8002bb0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	76bb      	strb	r3, [r7, #26]
        break;
 8002bae:	bf00      	nop
    }

    if (pclk != 0U)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d020      	beq.n	8002bf8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <UART_SetConfig+0x59c>)
 8002bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	441a      	add	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	d908      	bls.n	8002bf4 <UART_SetConfig+0x570>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d204      	bcs.n	8002bf4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e001      	b.n	8002bf8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002c14:	7ebb      	ldrb	r3, [r7, #26]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002c20:	080031d0 	.word	0x080031d0
 8002c24:	00f42400 	.word	0x00f42400

08002c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01a      	beq.n	8002d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d26:	d10a      	bne.n	8002d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d7c:	f7fd ff34 	bl	8000be8 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d10e      	bne.n	8002dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f82c 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e022      	b.n	8002df4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d10e      	bne.n	8002dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f816 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e00c      	b.n	8002df4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	e062      	b.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d05e      	beq.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fd fee7 	bl	8000be8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11d      	bne.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e045      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02e      	beq.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e84:	d126      	bne.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e00f      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d08d      	beq.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e027      	b.n	8002f62 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002f40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e02d      	b.n	8002fe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2224      	movs	r2, #36	; 0x24
 8002f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f850 	bl	8003068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e02d      	b.n	800305e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2224      	movs	r2, #36	; 0x24
 800300e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f812 	bl	8003068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003070:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <UARTEx_SetNbDataToProcess+0xc8>)
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800307e:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <UARTEx_SetNbDataToProcess+0xcc>)
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003088:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003090:	2b00      	cmp	r3, #0
 8003092:	d108      	bne.n	80030a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030a4:	e03d      	b.n	8003122 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80030a6:	2308      	movs	r3, #8
 80030a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80030aa:	2308      	movs	r3, #8
 80030ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	0e5b      	lsrs	r3, r3, #25
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	0f5b      	lsrs	r3, r3, #29
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030ce:	7fbb      	ldrb	r3, [r7, #30]
 80030d0:	7f3a      	ldrb	r2, [r7, #28]
 80030d2:	f107 0120 	add.w	r1, r7, #32
 80030d6:	440a      	add	r2, r1
 80030d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030e0:	7f3a      	ldrb	r2, [r7, #28]
 80030e2:	f107 0120 	add.w	r1, r7, #32
 80030e6:	440a      	add	r2, r1
 80030e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	7f7a      	ldrb	r2, [r7, #29]
 80030fc:	f107 0120 	add.w	r1, r7, #32
 8003100:	440a      	add	r2, r1
 8003102:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003106:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800310a:	7f7a      	ldrb	r2, [r7, #29]
 800310c:	f107 0120 	add.w	r1, r7, #32
 8003110:	440a      	add	r2, r1
 8003112:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003116:	fb93 f3f2 	sdiv	r3, r3, r2
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	080031a8 	.word	0x080031a8
 8003134:	080031b0 	.word	0x080031b0

08003138 <__libc_init_array>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4e0d      	ldr	r6, [pc, #52]	; (8003170 <__libc_init_array+0x38>)
 800313c:	4c0d      	ldr	r4, [pc, #52]	; (8003174 <__libc_init_array+0x3c>)
 800313e:	1ba4      	subs	r4, r4, r6
 8003140:	10a4      	asrs	r4, r4, #2
 8003142:	2500      	movs	r5, #0
 8003144:	42a5      	cmp	r5, r4
 8003146:	d109      	bne.n	800315c <__libc_init_array+0x24>
 8003148:	4e0b      	ldr	r6, [pc, #44]	; (8003178 <__libc_init_array+0x40>)
 800314a:	4c0c      	ldr	r4, [pc, #48]	; (800317c <__libc_init_array+0x44>)
 800314c:	f000 f820 	bl	8003190 <_init>
 8003150:	1ba4      	subs	r4, r4, r6
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	2500      	movs	r5, #0
 8003156:	42a5      	cmp	r5, r4
 8003158:	d105      	bne.n	8003166 <__libc_init_array+0x2e>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003160:	4798      	blx	r3
 8003162:	3501      	adds	r5, #1
 8003164:	e7ee      	b.n	8003144 <__libc_init_array+0xc>
 8003166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800316a:	4798      	blx	r3
 800316c:	3501      	adds	r5, #1
 800316e:	e7f2      	b.n	8003156 <__libc_init_array+0x1e>
 8003170:	080031f0 	.word	0x080031f0
 8003174:	080031f0 	.word	0x080031f0
 8003178:	080031f0 	.word	0x080031f0
 800317c:	080031f4 	.word	0x080031f4

08003180 <memset>:
 8003180:	4402      	add	r2, r0
 8003182:	4603      	mov	r3, r0
 8003184:	4293      	cmp	r3, r2
 8003186:	d100      	bne.n	800318a <memset+0xa>
 8003188:	4770      	bx	lr
 800318a:	f803 1b01 	strb.w	r1, [r3], #1
 800318e:	e7f9      	b.n	8003184 <memset+0x4>

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
