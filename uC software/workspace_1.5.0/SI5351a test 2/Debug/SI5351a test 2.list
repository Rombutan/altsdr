
SI5351a test 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003934  08003934  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800393c  0800393c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003950  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003950  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e351  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b9b  00000000  00000000  0002e38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024978  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d64  00000000  00000000  00056048  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9e66  00000000  00000000  0005fdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  00149c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080038dc 	.word	0x080038dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080038dc 	.word	0x080038dc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb8b 	bl	8000c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f809 	bl	8000536 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8fa 	bl	800071c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8ae 	bl	8000688 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f86c 	bl	8000608 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  si5351_Init();
 8000530:	f000 f968 	bl	8000804 <si5351_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x1c>

08000536 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b0a8      	sub	sp, #160	; 0xa0
 800053a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000540:	2238      	movs	r2, #56	; 0x38
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f003 f9c1 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055a:	463b      	mov	r3, r7
 800055c:	2254      	movs	r2, #84	; 0x54
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f003 f9b3 	bl	80038cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000566:	2000      	movs	r0, #0
 8000568:	f001 fbae 	bl	8001cc8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000586:	2304      	movs	r3, #4
 8000588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058c:	2355      	movs	r3, #85	; 0x55
 800058e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fc41 	bl	8001e30 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b4:	f000 f922 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 ff44 	bl	8002460 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005de:	f000 f90d 	bl	80007fc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f951 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005fc:	f000 f8fe 	bl	80007fc <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	37a0      	adds	r7, #160	; 0xa0
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_I2C1_Init+0x74>)
 8000644:	f000 fe35 	bl	80012b2 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 f8d5 	bl	80007fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <MX_I2C1_Init+0x74>)
 8000656:	f001 fa9f 	bl	8001b98 <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 f8cc 	bl	80007fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_I2C1_Init+0x74>)
 8000668:	f001 fae1 	bl	8001c2e <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f8c3 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40005400 	.word	0x40005400
 8000684:	30a0a7fb 	.word	0x30a0a7fb

08000688 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 8000690:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f002 fb30 	bl	8002d30 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f891 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	f002 ffec 	bl	80036ba <HAL_UARTEx_SetTxFifoThreshold>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006e8:	f000 f888 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f003 f821 	bl	8003736 <HAL_UARTEx_SetRxFifoThreshold>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006fa:	f000 f87f 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	f002 ffa2 	bl	8003648 <HAL_UARTEx_DisableFifoMode>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800070a:	f000 f877 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000074 	.word	0x20000074
 8000718:	40008000 	.word	0x40008000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_GPIO_Init+0xd4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fd4f 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_GPIO_Init+0xd8>)
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xdc>)
 80007b4:	f000 fbc0 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fbb1 	bl	8000f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2028      	movs	r0, #40	; 0x28
 80007dc:	f000 fb77 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fb8e 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	10110000 	.word	0x10110000
 80007f8:	48000800 	.word	0x48000800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000802:	e7fe      	b.n	8000802 <Error_Handler+0x6>

08000804 <si5351_Init>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

err_t si5351_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 800080a:	4b57      	ldr	r3, [pc, #348]	; (8000968 <si5351_Init+0x164>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8000810:	4b55      	ldr	r3, [pc, #340]	; (8000968 <si5351_Init+0x164>)
 8000812:	4a56      	ldr	r2, [pc, #344]	; (800096c <si5351_Init+0x168>)
 8000814:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8000816:	4b54      	ldr	r3, [pc, #336]	; (8000968 <si5351_Init+0x164>)
 8000818:	22c0      	movs	r2, #192	; 0xc0
 800081a:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 800081c:	4b52      	ldr	r3, [pc, #328]	; (8000968 <si5351_Init+0x164>)
 800081e:	221e      	movs	r2, #30
 8000820:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 8000822:	4b51      	ldr	r3, [pc, #324]	; (8000968 <si5351_Init+0x164>)
 8000824:	2200      	movs	r2, #0
 8000826:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 8000828:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <si5351_Init+0x164>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 800082e:	4b4e      	ldr	r3, [pc, #312]	; (8000968 <si5351_Init+0x164>)
 8000830:	2200      	movs	r2, #0
 8000832:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 8000834:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <si5351_Init+0x164>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 800083a:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <si5351_Init+0x164>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 8000840:	4b49      	ldr	r3, [pc, #292]	; (8000968 <si5351_Init+0x164>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
	  m_si5351Config.ms2_freq		 = 0;
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <si5351_Init+0x164>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 800084c:	4b46      	ldr	r3, [pc, #280]	; (8000968 <si5351_Init+0x164>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <si5351_Init+0x164>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <si5351_Init+0x164>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 800085e:	21ff      	movs	r1, #255	; 0xff
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f885 	bl	8000970 <si5351_write8>
 8000866:	4603      	mov	r3, r0
 8000868:	82fb      	strh	r3, [r7, #22]
 800086a:	8afb      	ldrh	r3, [r7, #22]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <si5351_Init+0x70>
 8000870:	8afb      	ldrh	r3, [r7, #22]
 8000872:	e074      	b.n	800095e <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	2010      	movs	r0, #16
 8000878:	f000 f87a 	bl	8000970 <si5351_write8>
 800087c:	4603      	mov	r3, r0
 800087e:	82bb      	strh	r3, [r7, #20]
 8000880:	8abb      	ldrh	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <si5351_Init+0x86>
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	e069      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	2011      	movs	r0, #17
 800088e:	f000 f86f 	bl	8000970 <si5351_write8>
 8000892:	4603      	mov	r3, r0
 8000894:	827b      	strh	r3, [r7, #18]
 8000896:	8a7b      	ldrh	r3, [r7, #18]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <si5351_Init+0x9c>
 800089c:	8a7b      	ldrh	r3, [r7, #18]
 800089e:	e05e      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	2012      	movs	r0, #18
 80008a4:	f000 f864 	bl	8000970 <si5351_write8>
 80008a8:	4603      	mov	r3, r0
 80008aa:	823b      	strh	r3, [r7, #16]
 80008ac:	8a3b      	ldrh	r3, [r7, #16]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <si5351_Init+0xb2>
 80008b2:	8a3b      	ldrh	r3, [r7, #16]
 80008b4:	e053      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	2013      	movs	r0, #19
 80008ba:	f000 f859 	bl	8000970 <si5351_write8>
 80008be:	4603      	mov	r3, r0
 80008c0:	81fb      	strh	r3, [r7, #14]
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <si5351_Init+0xc8>
 80008c8:	89fb      	ldrh	r3, [r7, #14]
 80008ca:	e048      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	2014      	movs	r0, #20
 80008d0:	f000 f84e 	bl	8000970 <si5351_write8>
 80008d4:	4603      	mov	r3, r0
 80008d6:	81bb      	strh	r3, [r7, #12]
 80008d8:	89bb      	ldrh	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <si5351_Init+0xde>
 80008de:	89bb      	ldrh	r3, [r7, #12]
 80008e0:	e03d      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	2015      	movs	r0, #21
 80008e6:	f000 f843 	bl	8000970 <si5351_write8>
 80008ea:	4603      	mov	r3, r0
 80008ec:	817b      	strh	r3, [r7, #10]
 80008ee:	897b      	ldrh	r3, [r7, #10]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <si5351_Init+0xf4>
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	e032      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	2016      	movs	r0, #22
 80008fc:	f000 f838 	bl	8000970 <si5351_write8>
 8000900:	4603      	mov	r3, r0
 8000902:	813b      	strh	r3, [r7, #8]
 8000904:	893b      	ldrh	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <si5351_Init+0x10a>
 800090a:	893b      	ldrh	r3, [r7, #8]
 800090c:	e027      	b.n	800095e <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	2017      	movs	r0, #23
 8000912:	f000 f82d 	bl	8000970 <si5351_write8>
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <si5351_Init+0x120>
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	e01c      	b.n	800095e <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <si5351_Init+0x164>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	4619      	mov	r1, r3
 800092a:	20b7      	movs	r0, #183	; 0xb7
 800092c:	f000 f820 	bl	8000970 <si5351_write8>
 8000930:	4603      	mov	r3, r0
 8000932:	80bb      	strh	r3, [r7, #4]
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <si5351_Init+0x13a>
 800093a:	88bb      	ldrh	r3, [r7, #4]
 800093c:	e00f      	b.n	800095e <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <si5351_Init+0x164>)
 8000940:	2200      	movs	r2, #0
 8000942:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <si5351_Init+0x164>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <si5351_Init+0x164>)
 800094c:	2200      	movs	r2, #0
 800094e:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <si5351_Init+0x164>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <si5351_Init+0x164>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000100 	.word	0x20000100
 800096c:	017d7840 	.word	0x017d7840

08000970 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af04      	add	r7, sp, #16
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8000984:	bf00      	nop
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	2203      	movs	r2, #3
 800098a:	21c0      	movs	r1, #192	; 0xc0
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <si5351_write8+0x50>)
 800098e:	f000 fe33 	bl	80015f8 <HAL_I2C_IsDeviceReady>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f6      	bne.n	8000986 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	b29a      	uxth	r2, r3
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	21c0      	movs	r1, #192	; 0xc0
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <si5351_write8+0x50>)
 80009ae:	f000 fd0f 	bl	80013d0 <HAL_I2C_Mem_Write>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000028 	.word	0x20000028

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009fa:	f001 fa09 	bl	8001e10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_I2C_MspInit+0xb8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d145      	bne.n	8000aba <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f000 fa5b 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a92:	2304      	movs	r3, #4
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_I2C_MspInit+0xc0>)
 8000a9e:	f000 fa4b 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_I2C_MspInit+0xbc>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x7c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d128      	bne.n	8000b44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b32:	230c      	movs	r3, #12
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 f9fa 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40008000 	.word	0x40008000
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f89c 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb0:	f000 fb5c 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SystemInit+0x28>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <SystemInit+0x28>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SystemInit+0x28>)
 8000bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0e:	f7ff ffd3 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fe37 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c16:	f7ff fc7f 	bl	8000518 <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c28:	08003944 	.word	0x08003944
  ldr r2, =_sbss
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c30:	2000013c 	.word	0x2000013c

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>

08000c36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f939 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f80e 	bl	8000c68 <HAL_InitTick>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e001      	b.n	8000c5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c58:	f7ff feb4 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_InitTick+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d022      	beq.n	8000cc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_InitTick+0x6c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_InitTick+0x68>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f944 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10f      	bne.n	8000cbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d809      	bhi.n	8000cb6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000caa:	f000 f910 	bl	8000ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x70>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e007      	b.n	8000cc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e004      	b.n	8000cc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000138 	.word	0x20000138
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000138 	.word	0x20000138

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff40 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff90 	bl	8000e0c <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5f 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff33 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa4 	bl	8000e74 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f46:	e15a      	b.n	80011fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 814c 	beq.w	80011f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d00b      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	2b11      	cmp	r3, #17
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b12      	cmp	r3, #18
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0xea>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b12      	cmp	r3, #18
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0203 	and.w	r2, r3, #3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80a6 	beq.w	80011f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b0:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6613      	str	r3, [r2, #96]	; 0x60
 80010b8:	4b58      	ldr	r3, [pc, #352]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c4:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x1f8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_GPIO_Init+0x1f4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1f0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x2f4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1ec>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1e8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a48      	ldr	r2, [pc, #288]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1e4>
 8001118:	2305      	movs	r3, #5
 800111a:	e00a      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 800111c:	2306      	movs	r3, #6
 800111e:	e008      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001120:	2304      	movs	r3, #4
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001124:	2303      	movs	r3, #3
 8001126:	e004      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001128:	2302      	movs	r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001130:	2300      	movs	r3, #0
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	f002 0203 	and.w	r2, r2, #3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	4093      	lsls	r3, r2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001142:	4937      	ldr	r1, [pc, #220]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001174:	4a30      	ldr	r2, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x300>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119e:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f ae9d 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	48000400 	.word	0x48000400
 8001228:	48000800 	.word	0x48000800
 800122c:	48000c00 	.word	0x48000c00
 8001230:	48001000 	.word	0x48001000
 8001234:	48001400 	.word	0x48001400
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f806 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e081      	b.n	80013c8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fb97 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2224      	movs	r2, #36	; 0x24
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001302:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001312:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d107      	bne.n	800132c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	e006      	b.n	800133a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d104      	bne.n	800134c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800136e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	ea42 0103 	orr.w	r1, r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	021a      	lsls	r2, r3, #8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69d9      	ldr	r1, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2220      	movs	r2, #32
 80013b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	460b      	mov	r3, r1
 80013e4:	813b      	strh	r3, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	f040 80f9 	bne.w	80015ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_I2C_Mem_Write+0x34>
 80013fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0ed      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_I2C_Mem_Write+0x4e>
 800141a:	2302      	movs	r3, #2
 800141c:	e0e6      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001426:	f7ff fc6b 	bl	8000d00 <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2319      	movs	r3, #25
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fa5d 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0d1      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2221      	movs	r2, #33	; 0x21
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001470:	88f8      	ldrh	r0, [r7, #6]
 8001472:	893a      	ldrh	r2, [r7, #8]
 8001474:	8979      	ldrh	r1, [r7, #10]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	4603      	mov	r3, r0
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f9c1 	bl	8001808 <I2C_RequestMemoryWrite>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0a9      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d90e      	bls.n	80014c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	8979      	ldrh	r1, [r7, #10]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fb3f 	bl	8001b3c <I2C_TransferConfig>
 80014be:	e00f      	b.n	80014e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	8979      	ldrh	r1, [r7, #10]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fb2e 	bl	8001b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fa47 	bl	8001978 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e07b      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d034      	beq.n	8001598 <HAL_I2C_Mem_Write+0x1c8>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d130      	bne.n	8001598 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	2200      	movs	r2, #0
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 f9d9 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e04d      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001554:	b29b      	uxth	r3, r3
 8001556:	2bff      	cmp	r3, #255	; 0xff
 8001558:	d90e      	bls.n	8001578 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	b2da      	uxtb	r2, r3
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	2300      	movs	r3, #0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fae3 	bl	8001b3c <I2C_TransferConfig>
 8001576:	e00f      	b.n	8001598 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	b2da      	uxtb	r2, r3
 8001588:	8979      	ldrh	r1, [r7, #10]
 800158a:	2300      	movs	r3, #0
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fad2 	bl	8001b3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d19e      	bne.n	80014e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fa26 	bl	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e01a      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2220      	movs	r2, #32
 80015bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_I2C_Mem_Write+0x224>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015ea:	2302      	movs	r3, #2
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	fe00e800 	.word	0xfe00e800

080015f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	460b      	mov	r3, r1
 8001606:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b20      	cmp	r3, #32
 8001616:	f040 80f1 	bne.w	80017fc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001628:	d101      	bne.n	800162e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800162a:	2302      	movs	r3, #2
 800162c:	e0e7      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_I2C_IsDeviceReady+0x44>
 8001638:	2302      	movs	r3, #2
 800163a:	e0e0      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_I2C_IsDeviceReady+0x72>
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001668:	e004      	b.n	8001674 <HAL_I2C_IsDeviceReady+0x7c>
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001670:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fb41 	bl	8000d00 <HAL_GetTick>
 800167e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b20      	cmp	r3, #32
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016ac:	e034      	b.n	8001718 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d01a      	beq.n	80016ec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7ff fb23 	bl	8000d00 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <HAL_I2C_IsDeviceReady+0xd4>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f043 0220 	orr.w	r2, r3, #32
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e088      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b10      	cmp	r3, #16
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <HAL_I2C_IsDeviceReady+0x12c>
 800171e:	7fbb      	ldrb	r3, [r7, #30]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0c4      	beq.n	80016ae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b10      	cmp	r3, #16
 8001730:	d01a      	beq.n	8001768 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	2120      	movs	r1, #32
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f8db 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e058      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2220      	movs	r2, #32
 8001752:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e04a      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	2120      	movs	r1, #32
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f8c0 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e03d      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2210      	movs	r2, #16
 8001788:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2220      	movs	r2, #32
 8001790:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d118      	bne.n	80017cc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f89f 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e01c      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2220      	movs	r2, #32
 80017ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	f63f af3b 	bhi.w	8001652 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
  }
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	817b      	strh	r3, [r7, #10]
 800181a:	460b      	mov	r3, r1
 800181c:	813b      	strh	r3, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	8979      	ldrh	r1, [r7, #10]
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <I2C_RequestMemoryWrite+0xa4>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f983 	bl	8001b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f89c 	bl	8001978 <I2C_WaitOnTXISFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e02c      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
 800185a:	e015      	b.n	8001888 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800185c:	893b      	ldrh	r3, [r7, #8]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	69b9      	ldr	r1, [r7, #24]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f882 	bl	8001978 <I2C_WaitOnTXISFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e012      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f830 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	80002000 	.word	0x80002000

080018b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d103      	bne.n	80018ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d007      	beq.n	80018ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	619a      	str	r2, [r3, #24]
  }
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	e022      	b.n	8001950 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d01e      	beq.n	8001950 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001912:	f7ff f9f5 	bl	8000d00 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d113      	bne.n	8001950 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00f      	b.n	8001970 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4013      	ands	r3, r2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	429a      	cmp	r2, r3
 800196c:	d0cd      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001984:	e02c      	b.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f870 	bl	8001a70 <I2C_IsAcknowledgeFailed>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e02a      	b.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d01e      	beq.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a2:	f7ff f9ad 	bl	8000d00 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d302      	bcc.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d113      	bne.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f043 0220 	orr.w	r2, r3, #32
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e007      	b.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d1cb      	bne.n	8001986 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a04:	e028      	b.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f830 	bl	8001a70 <I2C_IsAcknowledgeFailed>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e026      	b.n	8001a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1a:	f7ff f971 	bl	8000d00 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d113      	bne.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e007      	b.n	8001a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d1cf      	bne.n	8001a06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d151      	bne.n	8001b2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8a:	e022      	b.n	8001ad2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a92:	d01e      	beq.n	8001ad2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a94:	f7ff f934 	bl	8000d00 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d302      	bcc.n	8001aaa <I2C_IsAcknowledgeFailed+0x3a>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d113      	bne.n	8001ad2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e02e      	b.n	8001b30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d1d5      	bne.n	8001a8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2220      	movs	r2, #32
 8001aee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fedd 	bl	80018b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <I2C_IsAcknowledgeFailed+0xc8>)
 8001b02:	400b      	ands	r3, r1
 8001b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f043 0204 	orr.w	r2, r3, #4
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	fe00e800 	.word	0xfe00e800

08001b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	817b      	strh	r3, [r7, #10]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	0d5b      	lsrs	r3, r3, #21
 8001b58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <I2C_TransferConfig+0x58>)
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	43db      	mvns	r3, r3
 8001b62:	ea02 0103 	and.w	r1, r2, r3
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b6c:	7a7b      	ldrb	r3, [r7, #9]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	03ff63ff 	.word	0x03ff63ff

08001b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d138      	bne.n	8001c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e032      	b.n	8001c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d139      	bne.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e033      	b.n	8001cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d141      	bne.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d131      	bne.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cea:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cfc:	4a41      	ldr	r2, [pc, #260]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d04:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2232      	movs	r2, #50	; 0x32
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	3301      	adds	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1a:	e002      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	d102      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f2      	bne.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d36:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d158      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e057      	b.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d58:	e04d      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d141      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d131      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2232      	movs	r2, #50	; 0x32
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da6:	e002      	b.n	8001dae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d102      	bne.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f2      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dce:	d112      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e011      	b.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001de4:	e007      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40007000 	.word	0x40007000
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1e:	6093      	str	r3, [r2, #8]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40007000 	.word	0x40007000

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e308      	b.n	8002454 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d075      	beq.n	8001f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4e:	4ba3      	ldr	r3, [pc, #652]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e58:	4ba0      	ldr	r3, [pc, #640]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3e>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_OscConfig+0x44>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	4b99      	ldr	r3, [pc, #612]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x108>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d157      	bne.n	8001f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e2e3      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d106      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x74>
 8001e96:	4b91      	ldr	r3, [pc, #580]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a90      	ldr	r2, [pc, #576]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001eae:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a8a      	ldr	r2, [pc, #552]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a87      	ldr	r2, [pc, #540]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a83      	ldr	r2, [pc, #524]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b81      	ldr	r3, [pc, #516]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a80      	ldr	r2, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ff0a 	bl	8000d00 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7fe ff06 	bl	8000d00 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e2a8      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe fef6 	bl	8000d00 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fef2 	bl	8000d00 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e294      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2a:	4b6c      	ldr	r3, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0xe8>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d075      	beq.n	8002032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f46:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f50:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x136>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_OscConfig+0x13c>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d11f      	bne.n	8001fac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_OscConfig+0x154>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e267      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b55      	ldr	r3, [pc, #340]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	4952      	ldr	r1, [pc, #328]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f98:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x2b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fe63 	bl	8000c68 <HAL_InitTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d043      	beq.n	8002030 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e253      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fe9e 	bl	8000d00 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe fe9a 	bl	8000d00 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e23c      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	061b      	lsls	r3, r3, #24
 8001ff4:	4939      	ldr	r1, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
 8001ffa:	e01a      	b.n	8002032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a36      	ldr	r2, [pc, #216]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fe7a 	bl	8000d00 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7fe fe76 	bl	8000d00 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e218      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e0>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01c      	beq.n	8002080 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe fe53 	bl	8000d00 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7fe fe4f 	bl	8000d00 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1f1      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ef      	beq.n	800205e <HAL_RCC_OscConfig+0x22e>
 800207e:	e01b      	b.n	80020b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe fe36 	bl	8000d00 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7fe fe32 	bl	8000d00 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1d4      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ef      	bne.n	8002098 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80ab 	beq.w	800221c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2b4>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e005      	b.n	80020e6 <HAL_RCC_OscConfig+0x2b6>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	20000004 	.word	0x20000004
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4baf      	ldr	r3, [pc, #700]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4aae      	ldr	r2, [pc, #696]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
 80020f6:	4bac      	ldr	r3, [pc, #688]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	4ba9      	ldr	r3, [pc, #676]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002112:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4aa5      	ldr	r2, [pc, #660]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe fdef 	bl	8000d00 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe fdeb 	bl	8000d00 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e18d      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002138:	4b9c      	ldr	r3, [pc, #624]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d108      	bne.n	800215e <HAL_RCC_OscConfig+0x32e>
 800214c:	4b96      	ldr	r3, [pc, #600]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	4a95      	ldr	r2, [pc, #596]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215c:	e024      	b.n	80021a8 <HAL_RCC_OscConfig+0x378>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d110      	bne.n	8002188 <HAL_RCC_OscConfig+0x358>
 8002166:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4a8e      	ldr	r2, [pc, #568]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a8a      	ldr	r2, [pc, #552]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x378>
 8002188:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a86      	ldr	r2, [pc, #536]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002198:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	4a82      	ldr	r2, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d016      	beq.n	80021de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fda6 	bl	8000d00 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe fda2 	bl	8000d00 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e142      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ed      	beq.n	80021b8 <HAL_RCC_OscConfig+0x388>
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe fd8f 	bl	8000d00 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe fd8b 	bl	8000d00 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e12b      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ed      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800220a:	7ffb      	ldrb	r3, [r7, #31]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a64      	ldr	r2, [pc, #400]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01c      	beq.n	800226a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002230:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002236:	4a5c      	ldr	r2, [pc, #368]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe fd5e 	bl	8000d00 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002248:	f7fe fd5a 	bl	8000d00 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0fc      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ef      	beq.n	8002248 <HAL_RCC_OscConfig+0x418>
 8002268:	e01b      	b.n	80022a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800226a:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800226c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002270:	4a4d      	ldr	r2, [pc, #308]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fd41 	bl	8000d00 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002282:	f7fe fd3d 	bl	8000d00 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0df      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002294:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ef      	bne.n	8002282 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80d3 	beq.w	8002452 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ac:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	f000 808d 	beq.w	80023d4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d15a      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fd17 	bl	8000d00 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fd13 	bl	8000d00 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0b5      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x580>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6a11      	ldr	r1, [r2, #32]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002304:	3a01      	subs	r2, #1
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800230e:	0212      	lsls	r2, r2, #8
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002316:	0852      	lsrs	r2, r2, #1
 8002318:	3a01      	subs	r2, #1
 800231a:	0552      	lsls	r2, r2, #21
 800231c:	4311      	orrs	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002322:	0852      	lsrs	r2, r2, #1
 8002324:	3a01      	subs	r2, #1
 8002326:	0652      	lsls	r2, r2, #25
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800232e:	06d2      	lsls	r2, r2, #27
 8002330:	430a      	orrs	r2, r1
 8002332:	491d      	ldr	r1, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002334:	4313      	orrs	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fcd6 	bl	8000d00 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fcd2 	bl	8000d00 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e074      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x528>
 8002376:	e06c      	b.n	8002452 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002396:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fcae 	bl	8000d00 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	e00e      	b.n	80023c6 <HAL_RCC_OscConfig+0x596>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fca4 	bl	8000d00 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e046      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x62c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x584>
 80023d2:	e03e      	b.n	8002452 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e039      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_OscConfig+0x62c>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d12c      	bne.n	800244e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	3b01      	subs	r3, #1
 8002400:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d123      	bne.n	800244e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d11b      	bne.n	800244e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d113      	bne.n	800244e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d109      	bne.n	800244e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e11e      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 020f 	bic.w	r2, r3, #15
 800248e:	498c      	ldr	r1, [pc, #560]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b8a      	ldr	r3, [pc, #552]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e106      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d073      	beq.n	800259c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d129      	bne.n	8002510 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0f4      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024cc:	f000 f99e 	bl	800280c <RCC_GetSysClockFreqFromPLLSource>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4a7c      	ldr	r2, [pc, #496]	; (80026c8 <HAL_RCC_ClockConfig+0x268>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d93f      	bls.n	800255a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024da:	4b7a      	ldr	r3, [pc, #488]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d033      	beq.n	800255a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d12f      	bne.n	800255a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024fa:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002502:	4a70      	ldr	r2, [pc, #448]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002508:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e024      	b.n	800255a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002518:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0c6      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0be      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002538:	f000 f8ce 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800253c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4a61      	ldr	r2, [pc, #388]	; (80026c8 <HAL_RCC_ClockConfig+0x268>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d909      	bls.n	800255a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4957      	ldr	r1, [pc, #348]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7fe fbc8 	bl	8000d00 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7fe fbc4 	bl	8000d00 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e095      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a42      	ldr	r2, [pc, #264]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025d4:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4936      	ldr	r1, [pc, #216]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
 80025ee:	e008      	b.n	8002602 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 80025fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002600:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d21d      	bcs.n	800264c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 020f 	bic.w	r2, r3, #15
 8002618:	4929      	ldr	r1, [pc, #164]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002620:	f7fe fb6e 	bl	8000d00 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7fe fb6a 	bl	8000d00 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e03b      	b.n	80026b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d1ed      	bne.n	8002628 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4917      	ldr	r1, [pc, #92]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490f      	ldr	r1, [pc, #60]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268a:	f000 f825 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800268e:	4601      	mov	r1, r0
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCC_ClockConfig+0x264>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_ClockConfig+0x26c>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	fa21 f303 	lsr.w	r3, r1, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x270>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x274>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fada 	bl	8000c68 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	04c4b400 	.word	0x04c4b400
 80026cc:	08003904 	.word	0x08003904
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ea:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	e047      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	e03e      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d136      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800272c:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002736:	68d2      	ldr	r2, [r2, #12]
 8002738:	0a12      	lsrs	r2, r2, #8
 800273a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
      break;
 8002744:	e00c      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	0a12      	lsrs	r2, r2, #8
 8002754:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
      break;
 800275e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0e5b      	lsrs	r3, r3, #25
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e001      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002780:	693b      	ldr	r3, [r7, #16]
}
 8002782:	4618      	mov	r0, r3
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	00f42400 	.word	0x00f42400
 8002798:	016e3600 	.word	0x016e3600

0800279c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08003914 	.word	0x08003914

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e4:	f7ff ffda 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08003914 	.word	0x08003914

0800280c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10c      	bne.n	800284a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800283a:	68d2      	ldr	r2, [r2, #12]
 800283c:	0a12      	lsrs	r2, r2, #8
 800283e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	617b      	str	r3, [r7, #20]
    break;
 8002848:	e00c      	b.n	8002864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	0a12      	lsrs	r2, r2, #8
 8002858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
    break;
 8002862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0e5b      	lsrs	r3, r3, #25
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	016e3600 	.word	0x016e3600
 8002894:	00f42400 	.word	0x00f42400

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8098 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6593      	str	r3, [r2, #88]	; 0x58
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a39      	ldr	r2, [pc, #228]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fa07 	bl	8000d00 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f4:	e009      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fa03 	bl	8000d00 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d902      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	74fb      	strb	r3, [r7, #19]
        break;
 8002908:	e005      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ef      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d159      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01e      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	d019      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe f9c3 	bl	8000d00 <HAL_GetTick>
 800297a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297c:	e00b      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe f9bf 	bl	8000d00 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d902      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	74fb      	strb	r3, [r7, #19]
            break;
 8002994:	e006      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ec      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c0:	e008      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	74bb      	strb	r3, [r7, #18]
 80029c6:	e005      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d4:	7c7b      	ldrb	r3, [r7, #17]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4baf      	ldr	r3, [pc, #700]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	4aae      	ldr	r2, [pc, #696]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f2:	4ba9      	ldr	r3, [pc, #676]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 0203 	bic.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	49a5      	ldr	r1, [pc, #660]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a14:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 020c 	bic.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	499d      	ldr	r1, [pc, #628]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a36:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4994      	ldr	r1, [pc, #592]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	498c      	ldr	r1, [pc, #560]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a7a:	4b87      	ldr	r3, [pc, #540]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4983      	ldr	r1, [pc, #524]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9c:	4b7e      	ldr	r3, [pc, #504]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	497b      	ldr	r1, [pc, #492]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4972      	ldr	r1, [pc, #456]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	496a      	ldr	r1, [pc, #424]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	4961      	ldr	r1, [pc, #388]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b24:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	4959      	ldr	r1, [pc, #356]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	4950      	ldr	r1, [pc, #320]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4948      	ldr	r1, [pc, #288]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	493a      	ldr	r1, [pc, #232]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	492c      	ldr	r1, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	491e      	ldr	r1, [pc, #120]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c66:	d105      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4902      	ldr	r1, [pc, #8]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c96:	e001      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002c98:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ccc:	4917      	ldr	r1, [pc, #92]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d105      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	4909      	ldr	r1, [pc, #36]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d14:	d105      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d20:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e042      	b.n	8002dc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd febb 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f82c 	bl	8002dd0 <UART_SetConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e022      	b.n	8002dc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 faf2 	bl	8003374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fb79 	bl	80034b8 <UART_CheckIdleState>
 8002dc6:	4603      	mov	r3, r0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4bb1      	ldr	r3, [pc, #708]	; (80030cc <UART_SetConfig+0x2fc>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4aa6      	ldr	r2, [pc, #664]	; (80030d0 <UART_SetConfig+0x300>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	69f9      	ldr	r1, [r7, #28]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	f023 010f 	bic.w	r1, r3, #15
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a97      	ldr	r2, [pc, #604]	; (80030d4 <UART_SetConfig+0x304>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d121      	bne.n	8002ec0 <UART_SetConfig+0xf0>
 8002e7c:	4b96      	ldr	r3, [pc, #600]	; (80030d8 <UART_SetConfig+0x308>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d816      	bhi.n	8002eb8 <UART_SetConfig+0xe8>
 8002e8a:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <UART_SetConfig+0xc0>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ead 	.word	0x08002ead
 8002e98:	08002ea7 	.word	0x08002ea7
 8002e9c:	08002eb3 	.word	0x08002eb3
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	76fb      	strb	r3, [r7, #27]
 8002ea4:	e0e8      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	76fb      	strb	r3, [r7, #27]
 8002eaa:	e0e5      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002eac:	2304      	movs	r3, #4
 8002eae:	76fb      	strb	r3, [r7, #27]
 8002eb0:	e0e2      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	76fb      	strb	r3, [r7, #27]
 8002eb6:	e0df      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	bf00      	nop
 8002ebe:	e0db      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a85      	ldr	r2, [pc, #532]	; (80030dc <UART_SetConfig+0x30c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d134      	bne.n	8002f34 <UART_SetConfig+0x164>
 8002eca:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <UART_SetConfig+0x308>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d829      	bhi.n	8002f2c <UART_SetConfig+0x15c>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <UART_SetConfig+0x110>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08002f2d 	.word	0x08002f2d
 8002ee8:	08002f2d 	.word	0x08002f2d
 8002eec:	08002f2d 	.word	0x08002f2d
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f2d 	.word	0x08002f2d
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f2d 	.word	0x08002f2d
 8002f00:	08002f1b 	.word	0x08002f1b
 8002f04:	08002f2d 	.word	0x08002f2d
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f27 	.word	0x08002f27
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e0ae      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e0ab      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e0a8      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e0a5      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	bf00      	nop
 8002f32:	e0a1      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <UART_SetConfig+0x310>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d120      	bne.n	8002f80 <UART_SetConfig+0x1b0>
 8002f3e:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <UART_SetConfig+0x308>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d00f      	beq.n	8002f6c <UART_SetConfig+0x19c>
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d802      	bhi.n	8002f56 <UART_SetConfig+0x186>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <UART_SetConfig+0x190>
 8002f54:	e010      	b.n	8002f78 <UART_SetConfig+0x1a8>
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d005      	beq.n	8002f66 <UART_SetConfig+0x196>
 8002f5a:	2b30      	cmp	r3, #48	; 0x30
 8002f5c:	d009      	beq.n	8002f72 <UART_SetConfig+0x1a2>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1a8>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e088      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e085      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e082      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e07f      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	bf00      	nop
 8002f7e:	e07b      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <UART_SetConfig+0x314>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d120      	bne.n	8002fcc <UART_SetConfig+0x1fc>
 8002f8a:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <UART_SetConfig+0x308>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d00f      	beq.n	8002fb8 <UART_SetConfig+0x1e8>
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d802      	bhi.n	8002fa2 <UART_SetConfig+0x1d2>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0x1dc>
 8002fa0:	e010      	b.n	8002fc4 <UART_SetConfig+0x1f4>
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d005      	beq.n	8002fb2 <UART_SetConfig+0x1e2>
 8002fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa8:	d009      	beq.n	8002fbe <UART_SetConfig+0x1ee>
 8002faa:	e00b      	b.n	8002fc4 <UART_SetConfig+0x1f4>
 8002fac:	2300      	movs	r3, #0
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e062      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	76fb      	strb	r3, [r7, #27]
 8002fb6:	e05f      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	76fb      	strb	r3, [r7, #27]
 8002fbc:	e05c      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	76fb      	strb	r3, [r7, #27]
 8002fc2:	e059      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	76fb      	strb	r3, [r7, #27]
 8002fc8:	bf00      	nop
 8002fca:	e055      	b.n	8003078 <UART_SetConfig+0x2a8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a45      	ldr	r2, [pc, #276]	; (80030e8 <UART_SetConfig+0x318>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d124      	bne.n	8003020 <UART_SetConfig+0x250>
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <UART_SetConfig+0x308>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d012      	beq.n	800300c <UART_SetConfig+0x23c>
 8002fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fea:	d802      	bhi.n	8002ff2 <UART_SetConfig+0x222>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <UART_SetConfig+0x230>
 8002ff0:	e012      	b.n	8003018 <UART_SetConfig+0x248>
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d006      	beq.n	8003006 <UART_SetConfig+0x236>
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ffc:	d009      	beq.n	8003012 <UART_SetConfig+0x242>
 8002ffe:	e00b      	b.n	8003018 <UART_SetConfig+0x248>
 8003000:	2300      	movs	r3, #0
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e038      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003006:	2302      	movs	r3, #2
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e035      	b.n	8003078 <UART_SetConfig+0x2a8>
 800300c:	2304      	movs	r3, #4
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e032      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003012:	2308      	movs	r3, #8
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e02f      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003018:	2310      	movs	r3, #16
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	bf00      	nop
 800301e:	e02b      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <UART_SetConfig+0x300>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d124      	bne.n	8003074 <UART_SetConfig+0x2a4>
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <UART_SetConfig+0x308>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d012      	beq.n	8003060 <UART_SetConfig+0x290>
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d802      	bhi.n	8003046 <UART_SetConfig+0x276>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <UART_SetConfig+0x284>
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x29c>
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d006      	beq.n	800305a <UART_SetConfig+0x28a>
 800304c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003050:	d009      	beq.n	8003066 <UART_SetConfig+0x296>
 8003052:	e00b      	b.n	800306c <UART_SetConfig+0x29c>
 8003054:	2300      	movs	r3, #0
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e00e      	b.n	8003078 <UART_SetConfig+0x2a8>
 800305a:	2302      	movs	r3, #2
 800305c:	76fb      	strb	r3, [r7, #27]
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003060:	2304      	movs	r3, #4
 8003062:	76fb      	strb	r3, [r7, #27]
 8003064:	e008      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003066:	2308      	movs	r3, #8
 8003068:	76fb      	strb	r3, [r7, #27]
 800306a:	e005      	b.n	8003078 <UART_SetConfig+0x2a8>
 800306c:	2310      	movs	r3, #16
 800306e:	76fb      	strb	r3, [r7, #27]
 8003070:	bf00      	nop
 8003072:	e001      	b.n	8003078 <UART_SetConfig+0x2a8>
 8003074:	2310      	movs	r3, #16
 8003076:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <UART_SetConfig+0x300>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 80a1 	bne.w	80031c6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003084:	7efb      	ldrb	r3, [r7, #27]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d836      	bhi.n	80030f8 <UART_SetConfig+0x328>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <UART_SetConfig+0x2c0>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030f9 	.word	0x080030f9
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030f9 	.word	0x080030f9
 80030a0:	080030c3 	.word	0x080030c3
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030f9 	.word	0x080030f9
 80030b0:	080030f1 	.word	0x080030f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff fb7e 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 80030b8:	6178      	str	r0, [r7, #20]
        break;
 80030ba:	e022      	b.n	8003102 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <UART_SetConfig+0x31c>)
 80030be:	617b      	str	r3, [r7, #20]
        break;
 80030c0:	e01f      	b.n	8003102 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7ff fb09 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 80030c6:	6178      	str	r0, [r7, #20]
        break;
 80030c8:	e01b      	b.n	8003102 <UART_SetConfig+0x332>
 80030ca:	bf00      	nop
 80030cc:	cfff69f3 	.word	0xcfff69f3
 80030d0:	40008000 	.word	0x40008000
 80030d4:	40013800 	.word	0x40013800
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40004400 	.word	0x40004400
 80030e0:	40004800 	.word	0x40004800
 80030e4:	40004c00 	.word	0x40004c00
 80030e8:	40005000 	.word	0x40005000
 80030ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f4:	617b      	str	r3, [r7, #20]
        break;
 80030f6:	e004      	b.n	8003102 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	76bb      	strb	r3, [r7, #26]
        break;
 8003100:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 811d 	beq.w	8003344 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	4a97      	ldr	r2, [pc, #604]	; (800336c <UART_SetConfig+0x59c>)
 8003110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003114:	461a      	mov	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	fbb3 f3f2 	udiv	r3, r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d305      	bcc.n	800313a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d902      	bls.n	8003140 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	76bb      	strb	r3, [r7, #26]
 800313e:	e101      	b.n	8003344 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	4618      	mov	r0, r3
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4a87      	ldr	r2, [pc, #540]	; (800336c <UART_SetConfig+0x59c>)
 800314e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f04f 0400 	mov.w	r4, #0
 8003158:	461a      	mov	r2, r3
 800315a:	4623      	mov	r3, r4
 800315c:	f7fd f85c 	bl	8000218 <__aeabi_uldivmod>
 8003160:	4603      	mov	r3, r0
 8003162:	460c      	mov	r4, r1
 8003164:	4619      	mov	r1, r3
 8003166:	4622      	mov	r2, r4
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f04f 0400 	mov.w	r4, #0
 8003170:	0214      	lsls	r4, r2, #8
 8003172:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003176:	020b      	lsls	r3, r1, #8
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	0852      	lsrs	r2, r2, #1
 800317e:	4611      	mov	r1, r2
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	eb13 0b01 	adds.w	fp, r3, r1
 8003188:	eb44 0c02 	adc.w	ip, r4, r2
 800318c:	4658      	mov	r0, fp
 800318e:	4661      	mov	r1, ip
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	461a      	mov	r2, r3
 800319a:	4623      	mov	r3, r4
 800319c:	f7fd f83c 	bl	8000218 <__aeabi_uldivmod>
 80031a0:	4603      	mov	r3, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ac:	d308      	bcc.n	80031c0 <UART_SetConfig+0x3f0>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b4:	d204      	bcs.n	80031c0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	e0c1      	b.n	8003344 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	76bb      	strb	r3, [r7, #26]
 80031c4:	e0be      	b.n	8003344 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ce:	d164      	bne.n	800329a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80031d0:	7efb      	ldrb	r3, [r7, #27]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d827      	bhi.n	8003226 <UART_SetConfig+0x456>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0x40c>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003217 	.word	0x08003217
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003227 	.word	0x08003227
 80031f8:	08003227 	.word	0x08003227
 80031fc:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff fad8 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003204:	6178      	str	r0, [r7, #20]
        break;
 8003206:	e013      	b.n	8003230 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff faea 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 800320c:	6178      	str	r0, [r7, #20]
        break;
 800320e:	e00f      	b.n	8003230 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b57      	ldr	r3, [pc, #348]	; (8003370 <UART_SetConfig+0x5a0>)
 8003212:	617b      	str	r3, [r7, #20]
        break;
 8003214:	e00c      	b.n	8003230 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff fa5f 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800321a:	6178      	str	r0, [r7, #20]
        break;
 800321c:	e008      	b.n	8003230 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	617b      	str	r3, [r7, #20]
        break;
 8003224:	e004      	b.n	8003230 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	76bb      	strb	r3, [r7, #26]
        break;
 800322e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8086 	beq.w	8003344 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <UART_SetConfig+0x59c>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	461a      	mov	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fbb3 f3f2 	udiv	r3, r3, r2
 800324a:	005a      	lsls	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	b29b      	uxth	r3, r3
 800325e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d916      	bls.n	8003294 <UART_SetConfig+0x4c4>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d212      	bcs.n	8003294 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b29a      	uxth	r2, r3
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	4313      	orrs	r3, r2
 8003288:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e057      	b.n	8003344 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	76bb      	strb	r3, [r7, #26]
 8003298:	e054      	b.n	8003344 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329a:	7efb      	ldrb	r3, [r7, #27]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d828      	bhi.n	80032f2 <UART_SetConfig+0x522>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x4d8>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032dd 	.word	0x080032dd
 80032b4:	080032f3 	.word	0x080032f3
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	080032f3 	.word	0x080032f3
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	080032eb 	.word	0x080032eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7ff fa72 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 80032d0:	6178      	str	r0, [r7, #20]
        break;
 80032d2:	e013      	b.n	80032fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d4:	f7ff fa84 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 80032d8:	6178      	str	r0, [r7, #20]
        break;
 80032da:	e00f      	b.n	80032fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <UART_SetConfig+0x5a0>)
 80032de:	617b      	str	r3, [r7, #20]
        break;
 80032e0:	e00c      	b.n	80032fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e2:	f7ff f9f9 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 80032e6:	6178      	str	r0, [r7, #20]
        break;
 80032e8:	e008      	b.n	80032fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ee:	617b      	str	r3, [r7, #20]
        break;
 80032f0:	e004      	b.n	80032fc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	76bb      	strb	r3, [r7, #26]
        break;
 80032fa:	bf00      	nop
    }

    if (pclk != 0U)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <UART_SetConfig+0x59c>)
 8003308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330c:	461a      	mov	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fbb3 f2f2 	udiv	r2, r3, r2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d908      	bls.n	8003340 <UART_SetConfig+0x570>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d204      	bcs.n	8003340 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	e001      	b.n	8003344 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003360:	7ebb      	ldrb	r3, [r7, #26]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800336c:	0800391c 	.word	0x0800391c
 8003370:	00f42400 	.word	0x00f42400

08003374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01a      	beq.n	800348a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003472:	d10a      	bne.n	800348a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c8:	f7fd fc1a 	bl	8000d00 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d10e      	bne.n	80034fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f82c 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e022      	b.n	8003540 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d10e      	bne.n	8003526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f816 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e00c      	b.n	8003540 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003558:	e062      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003560:	d05e      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fd fbcd 	bl	8000d00 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <UART_WaitOnFlagUntilTimeout+0x30>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11d      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003586:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e045      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02e      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d126      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e00f      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d08d      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UARTEx_DisableFifoMode+0x16>
 800365a:	2302      	movs	r3, #2
 800365c:	e027      	b.n	80036ae <HAL_UARTEx_DisableFifoMode+0x66>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2224      	movs	r2, #36	; 0x24
 800366a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800368c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e02d      	b.n	800372e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f850 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800374a:	2302      	movs	r3, #2
 800374c:	e02d      	b.n	80037aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f812 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80037bc:	4a2f      	ldr	r2, [pc, #188]	; (800387c <UARTEx_SetNbDataToProcess+0xc8>)
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80037ca:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <UARTEx_SetNbDataToProcess+0xcc>)
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d108      	bne.n	80037f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037f0:	e03d      	b.n	800386e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037f6:	2308      	movs	r3, #8
 80037f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	0f5b      	lsrs	r3, r3, #29
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800381a:	7fbb      	ldrb	r3, [r7, #30]
 800381c:	7f3a      	ldrb	r2, [r7, #28]
 800381e:	f107 0120 	add.w	r1, r7, #32
 8003822:	440a      	add	r2, r1
 8003824:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003828:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800382c:	7f3a      	ldrb	r2, [r7, #28]
 800382e:	f107 0120 	add.w	r1, r7, #32
 8003832:	440a      	add	r2, r1
 8003834:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003838:	fb93 f3f2 	sdiv	r3, r3, r2
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	7f7a      	ldrb	r2, [r7, #29]
 8003848:	f107 0120 	add.w	r1, r7, #32
 800384c:	440a      	add	r2, r1
 800384e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003856:	7f7a      	ldrb	r2, [r7, #29]
 8003858:	f107 0120 	add.w	r1, r7, #32
 800385c:	440a      	add	r2, r1
 800385e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003862:	fb93 f3f2 	sdiv	r3, r3, r2
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800386e:	bf00      	nop
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	080038f4 	.word	0x080038f4
 8003880:	080038fc 	.word	0x080038fc

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0d      	ldr	r6, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1ba4      	subs	r4, r4, r6
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2500      	movs	r5, #0
 8003890:	42a5      	cmp	r5, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4e0b      	ldr	r6, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 f820 	bl	80038dc <_init>
 800389c:	1ba4      	subs	r4, r4, r6
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2500      	movs	r5, #0
 80038a2:	42a5      	cmp	r5, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ac:	4798      	blx	r3
 80038ae:	3501      	adds	r5, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b6:	4798      	blx	r3
 80038b8:	3501      	adds	r5, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	0800393c 	.word	0x0800393c
 80038c0:	0800393c 	.word	0x0800393c
 80038c4:	0800393c 	.word	0x0800393c
 80038c8:	08003940 	.word	0x08003940

080038cc <memset>:
 80038cc:	4402      	add	r2, r0
 80038ce:	4603      	mov	r3, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr
