
CORDIC_Sin_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002254  08002254  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08002254  08002254  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002254  08002254  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002254  08002254  00012254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800225c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000210  0800246c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800246c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006a42  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00008844  00000000  00000000  00026c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001733  00000000  00000000  0002f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000780  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e3bc4  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006b8  00000000  00000000  00114f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023aeb  00000000  00000000  00115600  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001390eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c44  00000000  00000000  00139168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800222c 	.word	0x0800222c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800222c 	.word	0x0800222c

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	; (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	; (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fa85 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f001 ffc5 	bl	80021d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f80f 	bl	800026c <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800025c:	0800225c 	.word	0x0800225c
  ldr r2, =_sbss
 8000260:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000264:	20000434 	.word	0x20000434

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 fa83 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f863 	bl	8000340 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fa06 	bl	800068c <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000280:	f000 f8be 	bl	8000400 <MX_DMA_Init>
  MX_CORDIC_Init();
 8000284:	f000 f8a8 	bl	80003d8 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */
  /*## Configure the CORDIC peripheral ####################################*/
  sCordicConfig.Function         = CORDIC_FUNCTION_SINE;     /* sine function */
 8000288:	4b28      	ldr	r3, [pc, #160]	; (800032c <main+0xc0>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision        = CORDIC_PRECISION_6CYCLES; /* max precision for q1.31 sine */
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <main+0xc0>)
 8000290:	2260      	movs	r2, #96	; 0x60
 8000292:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale            = CORDIC_SCALE_0;           /* no scale */
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <main+0xc0>)
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite          = CORDIC_NBWRITE_1;         /* One input data: angle. Second input data (modulus) is 1 after cordic reset */
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <main+0xc0>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead           = CORDIC_NBREAD_1;          /* One output data: sine */
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <main+0xc0>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize           = CORDIC_INSIZE_32BITS;     /* q1.31 format for input data */
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <main+0xc0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize          = CORDIC_OUTSIZE_32BITS;    /* q1.31 format for output data */
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <main+0xc0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]

  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80002b2:	491e      	ldr	r1, [pc, #120]	; (800032c <main+0xc0>)
 80002b4:	481e      	ldr	r0, [pc, #120]	; (8000330 <main+0xc4>)
 80002b6:	f000 fb25 	bl	8000904 <HAL_CORDIC_Configure>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <main+0x58>
  {
    /* Configuration Error */
    Error_Handler();
 80002c0:	f000 f8f7 	bl	80004b2 <Error_Handler>
  }

  /*## Start calculation of sines in DMA mode #############################*/
  if (HAL_CORDIC_Calculate_DMA(&hcordic, aAngles, aCalculatedSin,
 80002c4:	2303      	movs	r3, #3
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2340      	movs	r3, #64	; 0x40
 80002ca:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <main+0xc8>)
 80002cc:	491a      	ldr	r1, [pc, #104]	; (8000338 <main+0xcc>)
 80002ce:	4818      	ldr	r0, [pc, #96]	; (8000330 <main+0xc4>)
 80002d0:	f000 fb54 	bl	800097c <HAL_CORDIC_Calculate_DMA>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <main+0x72>
                               ARRAY_SIZE, CORDIC_DMA_DIR_IN_OUT) != HAL_OK)
  {
    /* Processing Error */
    Error_Handler();
 80002da:	f000 f8ea 	bl	80004b2 <Error_Handler>
  /*  Before starting a new process, you need to check the current state of the peripheral;
      if it’s busy you need to wait for the end of current transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      process, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_CORDIC_GetState(&hcordic) != HAL_CORDIC_STATE_READY)
 80002de:	bf00      	nop
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <main+0xc4>)
 80002e2:	f000 fc2d 	bl	8000b40 <HAL_CORDIC_GetState>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d1f9      	bne.n	80002e0 <main+0x74>
  {
  }

  /*## Compare CORDIC results to the reference values #####################*/
  for (uint32_t i = 0; i < ARRAY_SIZE; i++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	e014      	b.n	800031c <main+0xb0>
  {
    if (Check_Residual_Error(aCalculatedSin[i], aRefSin[i], DELTA) == FAIL)
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <main+0xc8>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002fa:	4a10      	ldr	r2, [pc, #64]	; (800033c <main+0xd0>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000306:	4619      	mov	r1, r3
 8000308:	f000 f8ac 	bl	8000464 <Check_Residual_Error>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d101      	bne.n	8000316 <main+0xaa>
    {
      Error_Handler();
 8000312:	f000 f8ce 	bl	80004b2 <Error_Handler>
  for (uint32_t i = 0; i < ARRAY_SIZE; i++)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b3f      	cmp	r3, #63	; 0x3f
 8000320:	d9e7      	bls.n	80002f2 <main+0x86>
    }
  }

  /* Correct CORDIC output values: Turn LED2 on */
  BSP_LED_On(LED2);
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f9e8 	bl	80006f8 <BSP_LED_On>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0xbc>
 800032a:	bf00      	nop
 800032c:	200003b4 	.word	0x200003b4
 8000330:	2000038c 	.word	0x2000038c
 8000334:	2000022c 	.word	0x2000022c
 8000338:	20000000 	.word	0x20000000
 800033c:	20000100 	.word	0x20000100

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b094      	sub	sp, #80	; 0x50
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2238      	movs	r2, #56	; 0x38
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 ff64 	bl	800221c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000362:	2000      	movs	r0, #0
 8000364:	f001 f986 	bl	8001674 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	2340      	movs	r3, #64	; 0x40
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037a:	2302      	movs	r3, #2
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800037e:	2304      	movs	r3, #4
 8000380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000382:	2355      	movs	r3, #85	; 0x55
 8000384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000386:	2302      	movs	r3, #2
 8000388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fa20 	bl	80017dc <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003a2:	f000 f886 	bl	80004b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2104      	movs	r1, #4
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fd24 	bl	8001e0c <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003ca:	f000 f872 	bl	80004b2 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3750      	adds	r7, #80	; 0x50
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_CORDIC_Init+0x20>)
 80003de:	4a07      	ldr	r2, [pc, #28]	; (80003fc <MX_CORDIC_Init+0x24>)
 80003e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_CORDIC_Init+0x20>)
 80003e4:	f000 fa5c 	bl	80008a0 <HAL_CORDIC_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80003ee:	f000 f860 	bl	80004b2 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000038c 	.word	0x2000038c
 80003fc:	40020c00 	.word	0x40020c00

08000400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_DMA_Init+0x60>)
 8000408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <MX_DMA_Init+0x60>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6493      	str	r3, [r2, #72]	; 0x48
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_DMA_Init+0x60>)
 8000414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_DMA_Init+0x60>)
 8000420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <MX_DMA_Init+0x60>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6493      	str	r3, [r2, #72]	; 0x48
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <MX_DMA_Init+0x60>)
 800042c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	200b      	movs	r0, #11
 800043c:	f000 fcbf 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000440:	200b      	movs	r0, #11
 8000442:	f000 fcd6 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	200c      	movs	r0, #12
 800044c:	f000 fcb7 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000450:	200c      	movs	r0, #12
 8000452:	f000 fcce 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <Check_Residual_Error>:
  * @retval Status
  *           PASS: Delta is below threshold
  *           FAIL: Delta is above threshold
  */
uint32_t Check_Residual_Error(int32_t VarA, int32_t VarB, uint32_t MaxError)
{
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  uint32_t status = PASS;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

  if ((VarA - VarB) >= 0)
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	2b00      	cmp	r3, #0
 800047c:	db09      	blt.n	8000492 <Check_Residual_Error+0x2e>
  {
    if ((VarA - VarB) > MaxError)
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4293      	cmp	r3, r2
 800048a:	d20b      	bcs.n	80004a4 <Check_Residual_Error+0x40>
    {
      status = FAIL;
 800048c:	2301      	movs	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	e008      	b.n	80004a4 <Check_Residual_Error+0x40>
    }
  }
  else
  {
    if ((VarB - VarA) > MaxError)
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4293      	cmp	r3, r2
 800049e:	d201      	bcs.n	80004a4 <Check_Residual_Error+0x40>
    {
      status = FAIL;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80004a4:	697b      	ldr	r3, [r7, #20]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	371c      	adds	r7, #28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
  {
    /* LED2 is blinking */
    BSP_LED_Toggle(LED2);
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 f934 	bl	8000724 <BSP_LED_Toggle>
    HAL_Delay(500);
 80004bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c0:	f000 f9cc 	bl	800085c <HAL_Delay>
    BSP_LED_Toggle(LED2);
 80004c4:	e7f7      	b.n	80004b6 <Error_Handler+0x4>
	...

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x44>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x44>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6613      	str	r3, [r2, #96]	; 0x60
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x44>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_MspInit+0x44>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <HAL_MspInit+0x44>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f0:	6593      	str	r3, [r2, #88]	; 0x58
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_MspInit+0x44>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004fe:	f001 f95d 	bl	80017bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <HAL_CORDIC_MspInit+0xe0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d161      	bne.n	80005e6 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <HAL_CORDIC_MspInit+0xe4>)
 8000524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <HAL_CORDIC_MspInit+0xe4>)
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	6493      	str	r3, [r2, #72]	; 0x48
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <HAL_CORDIC_MspInit+0xe4>)
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	f003 0308 	and.w	r3, r3, #8
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA1_Channel1;
 800053a:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 800053c:	4a2f      	ldr	r2, [pc, #188]	; (80005fc <HAL_CORDIC_MspInit+0xec>)
 800053e:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000540:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000542:	2271      	movs	r2, #113	; 0x71
 8000544:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000548:	2210      	movs	r2, #16
 800054a:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 800055a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800055e:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000566:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000576:	f000 fc57 	bl	8000e28 <HAL_DMA_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8000580:	f7ff ff97 	bl	80004b2 <Error_Handler>
    }

    __HAL_LINKDMA(hcordic,hdmaIn,hdma_cordic_write);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 8000588:	619a      	str	r2, [r3, #24]
 800058a:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <HAL_CORDIC_MspInit+0xe8>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6293      	str	r3, [r2, #40]	; 0x28

    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA1_Channel2;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <HAL_CORDIC_MspInit+0xf4>)
 8000594:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 8000598:	2270      	movs	r2, #112	; 0x70
 800059a:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005bc:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005cc:	f000 fc2c 	bl	8000e28 <HAL_DMA_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80005d6:	f7ff ff6c 	bl	80004b2 <Error_Handler>
    }

    __HAL_LINKDMA(hcordic,hdmaOut,hdma_cordic_read);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005de:	61da      	str	r2, [r3, #28]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_CORDIC_MspInit+0xf0>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	40021000 	.word	0x40021000
 80005f8:	200003d0 	.word	0x200003d0
 80005fc:	40020008 	.word	0x40020008
 8000600:	2000032c 	.word	0x2000032c
 8000604:	4002001c 	.word	0x4002001c

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f8e0 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <DMA1_Channel1_IRQHandler+0x10>)
 800066a:	f000 fd00 	bl	800106e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200003d0 	.word	0x200003d0

08000678 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <DMA1_Channel2_IRQHandler+0x10>)
 800067e:	f000 fcf6 	bl	800106e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000032c 	.word	0x2000032c

0800068c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <BSP_LED_Init+0x64>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <BSP_LED_Init+0x64>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <BSP_LED_Init+0x64>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80006ae:	2320      	movs	r3, #32
 80006b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <BSP_LED_Init+0x68>)
 80006c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fe1d 	bl	800130c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <BSP_LED_Init+0x68>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	2120      	movs	r1, #32
 80006dc:	2200      	movs	r2, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff96 	bl	8001610 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	20000200 	.word	0x20000200

080006f8 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <BSP_LED_On+0x28>)
 8000706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070a:	2120      	movs	r1, #32
 800070c:	2201      	movs	r2, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff7e 	bl	8001610 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000200 	.word	0x20000200

08000724 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <BSP_LED_Toggle+0x28>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	2220      	movs	r2, #32
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 ff80 	bl	8001640 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000200 	.word	0x20000200

08000750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <SystemInit+0x28>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <SystemInit+0x28>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SystemInit+0x28>)
 8000766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076a:	609a      	str	r2, [r3, #8]
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000786:	2003      	movs	r0, #3
 8000788:	f000 fb0e 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078c:	2000      	movs	r0, #0
 800078e:	f000 f80d 	bl	80007ac <HAL_InitTick>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	e001      	b.n	80007a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800079e:	f7ff fe93 	bl	80004c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a2:	79fb      	ldrb	r3, [r7, #7]

}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <HAL_InitTick+0x68>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d022      	beq.n	8000806 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_InitTick+0x6c>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_InitTick+0x68>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80007d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fb1a 	bl	8000e0e <HAL_SYSTICK_Config>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10f      	bne.n	8000800 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	d809      	bhi.n	80007fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e6:	2200      	movs	r2, #0
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ee:	f000 fae6 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_InitTick+0x70>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e007      	b.n	800080a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	e004      	b.n	800080a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000020c 	.word	0x2000020c
 8000818:	20000204 	.word	0x20000204
 800081c:	20000208 	.word	0x20000208

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x1c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x20>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4413      	add	r3, r2
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <HAL_IncTick+0x1c>)
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000430 	.word	0x20000430
 8000840:	2000020c 	.word	0x2000020c

08000844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_GetTick+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000430 	.word	0x20000430

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff ffee 	bl	8000844 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000874:	d004      	beq.n	8000880 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_Delay+0x40>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000880:	bf00      	nop
 8000882:	f7ff ffdf 	bl	8000844 <HAL_GetTick>
 8000886:	4602      	mov	r2, r0
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	429a      	cmp	r2, r3
 8000890:	d8f7      	bhi.n	8000882 <HAL_Delay+0x26>
  {
  }
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000020c 	.word	0x2000020c

080008a0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e023      	b.n	80008fa <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fe22 	bl	8000510 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2201      	movs	r2, #1
 80008f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b01      	cmp	r3, #1
 800091c:	d11d      	bne.n	800095a <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_CORDIC_Configure+0x74>)
 8000926:	4013      	ands	r3, r2
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	6811      	ldr	r1, [r2, #0]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	6992      	ldr	r2, [r2, #24]
 8000930:	4311      	orrs	r1, r2
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	6852      	ldr	r2, [r2, #4]
 8000936:	4311      	orrs	r1, r2
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	6912      	ldr	r2, [r2, #16]
 800093c:	4311      	orrs	r1, r2
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	6952      	ldr	r2, [r2, #20]
 8000942:	4311      	orrs	r1, r2
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	6892      	ldr	r2, [r2, #8]
 8000948:	4311      	orrs	r1, r2
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	68d2      	ldr	r2, [r2, #12]
 800094e:	4311      	orrs	r1, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	e007      	b.n	800096a <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	f043 0202 	orr.w	r2, r3, #2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	ff87f800 	.word	0xff87f800

0800097c <HAL_CORDIC_Calculate_DMA>:
  * @note   pInBuff and pOutBuff buffers must be 32-bit aligned to ensure a correct
  *         DMA transfer to and from the Peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate_DMA(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff, uint32_t NbCalc, uint32_t DMADirection)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_CORDIC_DMA_DIRECTION(DMADirection));

  /* Check parameters setting */
  if (NbCalc == 0U)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <HAL_CORDIC_Calculate_DMA+0x24>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000994:	f043 0201 	orr.w	r2, r3, #1
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e0b1      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
  }

  /* Check if CORDIC DMA direction "Out" is requested */
  if ((DMADirection == CORDIC_DMA_DIR_OUT) || (DMADirection == CORDIC_DMA_DIR_IN_OUT))
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d002      	beq.n	80009ac <HAL_CORDIC_Calculate_DMA+0x30>
 80009a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d10a      	bne.n	80009c2 <HAL_CORDIC_Calculate_DMA+0x46>
  {
    /* Check parameters setting */
    if (pOutBuff == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d107      	bne.n	80009c2 <HAL_CORDIC_Calculate_DMA+0x46>
    {
      /* Update the error code */
      hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	f043 0201 	orr.w	r2, r3, #1
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Return error status */
      return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e0a0      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
    }
  }

  /* Check if CORDIC DMA direction "In" is requested */
  if ((DMADirection == CORDIC_DMA_DIR_IN) || (DMADirection == CORDIC_DMA_DIR_IN_OUT))
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d002      	beq.n	80009ce <HAL_CORDIC_Calculate_DMA+0x52>
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d10a      	bne.n	80009e4 <HAL_CORDIC_Calculate_DMA+0x68>
  {
    /* Check parameters setting */
    if (pInBuff == NULL)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <HAL_CORDIC_Calculate_DMA+0x68>
    {
      /* Update the error code */
      hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	f043 0201 	orr.w	r2, r3, #1
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Return error status */
      return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e08f      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
    }
  }

  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	f040 8082 	bne.w	8000af6 <HAL_CORDIC_Calculate_DMA+0x17a>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2202      	movs	r2, #2
 80009fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get DMA direction */
    hcordic->DMADirection = DMADirection;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a04:	615a      	str	r2, [r3, #20]

    /* Check if CORDIC DMA direction "Out" is requested */
    if ((DMADirection == CORDIC_DMA_DIR_OUT) || (DMADirection == CORDIC_DMA_DIR_IN_OUT))
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d002      	beq.n	8000a12 <HAL_CORDIC_Calculate_DMA+0x96>
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d134      	bne.n	8000a7c <HAL_CORDIC_Calculate_DMA+0x100>
    {
      /* Set the CORDIC DMA transfer complete callback */
      hcordic->hdmaOut->XferCpltCallback = CORDIC_DMAOutCplt;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_CORDIC_Calculate_DMA+0x190>)
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hcordic->hdmaOut->XferErrorCallback = CORDIC_DMAError;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <HAL_CORDIC_Calculate_DMA+0x194>)
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check number of output data at each calculation,
         to retrieve the size of output data buffer */
      if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a30:	d103      	bne.n	8000a3a <HAL_CORDIC_Calculate_DMA+0xbe>
      {
        sizeoutbuff = 2U * NbCalc;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	e001      	b.n	8000a3e <HAL_CORDIC_Calculate_DMA+0xc2>
      }
      else
      {
        sizeoutbuff = NbCalc;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	61bb      	str	r3, [r7, #24]
      }

      outputaddr = (uint32_t)pOutBuff;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	617b      	str	r3, [r7, #20]

      /* Enable the DMA stream managing CORDIC output data read */
      if (HAL_DMA_Start_IT(hcordic->hdmaOut, (uint32_t)&hcordic->Instance->RDATA, outputaddr, sizeoutbuff) != HAL_OK)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	69d8      	ldr	r0, [r3, #28]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	f000 fa91 	bl	8000f78 <HAL_DMA_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <HAL_CORDIC_Calculate_DMA+0xf0>
      {
        /* Update the error code */
        hcordic->ErrorCode |= HAL_CORDIC_ERROR_DMA;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	f043 0208 	orr.w	r2, r3, #8
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e04b      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
      }

      /* Enable output data Read DMA requests */
      SET_BIT(hcordic->Instance->CSR, CORDIC_DMA_REN);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if CORDIC DMA direction "In" is requested */
    if ((DMADirection == CORDIC_DMA_DIR_IN) || (DMADirection == CORDIC_DMA_DIR_IN_OUT))
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d002      	beq.n	8000a88 <HAL_CORDIC_Calculate_DMA+0x10c>
 8000a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d134      	bne.n	8000af2 <HAL_CORDIC_Calculate_DMA+0x176>
    {
      /* Set the CORDIC DMA transfer complete callback */
      hcordic->hdmaIn->XferCpltCallback = CORDIC_DMAInCplt;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_CORDIC_Calculate_DMA+0x198>)
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hcordic->hdmaIn->XferErrorCallback = CORDIC_DMAError;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_CORDIC_Calculate_DMA+0x194>)
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check number of input data expected for each calculation,
         to retrieve the size of input data buffer */
      if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000aa6:	d103      	bne.n	8000ab0 <HAL_CORDIC_Calculate_DMA+0x134>
      {
        sizeinbuff = 2U * NbCalc;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e001      	b.n	8000ab4 <HAL_CORDIC_Calculate_DMA+0x138>
      }
      else
      {
        sizeinbuff = NbCalc;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	61fb      	str	r3, [r7, #28]
      }

      inputaddr  = (uint32_t)pInBuff;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	613b      	str	r3, [r7, #16]

      /* Enable the DMA stream managing CORDIC input data write */
      if (HAL_DMA_Start_IT(hcordic->hdmaIn, inputaddr, (uint32_t)&hcordic->Instance->WDATA, sizeinbuff) != HAL_OK)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6998      	ldr	r0, [r3, #24]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	6939      	ldr	r1, [r7, #16]
 8000ac8:	f000 fa56 	bl	8000f78 <HAL_DMA_Start_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <HAL_CORDIC_Calculate_DMA+0x166>
      {
        /* Update the error code */
        hcordic->ErrorCode |= HAL_CORDIC_ERROR_DMA;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	f043 0208 	orr.w	r2, r3, #8
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e010      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
      }

      /* Enable input data Write DMA request */
      SET_BIT(hcordic->Instance->CSR, CORDIC_DMA_WEN);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000af0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e006      	b.n	8000b04 <HAL_CORDIC_Calculate_DMA+0x188>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	f043 0202 	orr.w	r2, r3, #2
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
  }
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08000b9f 	.word	0x08000b9f
 8000b10:	08000bd9 	.word	0x08000bd9
 8000b14:	08000b5d 	.word	0x08000b5d

08000b18 <HAL_CORDIC_ErrorCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_ErrorCallback(CORDIC_HandleTypeDef *hcordic)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_ErrorCallback can be implemented in the user file
   */
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_CORDIC_GetState>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval HAL state
  */
HAL_CORDIC_StateTypeDef HAL_CORDIC_GetState(CORDIC_HandleTypeDef *hcordic)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Return CORDIC handle state */
  return hcordic->State;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b4e:	b2db      	uxtb	r3, r3
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <CORDIC_DMAInCplt>:
  * @brief  DMA CORDIC Input Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void CORDIC_DMAInCplt(DMA_HandleTypeDef *hdma)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  CORDIC_HandleTypeDef *hcordic = (CORDIC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Disable the DMA transfer for input request */
  CLEAR_BIT(hcordic->Instance->CSR, CORDIC_DMA_WEN);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b78:	601a      	str	r2, [r3, #0]

  /* Check if DMA direction is CORDIC Input only (no DMA for CORDIC Output) */
  if (hcordic->DMADirection == CORDIC_DMA_DIR_IN)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d109      	bne.n	8000b96 <CORDIC_DMAInCplt+0x3a>
  {
    /* Change the CORDIC DMA direction to none */
    hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]

    /* Change the CORDIC state to ready */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
    /*Call registered callback*/
    hcordic->CalculateCpltCallback(hcordic);
#else
    /*Call legacy weak (surcharged) callback*/
    HAL_CORDIC_CalculateCpltCallback(hcordic);
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff ffcb 	bl	8000b2c <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <CORDIC_DMAOutCplt>:
  * @brief  DMA CORDIC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void CORDIC_DMAOutCplt(DMA_HandleTypeDef *hdma)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  CORDIC_HandleTypeDef *hcordic = (CORDIC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Disable the DMA transfer for output request */
  CLEAR_BIT(hcordic->Instance->CSR, CORDIC_DMA_REN);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000bba:	601a      	str	r2, [r3, #0]

  /* Change the CORDIC DMA direction to none */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]

  /* Change the CORDIC state to ready */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
  /*Call registered callback*/
  hcordic->CalculateCpltCallback(hcordic);
#else
  /*Call legacy weak (surcharged) callback*/
  HAL_CORDIC_CalculateCpltCallback(hcordic);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ffae 	bl	8000b2c <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <CORDIC_DMAError>:
  * @brief  DMA CORDIC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void CORDIC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  CORDIC_HandleTypeDef *hcordic = (CORDIC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Set CORDIC handle state to error */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Set CORDIC handle error code to DMA error */
  hcordic->ErrorCode |= HAL_CORDIC_ERROR_DMA;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	f043 0208 	orr.w	r2, r3, #8
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
  /*Call registered callback*/
  hcordic->ErrorCallback(hcordic);
#else
  /*Call legacy weak (surcharged) callback*/
  HAL_CORDIC_ErrorCallback(hcordic);
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f7ff ff8c 	bl	8000b18 <HAL_CORDIC_ErrorCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff40 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff33 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa4 	bl	8000d64 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e08d      	b.n	8000f56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_DMA_Init+0x138>)
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d80f      	bhi.n	8000e66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <HAL_DMA_Init+0x13c>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a45      	ldr	r2, [pc, #276]	; (8000f68 <HAL_DMA_Init+0x140>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	009a      	lsls	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <HAL_DMA_Init+0x144>)
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	e00e      	b.n	8000e84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_DMA_Init+0x148>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <HAL_DMA_Init+0x140>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a3c      	ldr	r2, [pc, #240]	; (8000f74 <HAL_DMA_Init+0x14c>)
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f9b6 	bl	8001248 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee4:	d102      	bne.n	8000eec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d010      	beq.n	8000f2c <HAL_DMA_Init+0x104>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d80c      	bhi.n	8000f2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f9d6 	bl	80012c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e008      	b.n	8000f3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020407 	.word	0x40020407
 8000f64:	bffdfff8 	.word	0xbffdfff8
 8000f68:	cccccccd 	.word	0xcccccccd
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	bffdfbf8 	.word	0xbffdfbf8
 8000f74:	40020400 	.word	0x40020400

08000f78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Start_IT+0x20>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e066      	b.n	8001066 <HAL_DMA_Start_IT+0xee>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d155      	bne.n	8001058 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f8fb 	bl	80011cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 020e 	orr.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00f      	b.n	8001010 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0204 	bic.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 020a 	orr.w	r2, r2, #10
 800100e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800102c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001044:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0201 	orr.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e005      	b.n	8001064 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001060:	2302      	movs	r3, #2
 8001062:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001064:	7dfb      	ldrb	r3, [r7, #23]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d026      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x7a>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d021      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f003 021f 	and.w	r2, r3, #31
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2104      	movs	r1, #4
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d071      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010e6:	e06c      	b.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2202      	movs	r2, #2
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02e      	beq.n	800115a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d029      	beq.n	800115a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 020a 	bic.w	r2, r2, #10
 8001122:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	2102      	movs	r1, #2
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d038      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001158:	e033      	b.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2208      	movs	r2, #8
 8001164:	409a      	lsls	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02a      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d025      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 020e 	bic.w	r2, r2, #14
 8001186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 021f 	and.w	r2, r3, #31
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d108      	bne.n	800122c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800122a:	e007      	b.n	800123c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001258:	429a      	cmp	r2, r3
 800125a:	d802      	bhi.n	8001262 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e001      	b.n	8001266 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001264:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3b08      	subs	r3, #8
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	009a      	lsls	r2, r3, #2
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001292:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	2201      	movs	r2, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40020407 	.word	0x40020407
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020820 	.word	0x40020820
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	40020880 	.word	0x40020880

080012c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	1000823f 	.word	0x1000823f
 8001308:	40020940 	.word	0x40020940

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800131a:	e15a      	b.n	80015d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 814c 	beq.w	80015cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d00b      	beq.n	8001354 <HAL_GPIO_Init+0x48>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001348:	2b11      	cmp	r3, #17
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b12      	cmp	r3, #18
 8001352:	d130      	bne.n	80013b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	2201      	movs	r2, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f003 0201 	and.w	r2, r3, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0xea>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80a6 	beq.w	80015cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_GPIO_Init+0x2e4>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001484:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_GPIO_Init+0x2e4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6613      	str	r3, [r2, #96]	; 0x60
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_GPIO_Init+0x2e4>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001498:	4a56      	ldr	r2, [pc, #344]	; (80015f4 <HAL_GPIO_Init+0x2e8>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c2:	d01f      	beq.n	8001504 <HAL_GPIO_Init+0x1f8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x2ec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d019      	beq.n	8001500 <HAL_GPIO_Init+0x1f4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d013      	beq.n	80014fc <HAL_GPIO_Init+0x1f0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <HAL_GPIO_Init+0x2f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00d      	beq.n	80014f8 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a49      	ldr	r2, [pc, #292]	; (8001604 <HAL_GPIO_Init+0x2f8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2fc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014ec:	2305      	movs	r3, #5
 80014ee:	e00a      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 80014f0:	2306      	movs	r3, #6
 80014f2:	e008      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1fa>
 8001504:	2300      	movs	r3, #0
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001516:	4937      	ldr	r1, [pc, #220]	; (80015f4 <HAL_GPIO_Init+0x2e8>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_GPIO_Init+0x300>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001548:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_GPIO_Init+0x300>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_GPIO_Init+0x300>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_GPIO_Init+0x300>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_GPIO_Init+0x300>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_GPIO_Init+0x300>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_GPIO_Init+0x300>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_GPIO_Init+0x300>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f ae9d 	bne.w	800131c <HAL_GPIO_Init+0x10>
  }
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00
 8001604:	48001000 	.word	0x48001000
 8001608:	48001400 	.word	0x48001400
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43d9      	mvns	r1, r3
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	400b      	ands	r3, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d141      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001682:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168e:	d131      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001696:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800169c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a8:	4a41      	ldr	r2, [pc, #260]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b0:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2232      	movs	r2, #50	; 0x32
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	4a3f      	ldr	r2, [pc, #252]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	e002      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ce:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d102      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f2      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ee:	d158      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e057      	b.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fa:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001704:	e04d      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170c:	d141      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171a:	d131      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2232      	movs	r2, #50	; 0x32
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001752:	e002      	b.n	800175a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3b01      	subs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001766:	d102      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f2      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d112      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e011      	b.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001790:	e007      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40007000 	.word	0x40007000
 80017b4:	20000204 	.word	0x20000204
 80017b8:	431bde83 	.word	0x431bde83

080017bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ca:	6093      	str	r3, [r2, #8]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40007000 	.word	0x40007000

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e308      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d075      	beq.n	80018e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4ba3      	ldr	r3, [pc, #652]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001804:	4ba0      	ldr	r3, [pc, #640]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d102      	bne.n	800181a <HAL_RCC_OscConfig+0x3e>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d002      	beq.n	8001820 <HAL_RCC_OscConfig+0x44>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d10b      	bne.n	8001838 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	4b99      	ldr	r3, [pc, #612]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05b      	beq.n	80018e4 <HAL_RCC_OscConfig+0x108>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d157      	bne.n	80018e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e2e3      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x74>
 8001842:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a90      	ldr	r2, [pc, #576]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e01d      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b8b      	ldr	r3, [pc, #556]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001874:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a83      	ldr	r2, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a80      	ldr	r2, [pc, #512]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7fe ffd6 	bl	8000844 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7fe ffd2 	bl	8000844 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e2a8      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0xc0>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7fe ffc2 	bl	8000844 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7fe ffbe 	bl	8000844 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e294      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	4b6c      	ldr	r3, [pc, #432]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0xe8>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d075      	beq.n	80019de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fc:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x136>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d002      	beq.n	8001918 <HAL_RCC_OscConfig+0x13c>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d11f      	bne.n	8001958 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_OscConfig+0x154>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e267      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	4952      	ldr	r1, [pc, #328]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001944:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_RCC_OscConfig+0x2b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe ff2f 	bl	80007ac <HAL_InitTick>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d043      	beq.n	80019dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e253      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7fe ff6a 	bl	8000844 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001974:	f7fe ff66 	bl	8000844 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e23c      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4939      	ldr	r1, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
 80019a6:	e01a      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7fe ff46 	bl	8000844 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019bc:	f7fe ff42 	bl	8000844 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e218      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x1e0>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7fe ff1f 	bl	8000844 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7fe ff1b 	bl	8000844 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1f1      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ef      	beq.n	8001a0a <HAL_RCC_OscConfig+0x22e>
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7fe ff02 	bl	8000844 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7fe fefe 	bl	8000844 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1d4      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ef      	bne.n	8001a44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ab 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2b4>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_OscConfig+0x2b6>
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	20000208 	.word	0x20000208
 8001a90:	2300      	movs	r3, #0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00d      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4baf      	ldr	r3, [pc, #700]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4aae      	ldr	r2, [pc, #696]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa2:	4bac      	ldr	r3, [pc, #688]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab2:	4ba9      	ldr	r3, [pc, #676]	; (8001d58 <HAL_RCC_OscConfig+0x57c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001abe:	4ba6      	ldr	r3, [pc, #664]	; (8001d58 <HAL_RCC_OscConfig+0x57c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4aa5      	ldr	r2, [pc, #660]	; (8001d58 <HAL_RCC_OscConfig+0x57c>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7fe febb 	bl	8000844 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7fe feb7 	bl	8000844 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e18d      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <HAL_RCC_OscConfig+0x57c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d108      	bne.n	8001b0a <HAL_RCC_OscConfig+0x32e>
 8001af8:	4b96      	ldr	r3, [pc, #600]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	4a95      	ldr	r2, [pc, #596]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b08:	e024      	b.n	8001b54 <HAL_RCC_OscConfig+0x378>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d110      	bne.n	8001b34 <HAL_RCC_OscConfig+0x358>
 8001b12:	4b90      	ldr	r3, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b18:	4a8e      	ldr	r2, [pc, #568]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b22:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a8a      	ldr	r2, [pc, #552]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x378>
 8001b34:	4b87      	ldr	r3, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a86      	ldr	r2, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b44:	4b83      	ldr	r3, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	4a82      	ldr	r2, [pc, #520]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d016      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fe72 	bl	8000844 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7fe fe6e 	bl	8000844 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e142      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ed      	beq.n	8001b64 <HAL_RCC_OscConfig+0x388>
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fe5b 	bl	8000844 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7fe fe57 	bl	8000844 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e12b      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ed      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a64      	ldr	r2, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d03c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bdc:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7fe fe2a 	bl	8000844 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf4:	f7fe fe26 	bl	8000844 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0fc      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ef      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x418>
 8001c14:	e01b      	b.n	8001c4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7fe fe0d 	bl	8000844 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7fe fe09 	bl	8000844 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0df      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ef      	bne.n	8001c2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80d3 	beq.w	8001dfe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	f000 808d 	beq.w	8001d80 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d15a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fde3 	bl	8000844 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe fddf 	bl	8000844 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0b5      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x580>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6a11      	ldr	r1, [r2, #32]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0552      	lsls	r2, r2, #21
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0652      	lsls	r2, r2, #25
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	491d      	ldr	r1, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fda2 	bl	8000844 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fd9e 	bl	8000844 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e074      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x528>
 8001d22:	e06c      	b.n	8001dfe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fd7a 	bl	8000844 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d52:	e00e      	b.n	8001d72 <HAL_RCC_OscConfig+0x596>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe fd70 	bl	8000844 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e046      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_RCC_OscConfig+0x62c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x584>
 8001d7e:	e03e      	b.n	8001dfe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e039      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_RCC_OscConfig+0x62c>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d12c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d123      	bne.n	8001dfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d11b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d113      	bne.n	8001dfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e11e      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 020f 	bic.w	r2, r3, #15
 8001e3a:	498c      	ldr	r1, [pc, #560]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b8a      	ldr	r3, [pc, #552]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e106      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d073      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d129      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0f4      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e78:	f000 f966 	bl	8002148 <RCC_GetSysClockFreqFromPLLSource>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_ClockConfig+0x268>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d93f      	bls.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d033      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12f      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eae:	4a70      	ldr	r2, [pc, #448]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e024      	b.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0c6      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0be      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ee4:	f000 f8ce 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a61      	ldr	r2, [pc, #388]	; (8002074 <HAL_RCC_ClockConfig+0x268>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d909      	bls.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efa:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4957      	ldr	r1, [pc, #348]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7fe fc94 	bl	8000844 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fc90 	bl	8000844 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e095      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b80      	cmp	r3, #128	; 0x80
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a32      	ldr	r2, [pc, #200]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21d      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	4929      	ldr	r1, [pc, #164]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fc3a 	bl	8000844 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7fe fc36 	bl	8000844 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e03b      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1ed      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4917      	ldr	r1, [pc, #92]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490f      	ldr	r1, [pc, #60]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002036:	f000 f825 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800203a:	4601      	mov	r1, r0
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_RCC_ClockConfig+0x26c>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa21 f303 	lsr.w	r3, r1, r3
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_RCC_ClockConfig+0x270>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x274>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fba6 	bl	80007ac <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	04c4b400 	.word	0x04c4b400
 8002078:	08002244 	.word	0x08002244
 800207c:	20000204 	.word	0x20000204
 8002080:	20000208 	.word	0x20000208

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d102      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e047      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e03e      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d136      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3301      	adds	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	0a12      	lsrs	r2, r2, #8
 80020e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
      break;
 80020f0:	e00c      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0a12      	lsrs	r2, r2, #8
 8002100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
      break;
 800210a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e001      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800212c:	693b      	ldr	r3, [r7, #16]
}
 800212e:	4618      	mov	r0, r3
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	00f42400 	.word	0x00f42400
 8002144:	016e3600 	.word	0x016e3600

08002148 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214e:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d10c      	bne.n	8002186 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002176:	68d2      	ldr	r2, [r2, #12]
 8002178:	0a12      	lsrs	r2, r2, #8
 800217a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
    break;
 8002184:	e00c      	b.n	80021a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	0a12      	lsrs	r2, r2, #8
 8002194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    break;
 800219e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0e5b      	lsrs	r3, r3, #25
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	3301      	adds	r3, #1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021ba:	687b      	ldr	r3, [r7, #4]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000
 80021cc:	016e3600 	.word	0x016e3600
 80021d0:	00f42400 	.word	0x00f42400

080021d4 <__libc_init_array>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4e0d      	ldr	r6, [pc, #52]	; (800220c <__libc_init_array+0x38>)
 80021d8:	4c0d      	ldr	r4, [pc, #52]	; (8002210 <__libc_init_array+0x3c>)
 80021da:	1ba4      	subs	r4, r4, r6
 80021dc:	10a4      	asrs	r4, r4, #2
 80021de:	2500      	movs	r5, #0
 80021e0:	42a5      	cmp	r5, r4
 80021e2:	d109      	bne.n	80021f8 <__libc_init_array+0x24>
 80021e4:	4e0b      	ldr	r6, [pc, #44]	; (8002214 <__libc_init_array+0x40>)
 80021e6:	4c0c      	ldr	r4, [pc, #48]	; (8002218 <__libc_init_array+0x44>)
 80021e8:	f000 f820 	bl	800222c <_init>
 80021ec:	1ba4      	subs	r4, r4, r6
 80021ee:	10a4      	asrs	r4, r4, #2
 80021f0:	2500      	movs	r5, #0
 80021f2:	42a5      	cmp	r5, r4
 80021f4:	d105      	bne.n	8002202 <__libc_init_array+0x2e>
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021fc:	4798      	blx	r3
 80021fe:	3501      	adds	r5, #1
 8002200:	e7ee      	b.n	80021e0 <__libc_init_array+0xc>
 8002202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002206:	4798      	blx	r3
 8002208:	3501      	adds	r5, #1
 800220a:	e7f2      	b.n	80021f2 <__libc_init_array+0x1e>
 800220c:	08002254 	.word	0x08002254
 8002210:	08002254 	.word	0x08002254
 8002214:	08002254 	.word	0x08002254
 8002218:	08002258 	.word	0x08002258

0800221c <memset>:
 800221c:	4402      	add	r2, r0
 800221e:	4603      	mov	r3, r0
 8002220:	4293      	cmp	r3, r2
 8002222:	d100      	bne.n	8002226 <memset+0xa>
 8002224:	4770      	bx	lr
 8002226:	f803 1b01 	strb.w	r1, [r3], #1
 800222a:	e7f9      	b.n	8002220 <memset+0x4>

0800222c <_init>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	bf00      	nop
 8002230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002232:	bc08      	pop	{r3}
 8002234:	469e      	mov	lr, r3
 8002236:	4770      	bx	lr

08002238 <_fini>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	bf00      	nop
 800223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223e:	bc08      	pop	{r3}
 8002240:	469e      	mov	lr, r3
 8002242:	4770      	bx	lr
