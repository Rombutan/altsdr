/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    DAC/DAC_SignalsGeneration/Src/main.c
  * @author  MCD Application Team
  * @brief   This example provides a short description of how to use the DAC
  *          peripheral to generate several signals.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
  DAC_WAVE_SAWTOOTH,
  DAC_WAVE_SINE
} t_wavetype;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SAWTOOTH_NB_STEPS  60
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* USER CODE BEGIN PV */
__IO uint8_t ubKeyPressed = RESET;
__IO t_wavetype ubSelectedWavesForm = DAC_WAVE_SAWTOOTH;

/* Sine wave values for a complete symbol */
uint16_t sinewave[600] = {2000,2021,2042,2063,2084,2105,2126,2146,2167,2188,
		2209,2230,2251,2271,2292,2313,2334,2354,2375,2395,
		2416,2436,2457,2477,2497,2518,2538,2558,2578,2598,
		2618,2638,2658,2677,2697,2717,2736,2756,2775,2794,
		2813,2833,2852,2870,2889,2908,2927,2945,2964,2982,
		3000,3018,3036,3054,3072,3089,3107,3124,3141,3159,
		3176,3192,3209,3226,3242,3259,3275,3291,3307,3323,
		3338,3354,3369,3384,3399,3414,3429,3444,3458,3472,
		3486,3500,3514,3528,3541,3554,3567,3580,3593,3606,
		3618,3630,3642,3654,3666,3677,3689,3700,3711,3721,
		3732,3742,3753,3763,3772,3782,3791,3801,3810,3818,
		3827,3836,3844,3852,3860,3867,3875,3882,3889,3896,
		3902,3908,3915,3921,3926,3932,3937,3942,3947,3952,
		3956,3961,3965,3968,3972,3975,3979,3981,3984,3987,
		3989,3991,3993,3995,3996,3997,3998,3999,4000,4000,
		4000,4000,4000,3999,3998,3997,3996,3995,3993,3991,
		3989,3987,3984,3981,3979,3975,3972,3968,3965,3961,
		3956,3952,3947,3942,3937,3932,3926,3921,3915,3908,
		3902,3896,3889,3882,3875,3867,3860,3852,3844,3836,
		3827,3818,3810,3801,3791,3782,3772,3763,3753,3742,
		3732,3721,3711,3700,3689,3677,3666,3654,3642,3630,
		3618,3606,3593,3580,3567,3554,3541,3528,3514,3500,
		3486,3472,3458,3444,3429,3414,3399,3384,3369,3354,
		3338,3323,3307,3291,3275,3259,3242,3226,3209,3192,
		3176,3159,3141,3124,3107,3089,3072,3054,3036,3018,
		3000,2982,2964,2945,2927,2908,2889,2870,2852,2833,
		2813,2794,2775,2756,2736,2717,2697,2677,2658,2638,
		2618,2598,2578,2558,2538,2518,2497,2477,2457,2436,
		2416,2395,2375,2354,2334,2313,2292,2271,2251,2230,
		2209,2188,2167,2146,2126,2105,2084,2063,2042,2021,
		2000,1979,1958,1937,1916,1895,1874,1854,1833,1812,
		1791,1770,1749,1729,1708,1687,1666,1646,1625,1605,
		1584,1564,1543,1523,1503,1482,1462,1442,1422,1402,
		1382,1362,1342,1323,1303,1283,1264,1244,1225,1206,
		1187,1167,1148,1130,1111,1092,1073,1055,1036,1018,
		1000,982,964,946,928,911,893,876,859,841,
		824,808,791,774,758,741,725,709,693,677,
		662,646,631,616,601,586,571,556,542,528,
		514,500,486,472,459,446,433,420,407,394,
		382,370,358,346,334,323,311,300,289,279,
		268,258,247,237,228,218,209,199,190,182,
		173,164,156,148,140,133,125,118,111,104,
		98,92,85,79,74,68,63,58,53,48,
		44,39,35,32,28,25,21,19,16,13,
		11,9,7,5,4,3,2,1,0,0,
		0,0,0,1,2,3,4,5,7,9,
		11,13,16,19,21,25,28,32,35,39,
		44,48,53,58,63,68,74,79,85,92,
		98,104,111,118,125,133,140,148,156,164,
		173,182,190,199,209,218,228,237,247,258,
		268,279,289,300,311,323,334,346,358,370,
		382,394,407,420,433,446,459,472,486,500,
		514,528,542,556,571,586,601,616,631,646,
		662,677,693,709,725,741,758,774,791,808,
		824,841,859,876,893,911,928,946,964,982,
		1000,1018,1036,1055,1073,1092,1111,1130,1148,1167,
		1187,1206,1225,1244,1264,1283,1303,1323,1342,1362,
		1382,1402,1422,1442,1462,1482,1503,1523,1543,1564,
		1584,1605,1625,1646,1666,1687,1708,1729,1749,1770,
		1791,1812,1833,1854,1874,1895,1916,1937,1958,1979,};

uint16_t sinewaveconst[600] = {2000,2021,2042,2063,2084,2105,2126,2146,2167,2188,
		2209,2230,2251,2271,2292,2313,2334,2354,2375,2395,
		2416,2436,2457,2477,2497,2518,2538,2558,2578,2598,
		2618,2638,2658,2677,2697,2717,2736,2756,2775,2794,
		2813,2833,2852,2870,2889,2908,2927,2945,2964,2982,
		3000,3018,3036,3054,3072,3089,3107,3124,3141,3159,
		3176,3192,3209,3226,3242,3259,3275,3291,3307,3323,
		3338,3354,3369,3384,3399,3414,3429,3444,3458,3472,
		3486,3500,3514,3528,3541,3554,3567,3580,3593,3606,
		3618,3630,3642,3654,3666,3677,3689,3700,3711,3721,
		3732,3742,3753,3763,3772,3782,3791,3801,3810,3818,
		3827,3836,3844,3852,3860,3867,3875,3882,3889,3896,
		3902,3908,3915,3921,3926,3932,3937,3942,3947,3952,
		3956,3961,3965,3968,3972,3975,3979,3981,3984,3987,
		3989,3991,3993,3995,3996,3997,3998,3999,4000,4000,
		4000,4000,4000,3999,3998,3997,3996,3995,3993,3991,
		3989,3987,3984,3981,3979,3975,3972,3968,3965,3961,
		3956,3952,3947,3942,3937,3932,3926,3921,3915,3908,
		3902,3896,3889,3882,3875,3867,3860,3852,3844,3836,
		3827,3818,3810,3801,3791,3782,3772,3763,3753,3742,
		3732,3721,3711,3700,3689,3677,3666,3654,3642,3630,
		3618,3606,3593,3580,3567,3554,3541,3528,3514,3500,
		3486,3472,3458,3444,3429,3414,3399,3384,3369,3354,
		3338,3323,3307,3291,3275,3259,3242,3226,3209,3192,
		3176,3159,3141,3124,3107,3089,3072,3054,3036,3018,
		3000,2982,2964,2945,2927,2908,2889,2870,2852,2833,
		2813,2794,2775,2756,2736,2717,2697,2677,2658,2638,
		2618,2598,2578,2558,2538,2518,2497,2477,2457,2436,
		2416,2395,2375,2354,2334,2313,2292,2271,2251,2230,
		2209,2188,2167,2146,2126,2105,2084,2063,2042,2021,
		2000,1979,1958,1937,1916,1895,1874,1854,1833,1812,
		1791,1770,1749,1729,1708,1687,1666,1646,1625,1605,
		1584,1564,1543,1523,1503,1482,1462,1442,1422,1402,
		1382,1362,1342,1323,1303,1283,1264,1244,1225,1206,
		1187,1167,1148,1130,1111,1092,1073,1055,1036,1018,
		1000,982,964,946,928,911,893,876,859,841,
		824,808,791,774,758,741,725,709,693,677,
		662,646,631,616,601,586,571,556,542,528,
		514,500,486,472,459,446,433,420,407,394,
		382,370,358,346,334,323,311,300,289,279,
		268,258,247,237,228,218,209,199,190,182,
		173,164,156,148,140,133,125,118,111,104,
		98,92,85,79,74,68,63,58,53,48,
		44,39,35,32,28,25,21,19,16,13,
		11,9,7,5,4,3,2,1,0,0,
		0,0,0,1,2,3,4,5,7,9,
		11,13,16,19,21,25,28,32,35,39,
		44,48,53,58,63,68,74,79,85,92,
		98,104,111,118,125,133,140,148,156,164,
		173,182,190,199,209,218,228,237,247,258,
		268,279,289,300,311,323,334,346,358,370,
		382,394,407,420,433,446,459,472,486,500,
		514,528,542,556,571,586,601,616,631,646,
		662,677,693,709,725,741,758,774,791,808,
		824,841,859,876,893,911,928,946,964,982,
		1000,1018,1036,1055,1073,1092,1111,1130,1148,1167,
		1187,1206,1225,1244,1264,1283,1303,1323,1342,1362,
		1382,1402,1422,1442,1462,1482,1503,1523,1543,1564,
		1584,1605,1625,1646,1666,1687,1708,1729,1749,1770,
		1791,1812,1833,1854,1874,1895,1916,1937,1958,1979,};

//uint16_t sinewave[2] = {20, 4000};

int i = 0;
int counter = 0;

static DAC_ChannelConfTypeDef sDacConfig = {0};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_DAC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
static void DAC_ChangeWave();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DAC1_Init();
  MX_TIM2_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  /* Configure LED2 */
  //BSP_LED_Init(LED2);
  /* Configure User push-button in Interrupt mode */
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);

  /*## Start Time Base triggers ############################################*/
  /* Enable TIM peripheral counter */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }

  /*## Start DAC conversions ###############################################*/
  /* Start DAC wave generation */
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
  {
    /* DAC conversion start error */
    Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //BSP_LED_On(LED2);

  ubSelectedWavesForm = DAC_WAVE_SINE;


  DAC_ChangeWave();

  TIM6->ARR = 5;

  ubKeyPressed = RESET;
  while (1)
  {
	  counter++;
	  if (counter < 150){for(i = 0; i < 600; i++) sinewave[i] /= 1.01;}
	  else if (counter < 300 && counter > 150){for(i = 0; i < 600; i++) sinewave[i] *= 1.01;}
	  else if (counter > 301){counter = 0; for(i = 0; i < 600; i++) sinewave[i] = sinewaveconst[i];}
	  HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 75;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
  sConfig.DAC_DMADoubleDataMode = DISABLE;
  sConfig.DAC_SignedFormat = DISABLE;
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Sawtooth wave generation on DAC OUT1
  */
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* Save DAC configuration to reconfigure it upon needs later */
  sDacConfig = sConfig;
  /* USER CODE END DAC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 149;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 2499;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

static void DAC_ChangeWave()
{
  uint32_t tmp;

  /* Suspend Time Base triggers */
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }
  if (HAL_TIM_Base_Stop(&htim6) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }

  if (HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1) != HAL_OK)
  {Error_Handler();}

  /* Re-configure DAC */
  tmp = sDacConfig.DAC_Trigger;
  sDacConfig.DAC_Trigger = sDacConfig.DAC_Trigger2;
  sDacConfig.DAC_Trigger2 = tmp;
  if (HAL_DAC_ConfigChannel(&hdac1, &sDacConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
                            (uint32_t *)sinewave,
                            60,
                            DAC_ALIGN_12B_R
                           ) != HAL_OK)
      {Error_Handler();}

  /* Resume Time Base triggers */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
  {
    /* Counter enable error */
    Error_Handler();
  }
}


/**
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Change the wave */
  ubKeyPressed = SET;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED2 is slowly blinking (1 sec. period) */
  while(1)
  {
//    BSP_LED_Toggle(LED2);
    HAL_Delay(1000);
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
