
DAC_GenerateConstantSignal_TriggerSW_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800182c  0800182c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800182c  0800182c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800182c  0800182c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800182c  0800182c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800182c  0800182c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001838  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001838  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_line   000032b7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000047a1  00000000  00000000  000232eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000d58  00000000  00000000  00027a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004f0  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b7096  00000000  00000000  00028cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000478  00000000  00000000  000dfd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001e3c4  00000000  00000000  000e01e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe5ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000135c  00000000  00000000  000fe628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001814 	.word	0x08001814

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08001814 	.word	0x08001814

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	; (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	; (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fdd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f001 fac1 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 fbcb 	bl	80009e4 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800025c:	08001834 	.word	0x08001834
  ldr r2, =_sbss
 8000260:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000264:	20000024 	.word	0x20000024

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f003 0307 	and.w	r3, r3, #7
 800027a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <__NVIC_SetPriorityGrouping+0x44>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029e:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <__NVIC_SetPriorityGrouping+0x44>)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	60d3      	str	r3, [r2, #12]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__NVIC_GetPriorityGrouping+0x18>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	0a1b      	lsrs	r3, r3, #8
 80002be:	f003 0307 	and.w	r3, r3, #7
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db0b      	blt.n	80002fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f003 021f 	and.w	r2, r3, #31
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <__NVIC_EnableIRQ+0x38>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	095b      	lsrs	r3, r3, #5
 80002f0:	2001      	movs	r0, #1
 80002f2:	fa00 f202 	lsl.w	r2, r0, r2
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100

0800030c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db0a      	blt.n	8000336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	490c      	ldr	r1, [pc, #48]	; (8000358 <__NVIC_SetPriority+0x4c>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	0112      	lsls	r2, r2, #4
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	440b      	add	r3, r1
 8000330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000334:	e00a      	b.n	800034c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <__NVIC_SetPriority+0x50>)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	3b04      	subs	r3, #4
 8000344:	0112      	lsls	r2, r2, #4
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	440b      	add	r3, r1
 800034a:	761a      	strb	r2, [r3, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f003 0307 	and.w	r3, r3, #7
 8000372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f1c3 0307 	rsb	r3, r3, #7
 800037a:	2b04      	cmp	r3, #4
 800037c:	bf28      	it	cs
 800037e:	2304      	movcs	r3, #4
 8000380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	3304      	adds	r3, #4
 8000386:	2b06      	cmp	r3, #6
 8000388:	d902      	bls.n	8000390 <NVIC_EncodePriority+0x30>
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3b03      	subs	r3, #3
 800038e:	e000      	b.n	8000392 <NVIC_EncodePriority+0x32>
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	43da      	mvns	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	401a      	ands	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43d9      	mvns	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	4313      	orrs	r3, r2
         );
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_DAC_SetSignedFormat>:
  *         @arg @ref LL_DAC_SIGNED_FORMAT_ENABLE
  *         @arg @ref LL_DAC_SIGNED_FORMAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_DAC_SetSignedFormat(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t SignedFormat)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b085      	sub	sp, #20
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(DACx->MCR,
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	43db      	mvns	r3, r3
 80003e6:	401a      	ands	r2, r3
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	f003 0310 	and.w	r3, r3, #16
 80003ee:	6879      	ldr	r1, [r7, #4]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	431a      	orrs	r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	63da      	str	r2, [r3, #60]	; 0x3c
             DAC_MCR_SINFORMAT1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK),
             SignedFormat << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <LL_DAC_DisableDMADoubleDataMode>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableDMADoubleDataMode(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->MCR,
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	43db      	mvns	r3, r3
 8000424:	401a      	ands	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	63da      	str	r2, [r3, #60]	; 0x3c
            DAC_MCR_DMADOUBLE1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_DAC_Enable>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f003 0310 	and.w	r3, r3, #16
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 0310 	and.w	r3, r3, #16
 8000476:	2102      	movs	r1, #2
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_DAC_DisableTrigger>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	2102      	movs	r1, #2
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	401a      	ands	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
            DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	431a      	orrs	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b087      	sub	sp, #28
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3308      	adds	r3, #8
 80004f2:	461a      	mov	r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	0f1b      	lsrs	r3, r3, #28
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4413      	add	r3, r2
 80004fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000506:	f023 030f 	bic.w	r3, r3, #15
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	431a      	orrs	r2, r3
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	601a      	str	r2, [r3, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8000512:	bf00      	nop
 8000514:	371c      	adds	r7, #28
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <LL_RCC_HSI_Enable+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <LL_RCC_HSI_Enable+0x1c>)
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <LL_RCC_HSI_IsReady+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800054c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000550:	d101      	bne.n	8000556 <LL_RCC_HSI_IsReady+0x16>
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <LL_RCC_HSI_IsReady+0x18>
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800057e:	4313      	orrs	r3, r2
 8000580:	604b      	str	r3, [r1, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_RCC_SetSysClkSource+0x24>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f023 0203 	bic.w	r2, r3, #3
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_RCC_SetSysClkSource+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	608b      	str	r3, [r1, #8]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_RCC_GetSysClkSource+0x18>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f003 030c 	and.w	r3, r3, #12
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_RCC_SetAHBPrescaler+0x24>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <LL_RCC_SetAHBPrescaler+0x24>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	608b      	str	r3, [r1, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <LL_RCC_SetAPB1Prescaler+0x24>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000638:	4904      	ldr	r1, [pc, #16]	; (800064c <LL_RCC_SetAPB2Prescaler+0x24>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	608b      	str	r3, [r1, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <LL_RCC_PLL_Enable+0x1c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <LL_RCC_PLL_Enable+0x1c>)
 800065a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <LL_RCC_PLL_IsReady+0x24>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000680:	d101      	bne.n	8000686 <LL_RCC_PLL_IsReady+0x16>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <LL_RCC_PLL_IsReady+0x18>
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	68f9      	ldr	r1, [r7, #12]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	4311      	orrs	r1, r2
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	0212      	lsls	r2, r2, #8
 80006b8:	4311      	orrs	r1, r2
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	430a      	orrs	r2, r1
 80006be:	4904      	ldr	r1, [pc, #16]	; (80006d0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000
 80006d4:	f9ff800c 	.word	0xf9ff800c

080006d8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800070e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000

08000728 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000732:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_APB1_GRP1_EnableClock+0x2c>)
 800073e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4013      	ands	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <LL_APB2_GRP1_EnableClock+0x2c>)
 800076e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	f003 0303 	and.w	r3, r3, #3
 800079a:	3302      	adds	r3, #2
 800079c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	43db      	mvns	r3, r3
 80007a6:	ea02 0103 	and.w	r1, r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	fa93 f3a3 	rbit	r3, r3
 80007b6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80007c2:	2320      	movs	r3, #32
 80007c4:	e003      	b.n	80007ce <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	fab3 f383 	clz	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	409a      	lsls	r2, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <LL_SYSCFG_SetEXTISource+0x6c>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	430a      	orrs	r2, r1
 80007e0:	3302      	adds	r3, #2
 80007e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007e6:	bf00      	nop
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40010000 	.word	0x40010000

080007f8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <LL_FLASH_SetLatency+0x24>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f023 020f 	bic.w	r2, r3, #15
 8000808:	4904      	ldr	r1, [pc, #16]	; (800081c <LL_FLASH_SetLatency+0x24>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	600b      	str	r3, [r1, #0]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40022000 	.word	0x40022000

08000820 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <LL_FLASH_GetLatency+0x18>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f003 030f 	and.w	r3, r3, #15
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40022000 	.word	0x40022000

0800083c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800084c:	4904      	ldr	r1, [pc, #16]	; (8000860 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	600b      	str	r3, [r1, #0]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40007000 	.word	0x40007000

08000864 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6093      	str	r3, [r2, #8]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40007000 	.word	0x40007000

08000884 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000884:	b480      	push	{r7}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa93 f3a3 	rbit	r3, r3
 800089e:	613b      	str	r3, [r7, #16]
  return result;
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80008aa:	2320      	movs	r3, #32
 80008ac:	e003      	b.n	80008b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	fab3 f383 	clz	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2103      	movs	r1, #3
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	401a      	ands	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	fa93 f3a3 	rbit	r3, r3
 80008cc:	61fb      	str	r3, [r7, #28]
  return result;
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d101      	bne.n	80008dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008d8:	2320      	movs	r3, #32
 80008da:	e003      	b.n	80008e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	fab3 f383 	clz	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	431a      	orrs	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	372c      	adds	r7, #44	; 0x2c
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80008fe:	b480      	push	{r7}
 8000900:	b08b      	sub	sp, #44	; 0x2c
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	613b      	str	r3, [r7, #16]
  return result;
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000924:	2320      	movs	r3, #32
 8000926:	e003      	b.n	8000930 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2103      	movs	r1, #3
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	401a      	ands	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	fa93 f3a3 	rbit	r3, r3
 8000946:	61fb      	str	r3, [r7, #28]
  return result;
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000952:	2320      	movs	r3, #32
 8000954:	e003      	b.n	800095e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	431a      	orrs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	bf00      	nop
 800096e:	372c      	adds	r7, #44	; 0x2c
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	619a      	str	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	4013      	ands	r3, r2
 80009c6:	041a      	lsls	r2, r3, #16
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	400b      	ands	r3, r1
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	619a      	str	r2, [r3, #24]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff feb5 	bl	8000758 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009f2:	f7ff fe99 	bl	8000728 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f6:	2003      	movs	r0, #3
 80009f8:	f7ff fc38 	bl	800026c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80009fc:	f7ff ff32 	bl	8000864 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f81e 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 f8ce 	bl	8000ba4 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000a08:	f000 f87c 	bl	8000b04 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for User push-button press */
  //WaitForUserButtonPress();
  
  /* Turn-off LED2 */
  LED_Off();
 8000a0c:	f000 f939 	bl	8000c82 <LED_Off>
  
  /* Activate DAC channel */
//Activate_DAC();
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <main+0x54>)
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <main+0x58>)
 8000a14:	f7ff fd0f 	bl	8000436 <LL_DAC_Enable>
  //LL_mDelay(10);
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <main+0x54>)
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <main+0x58>)
 8000a1c:	f7ff fd21 	bl	8000462 <LL_DAC_EnableTrigger>

  LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, 2000);
 8000a20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <main+0x54>)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <main+0x58>)
 8000a28:	f7ff fd5b 	bl	80004e2 <LL_DAC_ConvertData12RightAligned>

  /* Trig DAC conversion by software */
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
 8000a2c:	4902      	ldr	r1, [pc, #8]	; (8000a38 <main+0x54>)
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <main+0x58>)
 8000a30:	f7ff fd44 	bl	80004bc <LL_DAC_TrigSWConversion>
  //LED_On();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x50>
 8000a36:	bf00      	nop
 8000a38:	02110001 	.word	0x02110001
 8000a3c:	50000800 	.word	0x50000800

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000a44:	2004      	movs	r0, #4
 8000a46:	f7ff fed7 	bl	80007f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff fee8 	bl	8000820 <LL_FLASH_GetLatency>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d1fa      	bne.n	8000a4c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5a:	f7ff feef 	bl	800083c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000a5e:	f7ff fd5f 	bl	8000520 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a62:	bf00      	nop
 8000a64:	f7ff fd6c 	bl	8000540 <LL_RCC_HSI_IsReady>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d1fa      	bne.n	8000a64 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000a6e:	2040      	movs	r0, #64	; 0x40
 8000a70:	f7ff fd7a 	bl	8000568 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 75, LL_RCC_PLLR_DIV_2);
 8000a74:	2300      	movs	r3, #0
 8000a76:	224b      	movs	r2, #75	; 0x4b
 8000a78:	2130      	movs	r1, #48	; 0x30
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fe0c 	bl	8000698 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000a80:	f7ff fe2a 	bl	80006d8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a84:	f7ff fde4 	bl	8000650 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a88:	bf00      	nop
 8000a8a:	f7ff fdf1 	bl	8000670 <LL_RCC_PLL_IsReady>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1fa      	bne.n	8000a8a <SystemClock_Config+0x4a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f7ff fd7d 	bl	8000594 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000a9a:	2080      	movs	r0, #128	; 0x80
 8000a9c:	f7ff fd9c 	bl	80005d8 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000aa0:	bf00      	nop
 8000aa2:	f7ff fd8b 	bl	80005bc <LL_RCC_GetSysClkSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b0c      	cmp	r3, #12
 8000aaa:	d1fa      	bne.n	8000aa2 <SystemClock_Config+0x62>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <SystemClock_Config+0xb8>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <SystemClock_Config+0xb8>)
 8000ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <SystemClock_Config+0xbc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <SystemClock_Config+0xbc>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <SystemClock_Config+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8000aca:	bf00      	nop
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <SystemClock_Config+0xbc>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b63      	cmp	r3, #99	; 0x63
 8000ad2:	d9fb      	bls.n	8000acc <SystemClock_Config+0x8c>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fd7f 	bl	80005d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fd90 	bl	8000600 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fda1 	bl	8000628 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(150000000);
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <SystemClock_Config+0xc0>)
 8000ae8:	f000 fe52 	bl	8001790 <LL_Init1msTick>

  LL_SetSystemCoreClock(150000000);
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <SystemClock_Config+0xc0>)
 8000aee:	f000 fe5d 	bl	80017ac <LL_SetSystemCoreClock>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000edf0 	.word	0xe000edf0
 8000afc:	e0001000 	.word	0xe0001000
 8000b00:	08f0d180 	.word	0x08f0d180

08000b04 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_DAC1);
 8000b2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b32:	f7ff fde1 	bl	80006f8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f7ff fdde 	bl	80006f8 <LL_AHB2_GRP1_EnableClock>
  /**DAC1 GPIO Configuration
  PA4   ------> DAC1_OUT1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b40:	2303      	movs	r3, #3
 8000b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fd95 	bl	800167e <LL_GPIO_Init>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config
  */
  LL_DAC_SetSignedFormat(DAC1, LL_DAC_CHANNEL_1, LL_DAC_SIGNED_FORMAT_DISABLE);
 8000b54:	2200      	movs	r2, #0
 8000b56:	4911      	ldr	r1, [pc, #68]	; (8000b9c <MX_DAC1_Init+0x98>)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_DAC1_Init+0x9c>)
 8000b5a:	f7ff fc34 	bl	80003c6 <LL_DAC_SetSignedFormat>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.TriggerSource2 = LL_DAC_TRIG_SOFTWARE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_GPIO;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  DAC_InitStruct.OutputMode = LL_DAC_OUTPUT_MODE_NORMAL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <MX_DAC1_Init+0x98>)
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_DAC1_Init+0x9c>)
 8000b80:	f000 f96d 	bl	8000e5e <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000b84:	4905      	ldr	r1, [pc, #20]	; (8000b9c <MX_DAC1_Init+0x98>)
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_DAC1_Init+0x9c>)
 8000b88:	f7ff fc81 	bl	800048e <LL_DAC_DisableTrigger>
  LL_DAC_DisableDMADoubleDataMode(DAC1, LL_DAC_CHANNEL_1);
 8000b8c:	4903      	ldr	r1, [pc, #12]	; (8000b9c <MX_DAC1_Init+0x98>)
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_DAC1_Init+0x9c>)
 8000b90:	f7ff fc39 	bl	8000406 <LL_DAC_DisableDMADoubleDataMode>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	02110001 	.word	0x02110001
 8000ba0:	50000800 	.word	0x50000800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f7ff fd96 	bl	80006f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fd93 	bl	80006f8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f7ff fedc 	bl	8000994 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000bdc:	4922      	ldr	r1, [pc, #136]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fdd2 	bl	8000788 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fb03 	bl	800120c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c0e:	f7ff fe76 	bl	80008fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c1a:	f7ff fe33 	bl	8000884 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fd20 	bl	800167e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8000c3e:	f7ff fb39 	bl	80002b4 <__NVIC_GetPriorityGrouping>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2200      	movs	r2, #0
 8000c46:	2103      	movs	r1, #3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fb89 	bl	8000360 <NVIC_EncodePriority>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4619      	mov	r1, r3
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	f7ff fb5a 	bl	800030c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c58:	2028      	movs	r0, #40	; 0x28
 8000c5a:	f7ff fb39 	bl	80002d0 <__NVIC_EnableIRQ>

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	00f00003 	.word	0x00f00003
 8000c6c:	48000800 	.word	0x48000800

08000c70 <LED_On>:
  * @brief  Turn-on LED2.
  * @param  None
  * @retval None
  */
void LED_On(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000c74:	2120      	movs	r1, #32
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f7ff fe7d 	bl	8000978 <LL_GPIO_SetOutputPin>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <LED_Off>:
  * @brief  Turn-off LED2.
  * @param  None
  * @retval None
  */
void LED_Off(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* Turn LED2 off */
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000c86:	2120      	movs	r1, #32
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f7ff fe82 	bl	8000994 <LL_GPIO_ResetOutputPin>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <LED_Toggle>:
  * @brief  Toggle LED2.
  * @param  None
  * @retval None
  */
void LED_Toggle(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Toggle LED2 */
  LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c98:	2120      	movs	r1, #32
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f7ff fe87 	bl	80009b0 <LL_GPIO_TogglePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <UserButton_Callback>:
  * @brief  Function to manage IRQ Handler
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  uint32_t tmp_dac_value = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  
  /* On the first press on user button, update only user button variable      */
  /* to manage waiting function.                                              */
  /* Then, on next presses on user button, update DAC settings.               */
  if(ubButtonPress == 0)
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <UserButton_Callback+0x70>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <UserButton_Callback+0x1c>
  {
    /* Update User push-button variable : to be checked in waiting loop in main program */
    ubButtonPress = 1;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <UserButton_Callback+0x70>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
    LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, tmp_dac_value);
    
    /* Trig DAC conversion by software */
    LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
  }
}
 8000cc2:	e025      	b.n	8000d10 <UserButton_Callback+0x68>
    ubButtonPressCount++;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <UserButton_Callback+0x74>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <UserButton_Callback+0x74>)
 8000cd0:	701a      	strb	r2, [r3, #0]
    if(ubButtonPressCount < 4)
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <UserButton_Callback+0x74>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d80b      	bhi.n	8000cf4 <UserButton_Callback+0x4c>
      tmp_dac_value = DIGITAL_SCALE_12BITS * ubButtonPressCount/4;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <UserButton_Callback+0x74>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	031b      	lsls	r3, r3, #12
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	607b      	str	r3, [r7, #4]
      LED_Toggle();
 8000cee:	f7ff ffd1 	bl	8000c94 <LED_Toggle>
 8000cf2:	e004      	b.n	8000cfe <UserButton_Callback+0x56>
      tmp_dac_value = DIGITAL_SCALE_12BITS;
 8000cf4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cf8:	607b      	str	r3, [r7, #4]
      LED_On(); 
 8000cfa:	f7ff ffb9 	bl	8000c70 <LED_On>
    LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, tmp_dac_value);
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <UserButton_Callback+0x78>)
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <UserButton_Callback+0x7c>)
 8000d04:	f7ff fbed 	bl	80004e2 <LL_DAC_ConvertData12RightAligned>
    LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
 8000d08:	4905      	ldr	r1, [pc, #20]	; (8000d20 <UserButton_Callback+0x78>)
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <UserButton_Callback+0x7c>)
 8000d0c:	f7ff fbd6 	bl	80004bc <LL_DAC_TrigSWConversion>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000020 	.word	0x20000020
 8000d1c:	20000021 	.word	0x20000021
 8000d20:	02110001 	.word	0x02110001
 8000d24:	50000800 	.word	0x50000800

08000d28 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40010400 	.word	0x40010400

08000d54 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6153      	str	r3, [r2, #20]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40010400 	.word	0x40010400

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000dd6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dda:	f7ff ffa5 	bl	8000d28 <LL_EXTI_IsActiveFlag_0_31>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000de4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000de8:	f7ff ffb4 	bl	8000d54 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    
    /* Handle user button press in dedicated function */
    UserButton_Callback(); 
 8000dec:	f7ff ff5c 	bl	8000ca8 <UserButton_Callback>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SystemInit+0x28>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <SystemInit+0x28>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SystemInit+0x28>)
 8000e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <LL_DAC_IsEnabled>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(DACx->CR,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	401a      	ands	r2, r3
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d101      	bne.n	8000e50 <LL_DAC_IsEnabled+0x30>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <LL_DAC_IsEnabled+0x32>
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]
                                                  DAC_InitStruct->WaveAutoGenerationConfig));
  }

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if (LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff ffd5 	bl	8000e20 <LL_DAC_IsEnabled>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 8090 	bne.w	8000f9e <LL_DAC_Init+0x140>
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d05c      	beq.n	8000f40 <LL_DAC_Init+0xe2>
    {
      if (DAC_InitStruct->WaveAutoGeneration == LL_DAC_WAVE_AUTO_GENERATION_SAWTOOTH)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e8c:	d13c      	bne.n	8000f08 <LL_DAC_Init+0xaa>
      {
        assert_param(IS_LL_DAC_TRIGGER_SOURCE2(DACx, DAC_InitStruct->TriggerSource2));

        MODIFY_REG(DACx->CR,
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	21c0      	movs	r1, #192	; 0xc0
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6899      	ldr	r1, [r3, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]
                   DAC_CR_WAVE1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK),
                   DAC_InitStruct->WaveAutoGeneration << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                  );
        MODIFY_REG(DACx->STMODR,
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0899      	lsrs	r1, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	4319      	orrs	r1, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	661a      	str	r2, [r3, #96]	; 0x60
                   (
                     ((DAC_InitStruct->TriggerSource >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos)
                     | ((DAC_InitStruct->TriggerSource2 >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos)
                   ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                  );
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3358      	adds	r3, #88	; 0x58
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	09db      	lsrs	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e02f      	b.n	8000f68 <LL_DAC_Init+0x10a>
                  DAC_InitStruct->WaveAutoGenerationConfig);
      }
      else
      {
        MODIFY_REG(DACx->CR,
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4319      	orrs	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4319      	orrs	r1, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e013      	b.n	8000f68 <LL_DAC_Init+0x10a>
                  );
      }
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	21fc      	movs	r1, #252	; 0xfc
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	601a      	str	r2, [r3, #0]
                 (DAC_InitStruct->TriggerSource
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    MODIFY_REG(DACx->MCR,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2107      	movs	r1, #7
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6919      	ldr	r1, [r3, #16]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4319      	orrs	r1, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4319      	orrs	r1, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	431a      	orrs	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f9c:	e001      	b.n	8000fa2 <LL_DAC_Init+0x144>
              );
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LL_EXTI_EnableIT_0_31>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <LL_EXTI_EnableIT_0_31+0x20>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4904      	ldr	r1, [pc, #16]	; (8000fcc <LL_EXTI_EnableIT_0_31+0x20>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <LL_EXTI_EnableIT_32_63>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <LL_EXTI_EnableIT_32_63+0x20>)
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_EXTI_EnableIT_32_63+0x20>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	620b      	str	r3, [r1, #32]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <LL_EXTI_DisableIT_0_31>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	43db      	mvns	r3, r3
 8001004:	4904      	ldr	r1, [pc, #16]	; (8001018 <LL_EXTI_DisableIT_0_31+0x24>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40010400 	.word	0x40010400

0800101c <LL_EXTI_DisableIT_32_63>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <LL_EXTI_DisableIT_32_63+0x24>)
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	43db      	mvns	r3, r3
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <LL_EXTI_DisableIT_32_63+0x24>)
 800102e:	4013      	ands	r3, r2
 8001030:	620b      	str	r3, [r1, #32]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40010400 	.word	0x40010400

08001044 <LL_EXTI_EnableEvent_0_31>:
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_EXTI_EnableEvent_0_31+0x20>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40010400 	.word	0x40010400

08001068 <LL_EXTI_EnableEvent_32_63>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40010400 	.word	0x40010400

0800108c <LL_EXTI_DisableEvent_0_31>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	43db      	mvns	r3, r3
 800109c:	4904      	ldr	r1, [pc, #16]	; (80010b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800109e:	4013      	ands	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40010400 	.word	0x40010400

080010b4 <LL_EXTI_DisableEvent_32_63>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80010be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	4904      	ldr	r1, [pc, #16]	; (80010d8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40010400 	.word	0x40010400

080010dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40010400 	.word	0x40010400

08001100 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	4904      	ldr	r1, [pc, #16]	; (8001120 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40010400 	.word	0x40010400

08001124 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	43db      	mvns	r3, r3
 8001134:	4904      	ldr	r1, [pc, #16]	; (8001148 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001136:	4013      	ands	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40010400 	.word	0x40010400

0800114c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	43db      	mvns	r3, r3
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800115e:	4013      	ands	r3, r2
 8001160:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40010400 	.word	0x40010400

08001174 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40010400 	.word	0x40010400

080011bc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4904      	ldr	r1, [pc, #16]	; (80011e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40010400 	.word	0x40010400

080011e4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4904      	ldr	r1, [pc, #16]	; (8001208 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40010400 	.word	0x40010400

0800120c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7a1b      	ldrb	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80c8 	beq.w	80013b2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d05d      	beq.n	80012e6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a5b      	ldrb	r3, [r3, #9]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00e      	beq.n	8001250 <LL_EXTI_Init+0x44>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d017      	beq.n	8001266 <LL_EXTI_Init+0x5a>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d120      	bne.n	800127c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff24 	bl	800108c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff feaf 	bl	8000fac <LL_EXTI_EnableIT_0_31>
          break;
 800124e:	e018      	b.n	8001282 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fecd 	bl	8000ff4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fef0 	bl	8001044 <LL_EXTI_EnableEvent_0_31>
          break;
 8001264:	e00d      	b.n	8001282 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fe9e 	bl	8000fac <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fee5 	bl	8001044 <LL_EXTI_EnableEvent_0_31>
          break;
 800127a:	e002      	b.n	8001282 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
          break;
 8001280:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7a9b      	ldrb	r3, [r3, #10]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d02d      	beq.n	80012e6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7a9b      	ldrb	r3, [r3, #10]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d00e      	beq.n	80012b0 <LL_EXTI_Init+0xa4>
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <LL_EXTI_Init+0xba>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d120      	bne.n	80012dc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff8c 	bl	80011bc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff17 	bl	80010dc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80012ae:	e01b      	b.n	80012e8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff58 	bl	8001174 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80012c4:	e010      	b.n	80012e8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff06 	bl	80010dc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff4d 	bl	8001174 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80012da:	e005      	b.n	80012e8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
            break;
 80012e4:	e000      	b.n	80012e8 <LL_EXTI_Init+0xdc>
        }
      }
 80012e6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d075      	beq.n	80013dc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7a5b      	ldrb	r3, [r3, #9]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00e      	beq.n	8001316 <LL_EXTI_Init+0x10a>
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d017      	beq.n	800132c <LL_EXTI_Init+0x120>
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d120      	bne.n	8001342 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fed5 	bl	80010b4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe5e 	bl	8000fd0 <LL_EXTI_EnableIT_32_63>
          break;
 8001314:	e01a      	b.n	800134c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe7e 	bl	800101c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe9f 	bl	8001068 <LL_EXTI_EnableEvent_32_63>
          break;
 800132a:	e00f      	b.n	800134c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe4d 	bl	8000fd0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe94 	bl	8001068 <LL_EXTI_EnableEvent_32_63>
          break;
 8001340:	e004      	b.n	800134c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
          break;
 800134a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7a9b      	ldrb	r3, [r3, #10]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d043      	beq.n	80013dc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7a9b      	ldrb	r3, [r3, #10]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d00e      	beq.n	800137a <LL_EXTI_Init+0x16e>
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <LL_EXTI_Init+0x184>
 8001360:	2b01      	cmp	r3, #1
 8001362:	d120      	bne.n	80013a6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff3b 	bl	80011e4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fec4 	bl	8001100 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001378:	e031      	b.n	80013de <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fee4 	bl	800114c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff05 	bl	8001198 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800138e:	e026      	b.n	80013de <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff feb3 	bl	8001100 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fefa 	bl	8001198 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80013a4:	e01b      	b.n	80013de <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f043 0305 	orr.w	r3, r3, #5
 80013ac:	60fb      	str	r3, [r7, #12]
            break;
 80013ae:	bf00      	nop
 80013b0:	e015      	b.n	80013de <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe1c 	bl	8000ff4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe63 	bl	800108c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe26 	bl	800101c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe6d 	bl	80010b4 <LL_EXTI_DisableEvent_32_63>
 80013da:	e000      	b.n	80013de <LL_EXTI_Init+0x1d2>
      }
 80013dc:	bf00      	nop
  }

  return status;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LL_GPIO_SetPinMode>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	613b      	str	r3, [r7, #16]
  return result;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800140e:	2320      	movs	r3, #32
 8001410:	e003      	b.n	800141a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2103      	movs	r1, #3
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	61fb      	str	r3, [r7, #28]
  return result;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800143c:	2320      	movs	r3, #32
 800143e:	e003      	b.n	8001448 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	431a      	orrs	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	372c      	adds	r7, #44	; 0x2c
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_GPIO_SetPinOutputType>:
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	605a      	str	r2, [r3, #4]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_GPIO_SetPinSpeed>:
{
 8001492:	b480      	push	{r7}
 8001494:	b08b      	sub	sp, #44	; 0x2c
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	613b      	str	r3, [r7, #16]
  return result;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80014b8:	2320      	movs	r3, #32
 80014ba:	e003      	b.n	80014c4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2103      	movs	r1, #3
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	61fb      	str	r3, [r7, #28]
  return result;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80014e6:	2320      	movs	r3, #32
 80014e8:	e003      	b.n	80014f2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]
}
 8001500:	bf00      	nop
 8001502:	372c      	adds	r7, #44	; 0x2c
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_GPIO_SetPinPull>:
{
 800150c:	b480      	push	{r7}
 800150e:	b08b      	sub	sp, #44	; 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	613b      	str	r3, [r7, #16]
  return result;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001532:	2320      	movs	r3, #32
 8001534:	e003      	b.n	800153e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2103      	movs	r1, #3
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	61fb      	str	r3, [r7, #28]
  return result;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001560:	2320      	movs	r3, #32
 8001562:	e003      	b.n	800156c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	bf00      	nop
 800157c:	372c      	adds	r7, #44	; 0x2c
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_GPIO_SetAFPin_0_7>:
{
 8001586:	b480      	push	{r7}
 8001588:	b08b      	sub	sp, #44	; 0x2c
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	613b      	str	r3, [r7, #16]
  return result;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80015ac:	2320      	movs	r3, #32
 80015ae:	e003      	b.n	80015b8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	210f      	movs	r1, #15
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	61fb      	str	r3, [r7, #28]
  return result;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e003      	b.n	80015e6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	621a      	str	r2, [r3, #32]
}
 80015f4:	bf00      	nop
 80015f6:	372c      	adds	r7, #44	; 0x2c
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_GPIO_SetAFPin_8_15>:
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	613b      	str	r3, [r7, #16]
  return result;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001628:	2320      	movs	r3, #32
 800162a:	e003      	b.n	8001634 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	210f      	movs	r1, #15
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	61fb      	str	r3, [r7, #28]
  return result;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001658:	2320      	movs	r3, #32
 800165a:	e003      	b.n	8001664 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001672:	bf00      	nop
 8001674:	372c      	adds	r7, #44	; 0x2c
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	60fb      	str	r3, [r7, #12]
  return result;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <LL_GPIO_Init+0x26>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016ae:	e048      	b.n	8001742 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d03a      	beq.n	800173c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d003      	beq.n	80016d6 <LL_GPIO_Init+0x58>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d10e      	bne.n	80016f4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	461a      	mov	r2, r3
 80016dc:	69b9      	ldr	r1, [r7, #24]
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fed7 	bl	8001492 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff feb7 	bl	8001462 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	461a      	mov	r2, r3
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff05 	bl	800150c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d111      	bne.n	800172e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2bff      	cmp	r3, #255	; 0xff
 800170e:	d807      	bhi.n	8001720 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	461a      	mov	r2, r3
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff34 	bl	8001586 <LL_GPIO_SetAFPin_0_7>
 800171e:	e006      	b.n	800172e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	461a      	mov	r2, r3
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff69 	bl	8001600 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	461a      	mov	r2, r3
 8001734:	69b9      	ldr	r1, [r7, #24]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fe56 	bl	80013e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3301      	adds	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1af      	bne.n	80016b0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <LL_InitTick+0x30>)
 8001770:	3b01      	subs	r3, #1
 8001772:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_InitTick+0x30>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <LL_InitTick+0x30>)
 800177c:	2205      	movs	r2, #5
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e010 	.word	0xe000e010

08001790 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffdd 	bl	800175c <LL_InitTick>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <LL_SetSystemCoreClock+0x1c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000

080017cc <__libc_init_array>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	4e0d      	ldr	r6, [pc, #52]	; (8001804 <__libc_init_array+0x38>)
 80017d0:	4c0d      	ldr	r4, [pc, #52]	; (8001808 <__libc_init_array+0x3c>)
 80017d2:	1ba4      	subs	r4, r4, r6
 80017d4:	10a4      	asrs	r4, r4, #2
 80017d6:	2500      	movs	r5, #0
 80017d8:	42a5      	cmp	r5, r4
 80017da:	d109      	bne.n	80017f0 <__libc_init_array+0x24>
 80017dc:	4e0b      	ldr	r6, [pc, #44]	; (800180c <__libc_init_array+0x40>)
 80017de:	4c0c      	ldr	r4, [pc, #48]	; (8001810 <__libc_init_array+0x44>)
 80017e0:	f000 f818 	bl	8001814 <_init>
 80017e4:	1ba4      	subs	r4, r4, r6
 80017e6:	10a4      	asrs	r4, r4, #2
 80017e8:	2500      	movs	r5, #0
 80017ea:	42a5      	cmp	r5, r4
 80017ec:	d105      	bne.n	80017fa <__libc_init_array+0x2e>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017f4:	4798      	blx	r3
 80017f6:	3501      	adds	r5, #1
 80017f8:	e7ee      	b.n	80017d8 <__libc_init_array+0xc>
 80017fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017fe:	4798      	blx	r3
 8001800:	3501      	adds	r5, #1
 8001802:	e7f2      	b.n	80017ea <__libc_init_array+0x1e>
 8001804:	0800182c 	.word	0x0800182c
 8001808:	0800182c 	.word	0x0800182c
 800180c:	0800182c 	.word	0x0800182c
 8001810:	08001830 	.word	0x08001830

08001814 <_init>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	bf00      	nop
 8001818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181a:	bc08      	pop	{r3}
 800181c:	469e      	mov	lr, r3
 800181e:	4770      	bx	lr

08001820 <_fini>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	bf00      	nop
 8001824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001826:	bc08      	pop	{r3}
 8001828:	469e      	mov	lr, r3
 800182a:	4770      	bx	lr
